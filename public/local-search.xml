<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微服务概述</title>
    <link href="/2021/08/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/08/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="微服务起源"><a href="#微服务起源" class="headerlink" title="微服务起源"></a>微服务起源</h2><h3 id="单体应用的缺点"><a href="#单体应用的缺点" class="headerlink" title="单体应用的缺点"></a>单体应用的缺点</h3><ul><li>单体应用复杂</li><li>应用无法拓展</li><li>可靠性低</li><li>敏捷开发和快速部署无法完成</li></ul><p><em><strong>由此产生微服务</strong></em></p><blockquote><p>一切争端的开始</p></blockquote><h3 id="微服务的演变"><a href="#微服务的演变" class="headerlink" title="微服务的演变"></a>微服务的演变</h3><p>微服务本质上是对面向架构的模式(SOA)的一种实践</p><p>微服务的特点:</p><ul><li>小即是美</li><li>单一职责</li><li>尽可能早创建原型</li><li>可以执行比效率更重要</li></ul><h3 id="微服务的定义"><a href="#微服务的定义" class="headerlink" title="微服务的定义"></a>微服务的定义</h3><p>围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活</p><p><em><strong>核心： 化繁为简 分而治之</strong></em></p><p>优点：</p><ul><li>原子服务</li><li>独立部署</li><li>隔离部署</li><li>去中心化服务治理</li></ul><p>缺点：</p><ul><li>基础设施建设复杂度高</li><li>分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂</li><li>分布式的分区数据库 对分布式事物等需要做对应的复杂处理</li><li>测试整体的微服务架构复杂</li><li>服务间的依赖 局部升级可能影响整体</li></ul><h2 id="微服务设计思路"><a href="#微服务设计思路" class="headerlink" title="微服务设计思路"></a>微服务设计思路</h2><h3 id="组件服务化"><a href="#组件服务化" class="headerlink" title="组件服务化"></a>组件服务化</h3><ul><li>kit:一个微服务的基础库（框架）</li><li>service: 业务业务代码+kit依赖+第三方组件的依赖</li><li>RPC+message queue: 轻量级通讯</li></ul><h3 id="按业务组织服务"><a href="#按业务组织服务" class="headerlink" title="按业务组织服务"></a>按业务组织服务</h3><p>事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能</p><h3 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h3><ul><li>数据去中心化</li><li>治理去中心化</li><li>技术去中心化</li></ul><h3 id="基础设施自动化"><a href="#基础设施自动化" class="headerlink" title="基础设施自动化"></a>基础设施自动化</h3><ul><li>ci/cd</li><li>auto testing</li><li>在线监控</li></ul><h3 id="服务兼容性设计"><a href="#服务兼容性设计" class="headerlink" title="服务兼容性设计"></a>服务兼容性设计</h3><p>发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。</p><ul><li>负载均衡</li><li>超时控制</li><li>负载保护</li><li>隔离</li><li>限流</li><li>降级</li><li>重试</li><li>熔断</li></ul><h2 id="微服务设计"><a href="#微服务设计" class="headerlink" title="微服务设计"></a>微服务设计</h2><h3 id="API-GATEWAY"><a href="#API-GATEWAY" class="headerlink" title="API GATEWAY"></a>API GATEWAY</h3><blockquote><p>backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务</p></blockquote><h3 id="微服务的划分"><a href="#微服务的划分" class="headerlink" title="微服务的划分"></a>微服务的划分</h3><h3 id="微服务的安全"><a href="#微服务的安全" class="headerlink" title="微服务的安全"></a>微服务的安全</h3><h2 id="服务发现-amp-GRPC"><a href="#服务发现-amp-GRPC" class="headerlink" title="服务发现 &amp; GRPC"></a>服务发现 &amp; GRPC</h2><h3 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h3><ul><li>多语言：语言中立，支持多种语言。</li><li>轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架</li><li>可插拔</li><li>IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li><li>移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。</li><li>服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念</li><li>负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。</li><li>流：Streaming API。</li><li>阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。</li><li>元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。</li><li>标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 </li></ul><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><ul><li><p>客户端发现：<br>直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑</p></li><li><p>服务端发现：<br>Consumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失</p></li><li><p>服务网格 service mesh:<br>通过sidercar 方式隐式的支持服务发现（待补充）</p></li></ul><h2 id="多集群-amp-多租户"><a href="#多集群-amp-多租户" class="headerlink" title="多集群 &amp; 多租户"></a>多集群 &amp; 多租户</h2><h3 id="多集群"><a href="#多集群" class="headerlink" title="多集群"></a>多集群</h3><p>为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力</p><h3 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h3><p>在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）</p><p>通过不同的租户区分不同的业务功能：</p><ul><li>红蓝发布</li><li>灰度测试</li><li>模块测试</li></ul><blockquote><p>多租户的概念较为模糊<br>思考？ 多租户中是怎样实现在上下文中传递多租户信息的?</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ddd</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
