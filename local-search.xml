<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈go defer 执行过程</title>
    <link href="/2022/02/14/%E6%B5%85%E8%B0%88go%20defer%20%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/02/14/%E6%B5%85%E8%B0%88go%20defer%20%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="defer-一般用途"><a href="#defer-一般用途" class="headerlink" title="defer 一般用途"></a>defer 一般用途</h2><ol><li>关闭文件句柄</li><li>释放锁</li><li>释放资源</li></ol><p>go 语言的defer功能强大，对于资源管理非常方便，但是如果没用好，也会有陷阱。</p><h2 id="defer-执行流程"><a href="#defer-执行流程" class="headerlink" title="defer 执行流程"></a>defer 执行流程</h2><p>defer 是先进后出的数据结构，如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。</p><p>不过如果对defer的了解不够深入，使用起来可能会踩到一些坑，尤其是跟带命名的返回参数一起使用时。</p><p>defer是在return之前执行的。这个在 <a href="https://go.dev/ref/spec#defer_statements">官方文档</a>中是明确说明了的。<br>要使用defer时不踩坑，最重要的一点就是要明白，return xxx这一条语句并不是一条原子指令!</p><p>defer 语句可以转换为如下语句顺序：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">返回值 = xxx<br>调用<span class="hljs-keyword">defer</span>函数<br>空的<span class="hljs-keyword">return</span><br></code></pre></div></td></tr></table></figure><p>以下面几个例子为例：</p><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        result++<br>    &#125;()<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个例子返回的数值是1，可以转译为如下</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>)</span></span> &#123;<br>     result = <span class="hljs-number">0</span>  <span class="hljs-comment">//return语句不是一条原子调用，return xxx其实是赋值＋ret指令</span><br>     <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">//defer被插入到return之前执行，也就是赋返回值和ret指令之间</span><br>         result++<br>     &#125;()<br>     <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 所以返回值为1</span><br></code></pre></div></td></tr></table></figure><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<br>     t := <span class="hljs-number">5</span><br>     <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>       t = t + <span class="hljs-number">5</span><br>     &#125;()<br>     <span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以转化为如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<br>     t := <span class="hljs-number">5</span><br>     r = t <span class="hljs-comment">//赋值指令</span><br>     <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">//defer被插入到赋值与返回之间执行，这个例子中返回值r没被修改过</span><br>         t = t + <span class="hljs-number">5</span><br>     &#125;<br>     <span class="hljs-keyword">return</span>        <span class="hljs-comment">//空的return指令</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以输出结果为5</p><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<br>          r = r + <span class="hljs-number">5</span><br>    &#125;(r)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以转换为如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<br>     r = <span class="hljs-number">1</span>  <span class="hljs-comment">//给返回值赋值</span><br>     <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;        <span class="hljs-comment">//这里改的r是传值传进去的r，不会改变要返回的那个r值</span><br>          r = r + <span class="hljs-number">5</span><br>     &#125;(r)<br>     <span class="hljs-keyword">return</span>        <span class="hljs-comment">//空的return</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里稍不一样 func 中的r操作是值拷贝 不是闭包 不会改变r的值 所以仍然是1</p><blockquote><p>以上为defer 的陷阱的浅析 0.0</p></blockquote><h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/01.0.html">深入解析Go</a><br><a href="https://www.topgoer.com/%E5%87%BD%E6%95%B0/%E5%BB%B6%E8%BF%9F%E8%B0%83%E7%94%A8defer.html">延迟调用defer</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>老生长谈:进程间通信</title>
    <link href="/2021/12/17/%E8%80%81%E7%94%9F%E9%95%BF%E8%B0%88-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/12/17/%E8%80%81%E7%94%9F%E9%95%BF%E8%B0%88-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>进程间通信方式真可谓老生长谈了， 但是进程间通信都有哪些，又都在哪应用呢？  好吧 不多哔哔，为自己科普起来</p></blockquote><h2 id="1-无名管道通信"><a href="#1-无名管道通信" class="headerlink" title="1 无名管道通信"></a>1 无名管道通信</h2><p>Pipe</p><p>管道是 UNIX 系统 IPC 的最古老的形式，所有的 UNIX 系统都提供管道机制，如果你使用过 shell 中的管道，应该不会默认，例如</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -aux | grep <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></div></td></tr></table></figure><p>这个意思是将 ps -aux 的输出作为 grep xxx 的输入，通过管道可以将两个进程连接起来，功能非常强大，但是有名管道与 shell 的管道有些区别。</p><h2 id="2有名管道通信"><a href="#2有名管道通信" class="headerlink" title="2有名管道通信"></a>2有名管道通信</h2><p>Fifo</p><p>命名管道(named pipe)又被称为先进先出队列(FIFO)，是一种特殊的管道，存在于文件系统中。命名管道与管道非常类似，但是又有自身的显著特征：</p><p>命名管道可以用于任何两个进程间的通信，而不限于同源的两个进程。</p><p>命名管道作为一种特殊的文件存放在文件系统中，而不是像管道那样存放在内核中。当进程对命名管道的使用结束后，命名管道依然存在于文件系统中，除非对其进行删除操作，否则该命名管道不会自行消失。</p><p>和管道一样，命名管道也只能用于数据的单向传输，如果要用命名管道实现两个进程间数据的双向传输，建议使用两个单向的命名管道。</p><h2 id="3信号通信"><a href="#3信号通信" class="headerlink" title="3信号通信"></a>3信号通信</h2><p>Signal</p><p>信号（Signals）是Unix、类Unix以及其他POSIX兼容的操作系统中进程间通讯的一种有限制的方式。</p><p>它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，</p><p>操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被中断。</p><p>如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。</p><p>信号是进程间通信机制中唯一的异步通信机制，可以看作是异步通知，通知接收信号的进程有哪些事情发生了。也可以简单理解为信号是某种形式上的软中断。</p><p>例如：kill 命令发出</p><h2 id="4消息队列通信"><a href="#4消息队列通信" class="headerlink" title="4消息队列通信"></a>4消息队列通信</h2><p>Message Queue</p><p>消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。  </p><p>每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。</p><p>我们可以通过发送消息来避免命名管道的同步和阻塞问题。</p><p>但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。</p><h2 id="5信号量通信"><a href="#5信号量通信" class="headerlink" title="5信号量通信"></a>5信号量通信</h2><p>Semphone</p><p>简单说一下信号量的工作机制（因为真的很简单），可以直接理解成计数器（当然其实加锁的时候肯定不能这么简单，不只只是信号量了 )</p><p>信号量会有初值（&gt;0），每当有进程申请使用信号量，通过一个P操作来对信号量进行-1操作，</p><p>当计数器减到0的时候就说明没有资源了，其他进程要想访问就必须等待（具体怎么等还有说法，比如忙等待或者睡眠），</p><p>当该进程执行完这段工作（我们称之为临界区）之后，就会执行V操作来对信号量进行+1操作。</p><h2 id="6共享内存通信"><a href="#6共享内存通信" class="headerlink" title="6共享内存通信"></a>6共享内存通信</h2><p>Share Memory</p><p>共享内存，顾名思义，就是两个或多个进程都可以访问的同一块内存空间，一个进程对这块空间内容的修改可为其他参与通信的进程所看到的。</p><p>显然，为了达到这个目的，就需要做两件事：一件是在内存划出一块区域来作为共享区；另一件是把这个区域映射到参与通信的各个进程空间。</p><p>通常在内存划出一个区域的方法是，在内存中打开一个文件，若通过系统调用mmap()把这个文件所占用的内存空间映射到参与通信的各个进程地址空间，则这些进程就都可以看到这个共享区域，进而实现进程间的通信。</p><h2 id="7套接字通信"><a href="#7套接字通信" class="headerlink" title="7套接字通信"></a>7套接字通信</h2><p>Socket</p><p>这个不必多说。。。</p>]]></content>
    
    
    <categories>
      
      <category>进程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL在可重复读的隔离级别下到底解解决了幻读的问题没有?</title>
    <link href="/2021/11/10/MySQL%E5%9C%A8%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8B%E5%88%B0%E5%BA%95%E8%A7%A3%E8%A7%A3%E5%86%B3%E4%BA%86%E5%B9%BB%E8%AF%BB%E7%9A%84%E9%97%AE%E9%A2%98%E6%B2%A1%E6%9C%89/"/>
    <url>/2021/11/10/MySQL%E5%9C%A8%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8B%E5%88%B0%E5%BA%95%E8%A7%A3%E8%A7%A3%E5%86%B3%E4%BA%86%E5%B9%BB%E8%AF%BB%E7%9A%84%E9%97%AE%E9%A2%98%E6%B2%A1%E6%9C%89/</url>
    
    <content type="html"><![CDATA[<h2 id="RR幻读到底被解决了没？"><a href="#RR幻读到底被解决了没？" class="headerlink" title="RR幻读到底被解决了没？"></a>RR幻读到底被解决了没？</h2><p>做业务朋友对数据库的ACID多少都了解一些，这里面又尤其隔离性是讨论最多且最复杂的，说到隔离性就不得不说由于隔离产生的问题：</p><ol><li>脏读</li><li>不可重复读</li><li>幻读</li></ol><p>这里面争议最大的就数MySQL默认隔离级别RR是否解决了幻读的问题， 这篇文章就是以实操的角度来看这个问题，所谓光说不练假把式，透过现象看到事情的本质才是我们要做的</p><blockquote><p>先说结论:<br>MySQL在可重复读隔离级别下并没有解决幻读的问题。<br>MySQL读取数据有两种模式，分为快照读和当前读，在当前读下MySQL通过引入间隙锁（gap lock） 能避免幻读的出现。<br>当使用快照读的时候仍可能存在幻读的出现。</p></blockquote><p>可能了解一些MVCC的人就会说，你这说的不对，都是快照读了怎么可能读取到幻读的数据。其实这个问题在我不清楚MVCC细节的时候也有一样的疑问。 我们先看下面的实例。</p><h2 id="出现幻读的实例"><a href="#出现幻读的实例" class="headerlink" title="出现幻读的实例"></a>出现幻读的实例</h2><p>数据库表结构：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `test` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `sex` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of test</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;bob&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>事务时序图：</p><table><thead><tr><th>时间</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>T1</td><td>begin;</td><td></td></tr><tr><td>T2</td><td>select * from test where id &gt;= 1;</td><td>begin;</td></tr><tr><td>T3</td><td></td><td>insert into test(id, name, age, sex) values(2, ‘lisa’, 18, 0);</td></tr><tr><td>T4</td><td></td><td>commit;</td></tr><tr><td>T5</td><td>update test set age = 19 where id &gt;=1;</td><td></td></tr><tr><td>T6</td><td>select * from test where id &gt;= 1;</td><td></td></tr><tr><td>T7</td><td>commit;</td><td></td></tr></tbody></table><p>T2时刻获取结果：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">mysql&gt; select * from <span class="hljs-built_in">test</span> <span class="hljs-built_in">where</span> id &gt;=1;<br>+----+------+-----+-----+<br>| id | name | age | sex |<br>+----+------+-----+-----+<br>|  1 | bob  |  18 |   1 |<br>+----+------+-----+-----+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure><p>T6时刻获取结果：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">mysql&gt; select * from <span class="hljs-built_in">test</span> <span class="hljs-built_in">where</span> id &gt;= 1;<br>+----+------+-----+-----+<br>| id | name | age | sex |<br>+----+------+-----+-----+<br>|  1 | bob  |  19 |   1 |<br>|  2 | lisa |  19 |   0 |<br>+----+------+-----+-----+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure><p>从上图中可以看出我们使用<strong>快照读</strong>在同一个事务的前后两次操作中查到了其他事务新插入的数据，满足幻读的概念。</p><p>那么既然使用快照读了，为什呢还会出现这个问题嘞？</p><h3 id="按照一般的隔离性分析"><a href="#按照一般的隔离性分析" class="headerlink" title="按照一般的隔离性分析"></a>按照一般的隔离性分析</h3><p>理想条件下，事务A获取一条数据然后更新这条数据，最后再次查询这条数据，都应该是对一条数据进行操作。</p><h3 id="然而这并不是理想条件"><a href="#然而这并不是理想条件" class="headerlink" title="然而这并不是理想条件"></a>然而这并不是理想条件</h3><p>实际上事务A的T6时刻的查询，获得了事务B中新插入的数据，仔细看发现新插入的数据也被事务A中的update语句更新了。</p><h3 id="造成幻读原因"><a href="#造成幻读原因" class="headerlink" title="造成幻读原因"></a>造成幻读原因</h3><ol><li>更新语句是当前读，T5时刻的 update 语句执行之前会使用当前读获取最新的全部满足条件的数据进行操作，这就会导致更新语句查询到事务B在T3时刻新插入满足更新条件的数据。</li><li>在可重复读隔离级别下使用MVCC无锁实现快照读，T6时刻由于MVCC的原理使得用户可以获取到当前事务更新的数据，也就是自己在T5时刻更新的新插入的数据，所以可以展示出第一次快照读中没有的数据。</li></ol><h3 id="尝试用当前读执行同样的事务"><a href="#尝试用当前读执行同样的事务" class="headerlink" title="尝试用当前读执行同样的事务"></a>尝试用当前读执行同样的事务</h3><p>事务时序图：</p><table><thead><tr><th>时间</th><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>T1</td><td>begin;</td><td></td></tr><tr><td>T2</td><td>select * from test where id &gt;= 1 for update ;</td><td>begin;</td></tr><tr><td>T3</td><td></td><td>insert into test(id, name, age, sex) values(2, ‘lisa’, 18, 0); <em><strong>(blocking)</strong></em></td></tr><tr><td>T4</td><td>update test set age = 19 where id &gt;=1;</td><td></td></tr><tr><td>T5</td><td>select * from test where id &gt;= 1 for update;</td><td></td></tr><tr><td>T6</td><td>commit;</td><td></td></tr><tr><td>T7</td><td></td><td>commit;</td></tr></tbody></table><p>对比快照读T3时刻插入数据将被阻塞， 这是因为RR下当前读引入了间隙锁的概念。</p><p>查询条件 where id &gt;= 1 不光锁住了表中存在的数据id=1的哪一行，同时也锁住了 (1, +∞) 这个间隙，所以事务B在T3时刻语句将被阻塞，直到事务A提交事务之前都将一直阻塞。</p><p>所以插要插入的数据根本不能出现在事务A的查询语句中，也就没有可能出现幻读。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>当前读下由于有行锁和间隙锁，所以不存在幻读的情况发生。</li><li>在快照读的情况下，由于事务中可能存在更新语句覆盖了其他事务中不可见的提交。导致一致性视图发生改变可以读到别的事务提交的语句内容，最终导致出现幻读。</li></ol><h3 id="思考🤔"><a href="#思考🤔" class="headerlink" title="思考🤔"></a>思考🤔</h3><p>mysql知识点都是细碎的，但分析问题的时候往往需要将全部的知识脉络串联起来，正如上面的这个例子，涉及到了当前读，快照读，mvcc原理，行锁和间隙锁这些问题。</p><p>当我们不清楚的时候最好是实际的动手实验下，仅凭网络上的文章根本无法清楚问题的本质，甚至有些文章上的例子都是有问题的。</p><p>所以学习的最好方式就是实践，真的动手尝试才能发现问题的本质。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>概念来自网络，有问题望指正。</p><h3 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h3><p>一个正常的select…语句就是快照读。<br>快照读，使得在RR（repeatable read）级别下一个普通select…语句也能做到可重复读。即利用一致性视图来做到（当前事务只能读到该事物开启以前已经提交的数据）。</p><h3 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h3><p>insert语句、update语句、delete语句、显示加锁的select语句（select… LOCK IN SHARE MODE、select… FOR UPDATE）是当前读。</p><h3 id="mvcc原理"><a href="#mvcc原理" class="headerlink" title="mvcc原理"></a>mvcc原理</h3><p>多版本并发控制（MVCC） 是实现一直性视图（consistent read view）的关键 其中主要原理如下：</p><h4 id="read-view-创建时机"><a href="#read-view-创建时机" class="headerlink" title="read view 创建时机"></a>read view 创建时机</h4><p>可重复读隔离级别：这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</p><p>读提交隔离级别：这个视图是在每个 SQL 语句开始执行的时候创建的。</p><blockquote><p>需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行<br>化”隔离级别下直接用加锁的方式来避免并行访问。</p></blockquote><h4 id="read-view-的主要内容"><a href="#read-view-的主要内容" class="headerlink" title="read view 的主要内容"></a>read view 的主要内容</h4><p>ReadView所解决的问题是使用READ COMMITTED和REPEATABLE READ隔离级别的事务中，不能读到未提交的记录。通过判断一下版本链中的哪个版本是当前事务可见的。</p><p>ReadView中主要包含4个比较重要的内容：</p><ol><li>m_ids：表示在生成ReadView时当前系统中活跃的读写事务的事务id列表。</li><li>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事务中最小的事务id，也就是m_ids中的最小值。</li><li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。</li><li>creator_trx_id：表示生成该ReadView的事务的事务id。</li></ol><p>InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。</p><blockquote><p>“活跃”指的就是，启动了但还没提交。</p></blockquote><p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1记为高水位。这个视图数组和高水位，就组成了当前事务的一致性视图(图-1)</p><p><img src="/img/mysql/read_view.png" alt="图-1"></p><h4 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h4><p>按照下边的步骤判断记录的某个版本是否可见：</p><p>如果被访问版本的trx_id属性值与ReadView中的creator_trx_id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。<br>如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。<br>如果被访问版本的trx_id属性值大于ReadView中的max_trx_id值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。<br>如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，那就需要判断一下trx_id属性值是不是在m_ids列表中，如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</p><h3 id="next-key-lock"><a href="#next-key-lock" class="headerlink" title="next-key lock"></a>next-key lock</h3><p>行锁和间隙锁合称next-key lock。Next-Key Lock 只发生在 RR（REPEATABLE-READ） 隔离级别下。</p><p>简单来讲是就是说枷锁的时候不单单加在满足条件的行上，同时也要加在不存在数据且满足条件的间隙上。由于不同版本的mysql对枷锁的规则上会有不同，这里不做展开。</p><h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><p><a href="https://time.geekbang.org/column/intro/100020801?tab=catalog">MySQL实战45讲</a><br><a href="https://juejin.cn/post/6844903908146413576">一篇文章带你掌握mysql的一致性视图（MVCC）</a><br><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html">MySQL官方文档</a><br><a href="https://www.jianshu.com/p/42e60848b3a6">什么是间隙锁？到底锁了什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>MVCC</tag>
      
      <tag>lock</tag>
      
      <tag>RR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang运行时核心调度函数(schedule，findrunnable，sysmon)源码分析</title>
    <link href="/2021/10/06/golang%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%B8%E5%BF%83%E8%B0%83%E5%BA%A6%E5%87%BD%E6%95%B0-schedule%EF%BC%8Cfindrunnable%EF%BC%8Csysmon-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/10/06/golang%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%B8%E5%BF%83%E8%B0%83%E5%BA%A6%E5%87%BD%E6%95%B0-schedule%EF%BC%8Cfindrunnable%EF%BC%8Csysmon-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>分析核心调度函数 shcedule findrunnable sysmon</p><h2 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h2><p>dlv调试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">(dlv) b runtime.schedule<br>Breakpoint 1 set at 0x435cf3 for runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609<br>(dlv) c<br><span class="hljs-meta">&gt;</span><span class="bash"> runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609 (hits total:1) (PC: 0x435cf3)</span><br>Warning: debugging optimized function<br>  2604:         &#125;<br>  2605: &#125;<br>  2606:<br>  2607: // One round of scheduler: find a runnable goroutine and execute it.<br>  2608: // Never returns.<br>=&gt;2609: func schedule() &#123;<br>  2610:         _g_ := getg()<br>  2611:<br>  2612:         if _g_.m.locks != 0 &#123;<br>  2613:                 throw(&quot;schedule: holding locks&quot;)<br>  2614:         &#125;<br></code></pre></div></td></tr></table></figure><p>全部的源码内容如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">schedule</span><span class="hljs-params">()</span></span> &#123;<br>_g_ := getg()<br><br><span class="hljs-keyword">if</span> _g_.m.locks != <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;schedule: holding locks&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> _g_.m.lockedg != <span class="hljs-number">0</span> &#123;<br>stoplockedm()<br>execute(_g_.m.lockedg.ptr(), <span class="hljs-literal">false</span>) <span class="hljs-comment">// Never returns.</span><br>&#125;<br><br><span class="hljs-comment">// We should not schedule away from a g that is executing a cgo call,</span><br><span class="hljs-comment">// since the cgo call is using the m&#x27;s g0 stack.</span><br><span class="hljs-keyword">if</span> _g_.m.incgo &#123;<br>throw(<span class="hljs-string">&quot;schedule: in cgo&quot;</span>)<br>&#125;<br><br>top:<br>pp := _g_.m.p.ptr()<br>pp.preempt = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">if</span> sched.gcwaiting != <span class="hljs-number">0</span> &#123;<br>gcstopm()<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><span class="hljs-keyword">if</span> pp.runSafePointFn != <span class="hljs-number">0</span> &#123;<br>runSafePointFn()<br>&#125;<br><br><span class="hljs-comment">// Sanity check: if we are spinning, the run queue should be empty.</span><br><span class="hljs-comment">// Check this before calling checkTimers, as that might call</span><br><span class="hljs-comment">// goready to put a ready goroutine on the local run queue.</span><br><span class="hljs-keyword">if</span> _g_.m.spinning &amp;&amp; (pp.runnext != <span class="hljs-number">0</span> || pp.runqhead != pp.runqtail) &#123;<br>throw(<span class="hljs-string">&quot;schedule: spinning with local work&quot;</span>)<br>&#125;<br><br>checkTimers(pp, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">var</span> gp *g<br><span class="hljs-keyword">var</span> inheritTime <span class="hljs-keyword">bool</span><br><br><span class="hljs-comment">// Normal goroutines will check for need to wakeP in ready,</span><br><span class="hljs-comment">// but GCworkers and tracereaders will not, so the check must</span><br><span class="hljs-comment">// be done here instead.</span><br>tryWakeP := <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> trace.enabled || trace.shutdown &#123;<br>gp = traceReader()<br><span class="hljs-keyword">if</span> gp != <span class="hljs-literal">nil</span> &#123;<br>casgstatus(gp, _Gwaiting, _Grunnable)<br>traceGoUnpark(gp, <span class="hljs-number">0</span>)<br>tryWakeP = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> gp == <span class="hljs-literal">nil</span> &amp;&amp; gcBlackenEnabled != <span class="hljs-number">0</span> &#123;<br>gp = gcController.findRunnableGCWorker(_g_.m.p.ptr())<br>tryWakeP = tryWakeP || gp != <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> gp == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// Check the global runnable queue once in a while to ensure fairness.</span><br><span class="hljs-comment">// Otherwise two goroutines can completely occupy the local runqueue</span><br><span class="hljs-comment">// by constantly respawning each other.</span><br><span class="hljs-keyword">if</span> _g_.m.p.ptr().schedtick%<span class="hljs-number">61</span> == <span class="hljs-number">0</span> &amp;&amp; sched.runqsize &gt; <span class="hljs-number">0</span> &#123;<br>lock(&amp;sched.lock)<br>gp = globrunqget(_g_.m.p.ptr(), <span class="hljs-number">1</span>)<br>unlock(&amp;sched.lock)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> gp == <span class="hljs-literal">nil</span> &#123;<br>gp, inheritTime = runqget(_g_.m.p.ptr())<br><span class="hljs-comment">// We can see gp != nil here even if the M is spinning,</span><br><span class="hljs-comment">// if checkTimers added a local goroutine via goready.</span><br>&#125;<br><span class="hljs-keyword">if</span> gp == <span class="hljs-literal">nil</span> &#123;<br>gp, inheritTime = findrunnable() <span class="hljs-comment">// blocks until work is available</span><br>&#125;<br><br><span class="hljs-comment">// This thread is going to run a goroutine and is not spinning anymore,</span><br><span class="hljs-comment">// so if it was marked as spinning we need to reset it now and potentially</span><br><span class="hljs-comment">// start a new spinning M.</span><br><span class="hljs-keyword">if</span> _g_.m.spinning &#123;<br>resetspinning()<br>&#125;<br><br><span class="hljs-keyword">if</span> sched.disable.user &amp;&amp; !schedEnabled(gp) &#123;<br><span class="hljs-comment">// Scheduling of this goroutine is disabled. Put it on</span><br><span class="hljs-comment">// the list of pending runnable goroutines for when we</span><br><span class="hljs-comment">// re-enable user scheduling and look again.</span><br>lock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> schedEnabled(gp) &#123;<br><span class="hljs-comment">// Something re-enabled scheduling while we</span><br><span class="hljs-comment">// were acquiring the lock.</span><br>unlock(&amp;sched.lock)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>sched.disable.runnable.pushBack(gp)<br>sched.disable.n++<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">goto</span> top<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// If about to schedule a not-normal goroutine (a GCworker or tracereader),</span><br><span class="hljs-comment">// wake a P if there is one.</span><br><span class="hljs-keyword">if</span> tryWakeP &#123;<br>wakep()<br>&#125;<br><span class="hljs-keyword">if</span> gp.lockedm != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Hands off own p to the locked m,</span><br><span class="hljs-comment">// then blocks waiting for a new p.</span><br>startlockedm(gp)<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><br>execute(gp, inheritTime)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>忽略GC和trace后分析源码发现shedule函数本质就是尽力找到可运行的g，然后去运行g上面的任务函数。查找g的流程如下：</p><ol><li>如果当前GC需要停止整个世界（STW), 则调用gcstopm休眠当前的M</li><li>每隔61次调度轮回从全局队列找，避免全局队列中的g被饿死。</li><li>从p.runnext获取g，从p的本地队列中获取。</li><li>调用 <code>findrunnable</code> 找g，找不到的话就将m休眠，等待唤醒。</li></ol><p>当找到一个g后，就会调用 <code>execute</code> 去执行g。</p><h2 id="findrunnable"><a href="#findrunnable" class="headerlink" title="findrunnable"></a>findrunnable</h2><p>dlv调试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.findrunnable<br>Breakpoint 1 set at 0x4348d8 for runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189<br>(dlv) c<br><span class="hljs-meta">&gt;</span><span class="bash"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (hits total:1) (PC: 0x4348d8)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br>(dlv) si<br><span class="hljs-meta">&gt;</span><span class="bash"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (PC: 0x4348df)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br></code></pre></div></td></tr></table></figure><p>全部源代码如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findrunnable</span><span class="hljs-params">()</span> <span class="hljs-params">(gp *g, inheritTime <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>_g_ := getg()<br><br><span class="hljs-comment">// The conditions here and in handoffp must agree: if</span><br><span class="hljs-comment">// findrunnable would return a G to run, handoffp must start</span><br><span class="hljs-comment">// an M.</span><br><br>top:<br>_p_ := _g_.m.p.ptr()<br><span class="hljs-keyword">if</span> sched.gcwaiting != <span class="hljs-number">0</span> &#123;<br>gcstopm()<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><span class="hljs-keyword">if</span> _p_.runSafePointFn != <span class="hljs-number">0</span> &#123;<br>runSafePointFn()<br>&#125;<br><br>now, pollUntil, _ := checkTimers(_p_, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span> fingwait &amp;&amp; fingwake &#123;<br><span class="hljs-keyword">if</span> gp := wakefing(); gp != <span class="hljs-literal">nil</span> &#123;<br>ready(gp, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> *cgo_yield != <span class="hljs-literal">nil</span> &#123;<br>asmcgocall(*cgo_yield, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">// local runq</span><br><span class="hljs-keyword">if</span> gp, inheritTime := runqget(_p_); gp != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> gp, inheritTime<br>&#125;<br><br><span class="hljs-comment">// global runq</span><br><span class="hljs-keyword">if</span> sched.runqsize != <span class="hljs-number">0</span> &#123;<br>lock(&amp;sched.lock)<br>gp := globrunqget(_p_, <span class="hljs-number">0</span>)<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> gp != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Poll network.</span><br><span class="hljs-comment">// This netpoll is only an optimization before we resort to stealing.</span><br><span class="hljs-comment">// We can safely skip it if there are no waiters or a thread is blocked</span><br><span class="hljs-comment">// in netpoll already. If there is any kind of logical race with that</span><br><span class="hljs-comment">// blocked thread (e.g. it has already returned from netpoll, but does</span><br><span class="hljs-comment">// not set lastpoll yet), this thread will do blocking netpoll below</span><br><span class="hljs-comment">// anyway.</span><br><span class="hljs-keyword">if</span> netpollinited() &amp;&amp; atomic.Load(&amp;netpollWaiters) &gt; <span class="hljs-number">0</span> &amp;&amp; atomic.Load64(&amp;sched.lastpoll) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> list := netpoll(<span class="hljs-number">0</span>); !list.empty() &#123; <span class="hljs-comment">// non-blocking</span><br>gp := list.pop()<br>injectglist(&amp;list)<br>casgstatus(gp, _Gwaiting, _Grunnable)<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGoUnpark(gp, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Steal work from other P&#x27;s.</span><br>procs := <span class="hljs-keyword">uint32</span>(gomaxprocs)<br>ranTimer := <span class="hljs-literal">false</span><br><span class="hljs-comment">// If number of spinning M&#x27;s &gt;= number of busy P&#x27;s, block.</span><br><span class="hljs-comment">// This is necessary to prevent excessive CPU consumption</span><br><span class="hljs-comment">// when GOMAXPROCS&gt;&gt;1 but the program parallelism is low.</span><br><span class="hljs-keyword">if</span> !_g_.m.spinning &amp;&amp; <span class="hljs-number">2</span>*atomic.Load(&amp;sched.nmspinning) &gt;= procs-atomic.Load(&amp;sched.npidle) &#123;<br><span class="hljs-keyword">goto</span> stop<br>&#125;<br><span class="hljs-keyword">if</span> !_g_.m.spinning &#123;<br>_g_.m.spinning = <span class="hljs-literal">true</span><br>atomic.Xadd(&amp;sched.nmspinning, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br><span class="hljs-keyword">for</span> enum := stealOrder.start(fastrand()); !enum.done(); enum.next() &#123;<br><span class="hljs-keyword">if</span> sched.gcwaiting != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">goto</span> top<br>&#125;<br>stealRunNextG := i &gt; <span class="hljs-number">2</span> <span class="hljs-comment">// first look for ready queues with more than 1 g</span><br>p2 := allp[enum.position()]<br><span class="hljs-keyword">if</span> _p_ == p2 &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> gp := runqsteal(_p_, p2, stealRunNextG); gp != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// Consider stealing timers from p2.</span><br><span class="hljs-comment">// This call to checkTimers is the only place where</span><br><span class="hljs-comment">// we hold a lock on a different P&#x27;s timers.</span><br><span class="hljs-comment">// Lock contention can be a problem here, so</span><br><span class="hljs-comment">// initially avoid grabbing the lock if p2 is running</span><br><span class="hljs-comment">// and is not marked for preemption. If p2 is running</span><br><span class="hljs-comment">// and not being preempted we assume it will handle its</span><br><span class="hljs-comment">// own timers.</span><br><span class="hljs-comment">// If we&#x27;re still looking for work after checking all</span><br><span class="hljs-comment">// the P&#x27;s, then go ahead and steal from an active P.</span><br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">2</span> || (i &gt; <span class="hljs-number">1</span> &amp;&amp; shouldStealTimers(p2)) &#123;<br>tnow, w, ran := checkTimers(p2, now)<br>now = tnow<br><span class="hljs-keyword">if</span> w != <span class="hljs-number">0</span> &amp;&amp; (pollUntil == <span class="hljs-number">0</span> || w &lt; pollUntil) &#123;<br>pollUntil = w<br>&#125;<br><span class="hljs-keyword">if</span> ran &#123;<br><span class="hljs-comment">// Running the timers may have</span><br><span class="hljs-comment">// made an arbitrary number of G&#x27;s</span><br><span class="hljs-comment">// ready and added them to this P&#x27;s</span><br><span class="hljs-comment">// local run queue. That invalidates</span><br><span class="hljs-comment">// the assumption of runqsteal</span><br><span class="hljs-comment">// that is always has room to add</span><br><span class="hljs-comment">// stolen G&#x27;s. So check now if there</span><br><span class="hljs-comment">// is a local G to run.</span><br><span class="hljs-keyword">if</span> gp, inheritTime := runqget(_p_); gp != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> gp, inheritTime<br>&#125;<br>ranTimer = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> ranTimer &#123;<br><span class="hljs-comment">// Running a timer may have made some goroutine ready.</span><br><span class="hljs-keyword">goto</span> top<br>&#125;<br><br>stop:<br><br><span class="hljs-comment">// We have nothing to do. If we&#x27;re in the GC mark phase, can</span><br><span class="hljs-comment">// safely scan and blacken objects, and have work to do, run</span><br><span class="hljs-comment">// idle-time marking rather than give up the P.</span><br><span class="hljs-keyword">if</span> gcBlackenEnabled != <span class="hljs-number">0</span> &amp;&amp; _p_.gcBgMarkWorker != <span class="hljs-number">0</span> &amp;&amp; gcMarkWorkAvailable(_p_) &#123;<br>_p_.gcMarkWorkerMode = gcMarkWorkerIdleMode<br>gp := _p_.gcBgMarkWorker.ptr()<br>casgstatus(gp, _Gwaiting, _Grunnable)<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGoUnpark(gp, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br><br>delta := <span class="hljs-keyword">int64</span>(<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">if</span> pollUntil != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// checkTimers ensures that polluntil &gt; now.</span><br>delta = pollUntil - now<br>&#125;<br><br><span class="hljs-comment">// wasm only:</span><br><span class="hljs-comment">// If a callback returned and no other goroutine is awake,</span><br><span class="hljs-comment">// then wake event handler goroutine which pauses execution</span><br><span class="hljs-comment">// until a callback was triggered.</span><br>gp, otherReady := beforeIdle(delta)<br><span class="hljs-keyword">if</span> gp != <span class="hljs-literal">nil</span> &#123;<br>casgstatus(gp, _Gwaiting, _Grunnable)<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGoUnpark(gp, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> otherReady &#123;<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><br><span class="hljs-comment">// Before we drop our P, make a snapshot of the allp slice,</span><br><span class="hljs-comment">// which can change underfoot once we no longer block</span><br><span class="hljs-comment">// safe-points. We don&#x27;t need to snapshot the contents because</span><br><span class="hljs-comment">// everything up to cap(allp) is immutable.</span><br>allpSnapshot := allp<br><br><span class="hljs-comment">// return P and block</span><br>lock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> sched.gcwaiting != <span class="hljs-number">0</span> || _p_.runSafePointFn != <span class="hljs-number">0</span> &#123;<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><span class="hljs-keyword">if</span> sched.runqsize != <span class="hljs-number">0</span> &#123;<br>gp := globrunqget(_p_, <span class="hljs-number">0</span>)<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> releasep() != _p_ &#123;<br>throw(<span class="hljs-string">&quot;findrunnable: wrong p&quot;</span>)<br>&#125;<br>pidleput(_p_)<br>unlock(&amp;sched.lock)<br><br><span class="hljs-comment">// Delicate dance: thread transitions from spinning to non-spinning state,</span><br><span class="hljs-comment">// potentially concurrently with submission of new goroutines. We must</span><br><span class="hljs-comment">// drop nmspinning first and then check all per-P queues again (with</span><br><span class="hljs-comment">// #StoreLoad memory barrier in between). If we do it the other way around,</span><br><span class="hljs-comment">// another thread can submit a goroutine after we&#x27;ve checked all run queues</span><br><span class="hljs-comment">// but before we drop nmspinning; as the result nobody will unpark a thread</span><br><span class="hljs-comment">// to run the goroutine.</span><br><span class="hljs-comment">// If we discover new work below, we need to restore m.spinning as a signal</span><br><span class="hljs-comment">// for resetspinning to unpark a new worker thread (because there can be more</span><br><span class="hljs-comment">// than one starving goroutine). However, if after discovering new work</span><br><span class="hljs-comment">// we also observe no idle Ps, it is OK to just park the current thread:</span><br><span class="hljs-comment">// the system is fully loaded so no spinning threads are required.</span><br><span class="hljs-comment">// Also see &quot;Worker thread parking/unparking&quot; comment at the top of the file.</span><br>wasSpinning := _g_.m.spinning<br><span class="hljs-keyword">if</span> _g_.m.spinning &#123;<br>_g_.m.spinning = <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">int32</span>(atomic.Xadd(&amp;sched.nmspinning, <span class="hljs-number">-1</span>)) &lt; <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;findrunnable: negative nmspinning&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// check all runqueues once again</span><br><span class="hljs-keyword">for</span> _, _p_ := <span class="hljs-keyword">range</span> allpSnapshot &#123;<br><span class="hljs-keyword">if</span> !runqempty(_p_) &#123;<br>lock(&amp;sched.lock)<br>_p_ = pidleget()<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> _p_ != <span class="hljs-literal">nil</span> &#123;<br>acquirep(_p_)<br><span class="hljs-keyword">if</span> wasSpinning &#123;<br>_g_.m.spinning = <span class="hljs-literal">true</span><br>atomic.Xadd(&amp;sched.nmspinning, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">goto</span> top<br>&#125;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Check for idle-priority GC work again.</span><br><span class="hljs-keyword">if</span> gcBlackenEnabled != <span class="hljs-number">0</span> &amp;&amp; gcMarkWorkAvailable(<span class="hljs-literal">nil</span>) &#123;<br>lock(&amp;sched.lock)<br>_p_ = pidleget()<br><span class="hljs-keyword">if</span> _p_ != <span class="hljs-literal">nil</span> &amp;&amp; _p_.gcBgMarkWorker == <span class="hljs-number">0</span> &#123;<br>pidleput(_p_)<br>_p_ = <span class="hljs-literal">nil</span><br>&#125;<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> _p_ != <span class="hljs-literal">nil</span> &#123;<br>acquirep(_p_)<br><span class="hljs-keyword">if</span> wasSpinning &#123;<br>_g_.m.spinning = <span class="hljs-literal">true</span><br>atomic.Xadd(&amp;sched.nmspinning, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-comment">// Go back to idle GC check.</span><br><span class="hljs-keyword">goto</span> stop<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// poll network</span><br><span class="hljs-keyword">if</span> netpollinited() &amp;&amp; (atomic.Load(&amp;netpollWaiters) &gt; <span class="hljs-number">0</span> || pollUntil != <span class="hljs-number">0</span>) &amp;&amp; atomic.Xchg64(&amp;sched.lastpoll, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span> &#123;<br>atomic.Store64(&amp;sched.pollUntil, <span class="hljs-keyword">uint64</span>(pollUntil))<br><span class="hljs-keyword">if</span> _g_.m.p != <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;findrunnable: netpoll with p&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> _g_.m.spinning &#123;<br>throw(<span class="hljs-string">&quot;findrunnable: netpoll with spinning&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> faketime != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// When using fake time, just poll.</span><br>delta = <span class="hljs-number">0</span><br>&#125;<br>list := netpoll(delta) <span class="hljs-comment">// block until new work is available</span><br>atomic.Store64(&amp;sched.pollUntil, <span class="hljs-number">0</span>)<br>atomic.Store64(&amp;sched.lastpoll, <span class="hljs-keyword">uint64</span>(nanotime()))<br><span class="hljs-keyword">if</span> faketime != <span class="hljs-number">0</span> &amp;&amp; list.empty() &#123;<br><span class="hljs-comment">// Using fake time and nothing is ready; stop M.</span><br><span class="hljs-comment">// When all M&#x27;s stop, checkdead will call timejump.</span><br>stopm()<br><span class="hljs-keyword">goto</span> top<br>&#125;<br>lock(&amp;sched.lock)<br>_p_ = pidleget()<br>unlock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> _p_ == <span class="hljs-literal">nil</span> &#123;<br>injectglist(&amp;list)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>acquirep(_p_)<br><span class="hljs-keyword">if</span> !list.empty() &#123;<br>gp := list.pop()<br>injectglist(&amp;list)<br>casgstatus(gp, _Gwaiting, _Grunnable)<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGoUnpark(gp, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> wasSpinning &#123;<br>_g_.m.spinning = <span class="hljs-literal">true</span><br>atomic.Xadd(&amp;sched.nmspinning, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">goto</span> top<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> pollUntil != <span class="hljs-number">0</span> &amp;&amp; netpollinited() &#123;<br>pollerPollUntil := <span class="hljs-keyword">int64</span>(atomic.Load64(&amp;sched.pollUntil))<br><span class="hljs-keyword">if</span> pollerPollUntil == <span class="hljs-number">0</span> || pollerPollUntil &gt; pollUntil &#123;<br>netpollBreak()<br>&#125;<br>&#125;<br>stopm()<br><span class="hljs-keyword">goto</span> top<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分析上述源码得知查找可用的g的过程如下：</p><ol><li>调用 runqget ，尝试从P本地队列中获取g，获取到返回</li><li>调用 globrunqget ，尝试从全局队列中获取g，获取到返回</li><li>从网络IO轮询器中找到就绪的g，把这个g变为可运行的g</li><li>如果不是所有的P都是空闲的，最多四次，随机选一个P，尝试从这P中偷取一些g，获取到返回</li><li>上面都找不到g来运行，判断此时P是否处于 <code>GC mark</code> 阶段，如果是，那么此时可以安全的扫描和黑化对象和返回 <code>gcBgMarkWorker</code> 来运行， <code>gcBgMarkWorker</code> 是GC后代标记的goroutine。</li><li>再次从全局队列中获取g，获取到返回</li><li>再次检查所有的P，有没有可以运行的g</li><li>再次检查网络IO轮询器</li><li>实在找不到可运行的g了，那就调用 <code>stopm</code> 休眠吧</li></ol><h2 id="sysmon"><a href="#sysmon" class="headerlink" title="sysmon"></a>sysmon</h2><p>dlv调试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.sysmon<br>Breakpoint 1 set at 0x43a773 for runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642<br>(dlv) c<br><span class="hljs-meta">&gt;</span><span class="bash"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (hits total:1) (PC: 0x43a773)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br>(dlv) si<br><span class="hljs-meta">&gt;</span><span class="bash"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (PC: 0x43a777)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br></code></pre></div></td></tr></table></figure><p>全部源码：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sysmon</span><span class="hljs-params">()</span></span> &#123;<br>lock(&amp;sched.lock)<br>sched.nmsys++<br>checkdead()<br>unlock(&amp;sched.lock)<br><br>lasttrace := <span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>)<br>idle := <span class="hljs-number">0</span> <span class="hljs-comment">// how many cycles in succession we had not wokeup somebody</span><br>delay := <span class="hljs-keyword">uint32</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> idle == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// start with 20us sleep...</span><br>delay = <span class="hljs-number">20</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> idle &gt; <span class="hljs-number">50</span> &#123; <span class="hljs-comment">// start doubling the sleep after 1ms...</span><br>delay *= <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">if</span> delay &gt; <span class="hljs-number">10</span>*<span class="hljs-number">1000</span> &#123; <span class="hljs-comment">// up to 10ms</span><br>delay = <span class="hljs-number">10</span> * <span class="hljs-number">1000</span><br>&#125;<br>usleep(delay)<br>now := nanotime()<br>next, _ := timeSleepUntil()<br><span class="hljs-keyword">if</span> debug.schedtrace &lt;= <span class="hljs-number">0</span> &amp;&amp; (sched.gcwaiting != <span class="hljs-number">0</span> || atomic.Load(&amp;sched.npidle) == <span class="hljs-keyword">uint32</span>(gomaxprocs)) &#123;<br>lock(&amp;sched.lock)<br><span class="hljs-keyword">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class="hljs-number">0</span> || atomic.Load(&amp;sched.npidle) == <span class="hljs-keyword">uint32</span>(gomaxprocs) &#123;<br><span class="hljs-keyword">if</span> next &gt; now &#123;<br>atomic.Store(&amp;sched.sysmonwait, <span class="hljs-number">1</span>)<br>unlock(&amp;sched.lock)<br><span class="hljs-comment">// Make wake-up period small enough</span><br><span class="hljs-comment">// for the sampling to be correct.</span><br>sleep := forcegcperiod / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> next-now &lt; sleep &#123;<br>sleep = next - now<br>&#125;<br>shouldRelax := sleep &gt;= osRelaxMinNS<br><span class="hljs-keyword">if</span> shouldRelax &#123;<br>osRelax(<span class="hljs-literal">true</span>)<br>&#125;<br>notetsleep(&amp;sched.sysmonnote, sleep)<br><span class="hljs-keyword">if</span> shouldRelax &#123;<br>osRelax(<span class="hljs-literal">false</span>)<br>&#125;<br>now = nanotime()<br>next, _ = timeSleepUntil()<br>lock(&amp;sched.lock)<br>atomic.Store(&amp;sched.sysmonwait, <span class="hljs-number">0</span>)<br>noteclear(&amp;sched.sysmonnote)<br>&#125;<br>idle = <span class="hljs-number">0</span><br>delay = <span class="hljs-number">20</span><br>&#125;<br>unlock(&amp;sched.lock)<br>&#125;<br>lock(&amp;sched.sysmonlock)<br>&#123;<br><span class="hljs-comment">// If we spent a long time blocked on sysmonlock</span><br><span class="hljs-comment">// then we want to update now and next since it&#x27;s</span><br><span class="hljs-comment">// likely stale.</span><br>now1 := nanotime()<br><span class="hljs-keyword">if</span> now1-now &gt; <span class="hljs-number">50</span>*<span class="hljs-number">1000</span> <span class="hljs-comment">/* 50µs */</span> &#123;<br>next, _ = timeSleepUntil()<br>&#125;<br>now = now1<br>&#125;<br><br><span class="hljs-comment">// trigger libc interceptors if needed</span><br><span class="hljs-keyword">if</span> *cgo_yield != <span class="hljs-literal">nil</span> &#123;<br>asmcgocall(*cgo_yield, <span class="hljs-literal">nil</span>)<br>&#125;<br><span class="hljs-comment">// poll network if not polled for more than 10ms</span><br>lastpoll := <span class="hljs-keyword">int64</span>(atomic.Load64(&amp;sched.lastpoll))<br><span class="hljs-keyword">if</span> netpollinited() &amp;&amp; lastpoll != <span class="hljs-number">0</span> &amp;&amp; lastpoll+<span class="hljs-number">10</span>*<span class="hljs-number">1000</span>*<span class="hljs-number">1000</span> &lt; now &#123;<br>atomic.Cas64(&amp;sched.lastpoll, <span class="hljs-keyword">uint64</span>(lastpoll), <span class="hljs-keyword">uint64</span>(now))<br>list := netpoll(<span class="hljs-number">0</span>) <span class="hljs-comment">// non-blocking - returns list of goroutines</span><br><span class="hljs-keyword">if</span> !list.empty() &#123;<br><span class="hljs-comment">// Need to decrement number of idle locked M&#x27;s</span><br><span class="hljs-comment">// (pretending that one more is running) before injectglist.</span><br><span class="hljs-comment">// Otherwise it can lead to the following situation:</span><br><span class="hljs-comment">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span><br><span class="hljs-comment">// another M returns from syscall, finishes running its G,</span><br><span class="hljs-comment">// observes that there is no work to do and no other running M&#x27;s</span><br><span class="hljs-comment">// and reports deadlock.</span><br>incidlelocked(<span class="hljs-number">-1</span>)<br>injectglist(&amp;list)<br>incidlelocked(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> next &lt; now &#123;<br><span class="hljs-comment">// There are timers that should have already run,</span><br><span class="hljs-comment">// perhaps because there is an unpreemptible P.</span><br><span class="hljs-comment">// Try to start an M to run them.</span><br>startm(<span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>)<br>&#125;<br><span class="hljs-keyword">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Kick the scavenger awake if someone requested it.</span><br>wakeScavenger()<br>&#125;<br><span class="hljs-comment">// retake P&#x27;s blocked in syscalls</span><br><span class="hljs-comment">// and preempt long running G&#x27;s</span><br><span class="hljs-keyword">if</span> retake(now) != <span class="hljs-number">0</span> &#123;<br>idle = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>idle++<br>&#125;<br><span class="hljs-comment">// check if we need to force a GC</span><br><span class="hljs-keyword">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class="hljs-number">0</span> &#123;<br>lock(&amp;forcegc.lock)<br>forcegc.idle = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> list gList<br>list.push(forcegc.g)<br>injectglist(&amp;list)<br>unlock(&amp;forcegc.lock)<br>&#125;<br><span class="hljs-keyword">if</span> debug.schedtrace &gt; <span class="hljs-number">0</span> &amp;&amp; lasttrace+<span class="hljs-keyword">int64</span>(debug.schedtrace)*<span class="hljs-number">1000000</span> &lt;= now &#123;<br>lasttrace = now<br>schedtrace(debug.scheddetail &gt; <span class="hljs-number">0</span>)<br>&#125;<br>unlock(&amp;sched.sysmonlock)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>sysmon</code> 周期性地检查并retake p， 如果发现p处于这个状态且超过10ms就会强制性收回p，m从cgo和syscall返回后会重新尝试拿p，进入调度循环。</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>runtime</tag>
      
      <tag>schedule</tag>
      
      <tag>sysmon</tag>
      
      <tag>findrunnable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang运行时队列操作函数源码分析</title>
    <link href="/2021/10/06/golang%E8%BF%90%E8%A1%8C%E6%97%B6%E9%98%9F%E5%88%97%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/10/06/golang%E8%BF%90%E8%A1%8C%E6%97%B6%E9%98%9F%E5%88%97%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境：</p><p>CentOS Linux release 8.4.2105</p><p>go1.15.14</p><p>dlv1.5.0</p><p>被调试的源码内容：</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>快速搭建调试环境:</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">RUN</span><span class="bash"> yum install golang -y \</span><br><span class="bash">&amp;&amp; yum install dlv -y \</span><br><span class="bash">&amp;&amp; yum install binutils -y \</span><br><span class="bash">&amp;&amp; yum install vim -y \</span><br><span class="bash">&amp;&amp; yum install gdb -y</span><br></code></pre></div></td></tr></table></figure><h1 id="golang运行时概述"><a href="#golang运行时概述" class="headerlink" title="golang运行时概述"></a>golang运行时概述</h1><p>Go的调度流程本质上是生产-消费流程</p><ol><li>生产端生成goruntine放入队列</li><li>消费端通过与M绑定的P获取goroutine</li><li>M循环调度执行 runtime.schedule-&gt;runtime.execute-&gt;runtime.gogo-&gt;runtime.goexit</li></ol><p>为了缓解一级队列中生产消费模型的压力，Go采用三级队列：</p><ol><li>P中的runnext队列, 该队列只保存一个goroutine</li><li>local run queue 该队列最大保存256个goroutine</li><li>global run queue 该队列以链表的形式保存goroutine</li></ol><p>操作运行时goroutine队列的函数主要有：</p><ol><li>runqput</li><li>runqget</li><li>globrunqput</li><li>globrunqget</li></ol><blockquote><p>为了方便描述一下内容所有的g代指goroutine</p></blockquote><h2 id="runqput"><a href="#runqput" class="headerlink" title="runqput"></a>runqput</h2><p>使用dlv调试</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">[root@583d9a8ec1db p1]<span class="hljs-comment"># dlv exec ./main</span><br>Type <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">for</span> list of commands.<br>(dlv) b runtime.runqput<br>Breakpoint 1 <span class="hljs-built_in">set</span> at 0x43c073 <span class="hljs-keyword">for</span> runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153<br>(dlv) c<br>&gt; runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153 (hits total:1) (PC: 0x43c073)<br>Warning: debugging optimized <span class="hljs-keyword">function</span><br>  5148: // runqput tries to put g on the <span class="hljs-built_in">local</span> runnable queue.<br>  5149: // If next is <span class="hljs-literal">false</span>, runqput adds g to the tail of the runnable queue.<br>  5150: // If next is <span class="hljs-literal">true</span>, runqput puts g <span class="hljs-keyword">in</span> the _p_.runnext slot.<br>  5151: // If the run queue is full, runnext puts g on the global queue.<br>  5152: // Executed only by the owner P.<br>=&gt;5153: func runqput(_p_ *p, gp *g, next bool) &#123;<br>  5154:         <span class="hljs-keyword">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%2 == 0 &#123;<br>  5155:                 next = <span class="hljs-literal">false</span><br>  5156:         &#125;<br>  5157:<br>  5158:         <span class="hljs-keyword">if</span> next &#123;<br></code></pre></div></td></tr></table></figure><p>runqput 全部源码内容：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runqput</span><span class="hljs-params">(_p_ *p, gp *g, next <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>        next = <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> next &#123;<br>    retryNext:<br>        oldnext := _p_.runnext<br>        <span class="hljs-keyword">if</span> !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) &#123;<br>            <span class="hljs-keyword">goto</span> retryNext<br>        &#125;<br>        <span class="hljs-keyword">if</span> oldnext == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// Kick the old runnext out to the regular run queue.</span><br>        gp = oldnext.ptr()<br>    &#125;<br><br>retry:<br>    h := atomic.LoadAcq(&amp;_p_.runqhead) <span class="hljs-comment">// load-acquire, synchronize with consumers</span><br>    t := _p_.runqtail<br>    <span class="hljs-keyword">if</span> t-h &lt; <span class="hljs-keyword">uint32</span>(<span class="hljs-built_in">len</span>(_p_.runq)) &#123;<br>        _p_.runq[t%<span class="hljs-keyword">uint32</span>(<span class="hljs-built_in">len</span>(_p_.runq))].set(gp)<br>        atomic.StoreRel(&amp;_p_.runqtail, t+<span class="hljs-number">1</span>) <span class="hljs-comment">// store-release, makes the item available for consumption</span><br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> runqputslow(_p_, gp, h, t) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// the queue is not full, now the put above must succeed</span><br>    <span class="hljs-keyword">goto</span> retry<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从该函数可以看出goroutine放入队列主要有一下一些逻辑</p><ol><li><p>当入参next为false时:</p><ol><li>尝试将g放入当前P的runq队列，我们称为本地队列</li><li>当本地队列已经满了的时候调用  runqputslow 函数</li><li>runqputslow函数执行批量的将本地队列的一半大小和当前的g一起移动到全局队列</li></ol></li><li><p>当入参next为true时:</p><ol><li>尝试将g放入当前P的runnext中,将原先存在的g从runnext中取出</li><li>尝试将取出的g放入当前P的runq队列，我们称为本地队列</li><li>当本地队列已经满了的时候调用  runqputslow 函数</li><li>runqputslow函数执行批量的将本地队列的一半大小和取出的g一起移动到全局队列</li></ol></li></ol><h2 id="runqget"><a href="#runqget" class="headerlink" title="runqget"></a>runqget</h2><p>dlv 调试runqget</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">(dlv) b runtime.runqget<br>Breakpoint 2 <span class="hljs-built_in">set</span> at 0x43c4a0 <span class="hljs-keyword">for</span> runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265<br>(dlv) c<br>&gt; runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265 (hits total:1) (PC: 0x43c4a0)<br>Warning: debugging optimized <span class="hljs-keyword">function</span><br>  5260:<br>  5261: // Get g from <span class="hljs-built_in">local</span> runnable queue.<br>  5262: // If inheritTime is <span class="hljs-literal">true</span>, gp should inherit the remaining time <span class="hljs-keyword">in</span> the<br>  5263: // current time slice. Otherwise, it should start a new time slice.<br>  5264: // Executed only by the owner P.<br>=&gt;5265: func runqget(_p_ *p) (gp *g, inheritTime bool) &#123;<br>  5266:         // If there<span class="hljs-string">&#x27;s a runnext, it&#x27;</span>s the next G to run.<br>  5267:         <span class="hljs-keyword">for</span> &#123;<br>  5268:                 next := _p_.runnext<br>  5269:                 <span class="hljs-keyword">if</span> next == 0 &#123;<br>  5270:                         <span class="hljs-built_in">break</span><br></code></pre></div></td></tr></table></figure><p>通过调试信息找到源代码：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runqget</span><span class="hljs-params">(_p_ *p)</span> <span class="hljs-params">(gp *g, inheritTime <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>    <span class="hljs-comment">// If there&#x27;s a runnext, it&#x27;s the next G to run.</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        next := _p_.runnext<br>        <span class="hljs-keyword">if</span> next == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> _p_.runnext.cas(next, <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> next.ptr(), <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> &#123;<br>        h := atomic.LoadAcq(&amp;_p_.runqhead) <span class="hljs-comment">// load-acquire, synchronize with other consumers</span><br>        t := _p_.runqtail<br>        <span class="hljs-keyword">if</span> t == h &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>        &#125;<br>        gp := _p_.runq[h%<span class="hljs-keyword">uint32</span>(<span class="hljs-built_in">len</span>(_p_.runq))].ptr()<br>        <span class="hljs-keyword">if</span> atomic.CasRel(&amp;_p_.runqhead, h, h+<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// cas-release, commits consume</span><br>            <span class="hljs-keyword">return</span> gp, <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>从源码中可以看出 runqget主要操作P的本地队列， 优先获取runnext之后再获取runq中的头个</p><h2 id="globalrunqput"><a href="#globalrunqput" class="headerlink" title="globalrunqput"></a>globalrunqput</h2><p>dlv 调试</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">[root@583d9a8ec1db p1]<span class="hljs-comment"># dlv exec ./main</span><br>Type <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">for</span> list of commands.<br>(dlv) b runtime.globrunqput<br>Breakpoint 1 <span class="hljs-built_in">set</span> at 0x435b46,0x43670e,0x437bb0,0x4396fc,0x453ca6,0x454814 <span class="hljs-keyword">for</span> runtime.injectglist() /usr/lib/golang/src/runtime/proc.go:5044<br>(dlv) c<br>&gt; runtime.goschedImpl() /usr/lib/golang/src/runtime/proc.go:5043 (hits total:1) (PC: 0x43670e)<br>Warning: debugging optimized <span class="hljs-keyword">function</span><br>  5038: // Put gp on the global runnable queue.<br>  5039: // Sched must be locked.<br>  5040: // May run during STW, so write barriers are not allowed.<br>  5041: //go:nowritebarrierrec<br>  5042: func globrunqput(gp *g) &#123;<br>=&gt;5043:         sched.runq.pushBack(gp)<br>  5044:         sched.runqsize++<br>  5045: &#125;<br>  5046:<br>  5047: // Put gp at the head of the global runnable queue.<br>  5048: // Sched must be locked.<br></code></pre></div></td></tr></table></figure><p>该函数逻辑比较简单 只是将g添加到全局队列的链表中</p><h2 id="globrunqget"><a href="#globrunqget" class="headerlink" title="globrunqget"></a>globrunqget</h2><p>dlv 调试</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">[root@583d9a8ec1db p1]<span class="hljs-comment"># dlv exec ./main</span><br>Type <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">for</span> list of commands.<br>(dlv) b runtime.globrunqget<br>Breakpoint 1 <span class="hljs-built_in">set</span> at 0x43be33 <span class="hljs-keyword">for</span> runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067<br>(dlv) c<br>&gt; runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067 (hits total:1) (PC: 0x43be33)<br>Warning: debugging optimized <span class="hljs-keyword">function</span><br>  5062:         *batch = gQueue&#123;&#125;<br>  5063: &#125;<br>  5064:<br>  5065: // Try get a batch of G<span class="hljs-string">&#x27;s from the global runnable queue.</span><br><span class="hljs-string">  5066: // Sched must be locked.</span><br><span class="hljs-string">=&gt;5067: func globrunqget(_p_ *p, max int32) *g &#123;</span><br><span class="hljs-string">  5068:         if sched.runqsize == 0 &#123;</span><br><span class="hljs-string">  5069:                 return nil</span><br><span class="hljs-string">  5070:         &#125;</span><br><span class="hljs-string">  5071:</span><br><span class="hljs-string">  5072:         n := sched.runqsize/gomaxprocs + 1</span><br></code></pre></div></td></tr></table></figure><p>找到对应源码为:</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">globrunqget</span><span class="hljs-params">(_p_ *p, max <span class="hljs-keyword">int32</span>)</span> *<span class="hljs-title">g</span></span> &#123;<br>    <span class="hljs-keyword">if</span> sched.runqsize == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    n := sched.runqsize/gomaxprocs + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n &gt; sched.runqsize &#123;<br>        n = sched.runqsize<br>    &#125;<br>    <span class="hljs-keyword">if</span> max &gt; <span class="hljs-number">0</span> &amp;&amp; n &gt; max &#123;<br>        n = max<br>    &#125;<br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-keyword">int32</span>(<span class="hljs-built_in">len</span>(_p_.runq))/<span class="hljs-number">2</span> &#123;<br>        n = <span class="hljs-keyword">int32</span>(<span class="hljs-built_in">len</span>(_p_.runq)) / <span class="hljs-number">2</span><br>    &#125;<br><br>    sched.runqsize -= n<br><br>    gp := sched.runq.pop()<br>    n--<br>    <span class="hljs-keyword">for</span> ; n &gt; <span class="hljs-number">0</span>; n-- &#123;<br>        gp1 := sched.runq.pop()<br>        runqput(_p_, gp1, <span class="hljs-literal">false</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> gp<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分析源码发现该函数主要逻辑：</p><ol><li>批量取出部分全局队列的g，取出数量= 全局总量/核心数+1</li><li>将 全局总量/核心数 的g加入到当前P的本地队列</li><li>返回一个g</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>获取： g的获取优先从runnext 然后本地runq 最终获取不到去全局获取<br>添加： 优先放入runnext 然后本地队列 本地队列满了批量放入全局队列</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>runtime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一致性哈希算法以及Go实现</title>
    <link href="/2021/09/03/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8AGo%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/09/03/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8AGo%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是一致性哈希"><a href="#什么是一致性哈希" class="headerlink" title="什么是一致性哈希"></a>什么是一致性哈希</h2><p>一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。</p><p>以上为维基百科中的介绍，很显然要想明白一致性哈希首先我们要先搞懂传统哈希</p><h2 id="传统哈希用例"><a href="#传统哈希用例" class="headerlink" title="传统哈希用例"></a>传统哈希用例</h2><p>首先我们以一种简单的分布式缓存架构来阐述</p><p><img src="/img/hash/redis-hash-cache.jpg" alt="图-1"></p><p>如图-1所示，我们有的时候后会使用redis对热点数据缓存进而缓解数据库的压力，理论上我们认为mysql的操作是高昂的。</p><p class="note note-success">这里多个redis本质上是多个集群</p><p>这个时候我们希望将热点数据均匀的打散到多个redis上，来降低单个redis集群为缓存造成节点访问过热的情况发生。简单的我们可以理解为将不同的数据转换唯一值后，按照redis数量取模。假设有3台redis做缓存。计算公式如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">h=<span class="hljs-built_in">hash</span>(key)%3<br></code></pre></div></td></tr></table></figure><p>我们把这3个redis对应编号，h的值就是这个数据应该落在的缓存redis的位置。这就是传统的hash使用的一种，类似的在数据库分表对数据操作的时候也可以使用这种方式。</p><p><strong>传统哈希存在什么问题？</strong></p><p>很明显存在这种问题：当我们其中一个redis断电之或者新增一个那么对应的全部缓存对应的要全部改变位置，因为节点的数量发生改变了，仍然用之前的计算方法数据落点全部出错。为了解决这个问题一致性哈希就出现了。</p><h2 id="一致性哈希原理"><a href="#一致性哈希原理" class="headerlink" title="一致性哈希原理"></a>一致性哈希原理</h2><p>一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希空间环如下：</p><p><img src="/img/hash/cricle-hash-1.jpg" alt="图-2"></p><p>接下来就是将我们的缓存对象哈希化放到这个环中，访问数据的时候数据key也是用同样的算法计算出哈希，通过环上顺时针转动知道遇到第一个存贮节点，这个存储节点就是数据的保存节点。如图-3所</p><p><img src="/img/hash/cricle-hash-2.png" alt="图-3"></p><p>图-3中object1的key哈希之后为400000000顺时针转动知道遇到第一个存储对象node2所以object1保存的对象为node2。</p><p class="note note-primary">一般的如果一个节点不可用则这个节点上的数据就会分配到相邻的节点上而其他key所在的位置不会变化。新增一个节点同理</p><h2 id="一致性哈希引入虚拟节点解决分配不均问题"><a href="#一致性哈希引入虚拟节点解决分配不均问题" class="headerlink" title="一致性哈希引入虚拟节点解决分配不均问题"></a>一致性哈希引入虚拟节点解决分配不均问题</h2><p>想必大聪明的你已经看出来了。当存储节点较少或者节点分配本身就不均衡的情况下，一些key落入的数据节点必然会不均衡，这个时候又会造成节点过热。为解决这个问题引入了虚拟节点。即一个真实节点对应了多个虚拟的节点如图-4所示：</p><p><img src="/img/hash/cricle-hash-3.png" alt="图-4"></p><p>图-4中的虚拟节点并不是真实的存储节点，而是按照一定规则批量生成的虚拟节点。这些虚拟节点都有一个对应的真实节点。</p><h2 id="一致性哈希与其哈希算法对比"><a href="#一致性哈希与其哈希算法对比" class="headerlink" title="一致性哈希与其哈希算法对比"></a>一致性哈希与其哈希算法对比</h2><p>对于集群中缓存类数据key的节点分配问题，有这几种解决方法，简单的hash取模，槽映射，一致性hash。</p><ul><li><p><strong>hash取模</strong><br>对于hash取模，均衡性没有什么问题，但是如果集群中新增一个节点时，将会有N／（N+1）的数据实效，当N值越大，失效率越高。这显然是不可接受的。</p></li><li><p><strong>槽映射</strong><br>redis采用的就是这种算法, 其思想是将key值做一定运算（如crc16， crc32，hash）， 获得一个整数值，再将该值与固定的槽数取模（slots）， 每个节点处理固定的slots。获取key所在的节点时，先要计算出key与槽的对应关系，再通过槽与节点的对应关系找到节点，这里每次新增节点时，只需要迁移一定槽对应的key即可，而不迁移的槽点key值则不会实效，这种方式将失效率降低到了 1／（N+1）。不过这种方式有个缺点就是所有节点都需要知道槽与节点对应关系，如果client端不保存槽与节点的对应关系的话，它需要实现重定向的逻辑。</p></li><li><p><strong>一致性hash</strong><br>一致性hash如上文所言，其新增一个节点的失效率仅为1／（N+1），通过一致性hash最大程度的降低了实效率。同时相比于槽映射的方式，不需要引人槽来做中间对应，最大限度的简化了实现。</p></li></ul><h2 id="Go实现一致性哈希"><a href="#Go实现一致性哈希" class="headerlink" title="Go实现一致性哈希"></a>Go实现一致性哈希</h2><p><strong>代码实现详细<a href="https://github.com/dogslee/consistent">github.com/dogslee/consistent</a></strong></p><p>使用样例:</p><figure class="highlight golang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golang"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/dogslee/consistent&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// default consistent hash function</span><br>c := consistent.New()<br><span class="hljs-comment">// add new node</span><br>c.Add(<span class="hljs-string">&quot;node1&quot;</span>)<br>c.Add(<span class="hljs-string">&quot;node2&quot;</span>)<br>c.Add(<span class="hljs-string">&quot;node3&quot;</span>)<br>c.Add(<span class="hljs-string">&quot;node4&quot;</span>)<br>keyCase := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;user1&quot;</span>, <span class="hljs-string">&quot;user2&quot;</span>, <span class="hljs-string">&quot;user3&quot;</span>, <span class="hljs-string">&quot;user4&quot;</span>&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> keyCase &#123;<br>srvNode, err := c.Get(k)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;key: %s ==&gt; srvNode: %s&quot;</span>, k, srvNode)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><p><a href="https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/a.3.html">一致性哈希算法</a><br><a href="https://juejin.cn/post/6844903750860013576">5分钟理解一致性哈希算法</a><br><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C">维基百科-一致性哈希</a><br><a href="https://xie.infoq.cn/article/78043810ecc807d1896c6f3f2">golang 实现一致性 hash 算法</a><br><a href="https://segmentfault.com/a/1190000013533592">一致性hash算法原理及golang实现</a></p>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
      <tag>hash</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置MySQL的隔离级别</title>
    <link href="/2021/08/25/%E8%AE%BE%E7%BD%AEMySQL%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <url>/2021/08/25/%E8%AE%BE%E7%BD%AEMySQL%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="怎么查当前的隔离级别？"><a href="#怎么查当前的隔离级别？" class="headerlink" title="怎么查当前的隔离级别？"></a>怎么查当前的隔离级别？</h2><p class="note note-success">MySQL数据库默认的存储引擎是支持事务的innodb,所以自然的就有默认的隔离级别--可重复读</p><p class="note note-warning">只有支持ACID的存储引擎才有对应的各种隔离级别</p><p>在我们设置当前事务的隔离级别的时候我们首先要会查询我们的MySQL的隔离级别是什么</p><p>MySQL查询隔离级别的语句是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysql&gt; select @@global.tx_isolation,@@tx_isolation;<br>+-----------------------+-----------------+<br>| @@global.tx_isolation | @@tx_isolation  |<br>+-----------------------+-----------------+<br>| REPEATABLE-READ       | REPEATABLE-READ |<br>+-----------------------+-----------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure><h2 id="如何设置自己的隔离级别？"><a href="#如何设置自己的隔离级别？" class="headerlink" title="如何设置自己的隔离级别？"></a>如何设置自己的隔离级别？</h2><p>设置innodb的事务级别方法是：</p><p>set 作用域 transaction isolation level 事务隔离级别，例如~</p><blockquote><p>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">// 全局的<br>mysql&gt; <span class="hljs-built_in">set</span> global transaction isolation level <span class="hljs-built_in">read</span> committed;<br>// 当前会话<br>mysql&gt; <span class="hljs-built_in">set</span> session transaction isolation level <span class="hljs-built_in">read</span> committed;<br></code></pre></div></td></tr></table></figure><h2 id="各个隔离级别都是啥意思？"><a href="#各个隔离级别都是啥意思？" class="headerlink" title="各个隔离级别都是啥意思？"></a>各个隔离级别都是啥意思？</h2><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p><p>但是读提交和串行化一般很少使用</p><ul><li><p><strong>Read Uncommitted（读取未提交内容）</strong><br>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p></li><li><p><strong>Read Committed（读取提交内容）</strong><br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p></li><li><p><strong>Repeatable Read（可重读）</strong><br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p></li><li><p><strong>Serializable（可串行化）</strong><br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p></li></ul><h2 id="脏读、不可重复读、幻读"><a href="#脏读、不可重复读、幻读" class="headerlink" title="脏读、不可重复读、幻读"></a>脏读、不可重复读、幻读</h2><ol><li>脏读 ：读到了别的事务尚未提交（commit）的变更，别人没提交，我读到了。</li><li>不可重复读 ：别的事务提交了变更，被当前事务读到了。然后导致本事务多次select的结果不一样，读到了别的事务提交的内容。</li><li>幻读 : 别的事务提交了变更，被当前事务读到了。然后导致本事务多次select的结果不一样，读到了别的事务提交的内容。注意这里特指(insert)插入的数据。</li></ol><p class="note note-primary">这里只有幻读理解起来有些绕 简单来讲就是同一个事物中连续执行两次同样的sql语句，可能导致不同的结果问题，第二次sql语句可能返回之前不存在的行</p><h2 id="不同隔离级别对应可能出现问题"><a href="#不同隔离级别对应可能出现问题" class="headerlink" title="不同隔离级别对应可能出现问题"></a>不同隔离级别对应可能出现问题</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>Read Committed</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>Repeatable Read</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>Serializable</td><td>N</td><td>N</td><td>N</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose搭建MySql主从和双主</title>
    <link href="/2021/08/23/docker-compose%E6%90%AD%E5%BB%BAMySql%E4%B8%BB%E4%BB%8E%E5%92%8C%E5%8F%8C%E4%B8%BB/"/>
    <url>/2021/08/23/docker-compose%E6%90%AD%E5%BB%BAMySql%E4%B8%BB%E4%BB%8E%E5%92%8C%E5%8F%8C%E4%B8%BB/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">相信mysql的binlog都不陌生</br>binlog的主要作用就是进行数据同步，今天我们从数据同步的角度搭一下mysql的主从/双主。</p><h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><p>以下基于mysql5.7</p><h2 id="简单了解下binlog"><a href="#简单了解下binlog" class="headerlink" title="简单了解下binlog"></a>简单了解下binlog</h2><ul><li><p>binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。</p></li><li><p>binlog日志包括两类文件：二进制日志索引文件（文件名后缀为.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。</p></li><li><p>binlog有三种格式：statement基于sql语句复制、row基于行数据变更的复制、mixed混合前两种格式的复制。</p></li></ul><h2 id="搭建主从结构"><a href="#搭建主从结构" class="headerlink" title="搭建主从结构"></a>搭建主从结构</h2><p><img src="/img/mysql/mysql-m-s.png" alt="mysql主从架构"></p><h3 id="创建docker-compose"><a href="#创建docker-compose" class="headerlink" title="创建docker-compose"></a>创建docker-compose</h3><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql-master:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-master</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.31</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">13306</span><span class="hljs-string">:3306</span> <br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$PWD/master/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">command:</span> [<br>        <span class="hljs-string">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class="hljs-string">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class="hljs-string">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">myweb</span><br>      <br>  <span class="hljs-attr">mysql-slave:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-slave</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.31</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">23306</span><span class="hljs-string">:3306</span> <br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$PWD/slave/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">command:</span> [<br>        <span class="hljs-string">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class="hljs-string">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class="hljs-string">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">myweb</span>    <br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">myweb:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></div></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><h4 id="配置文件目录结构"><a href="#配置文件目录结构" class="headerlink" title="配置文件目录结构"></a>配置文件目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@xxx MySQLM-S]<span class="hljs-comment"># tree</span><br>.<br>├── docker-compose.yaml<br>├── master<br>│   └── conf<br>│       └── my.cnf<br>└── slave<br>    └── conf<br>        └── my.cnf<br></code></pre></div></td></tr></table></figure><h4 id="master-conf-my-cnf-配置文件"><a href="#master-conf-my-cnf-配置文件" class="headerlink" title="master/conf/my.cnf 配置文件"></a>master/conf/my.cnf 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class="hljs-comment"># ###################################################</span><br><span class="hljs-comment"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class="hljs-comment"># log-slave-updates = true </span><br><br><span class="hljs-comment"># 自增长ID</span><br><span class="hljs-comment"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class="hljs-comment"># auto_increment_offset = 1</span><br><span class="hljs-comment"># auto_increment_increment = 2  </span><br><span class="hljs-comment"># ####################################################</span><br><br><br><span class="hljs-comment"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class="hljs-comment"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class="hljs-comment"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class="hljs-comment"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class="hljs-comment"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class="hljs-comment"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class="hljs-comment"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class="hljs-comment"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class="hljs-comment"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class="hljs-comment"># replicate-do-db = test；</span><br><br><span class="hljs-comment"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></div></td></tr></table></figure><h4 id="slave-conf-my-cnf-配置文件"><a href="#slave-conf-my-cnf-配置文件" class="headerlink" title="slave/conf/my.cnf 配置文件"></a>slave/conf/my.cnf 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class="hljs-comment"># ###################################################</span><br><span class="hljs-comment"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class="hljs-comment"># log-slave-updates = true </span><br><br><span class="hljs-comment"># 自增长ID</span><br><span class="hljs-comment"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class="hljs-comment"># auto_increment_offset = 2</span><br><span class="hljs-comment"># auto_increment_increment = 2  </span><br><span class="hljs-comment"># ####################################################</span><br><br><span class="hljs-comment"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class="hljs-comment"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class="hljs-comment"># 确保binlog日志写入后与硬盘同步</span><br><span class="hljs-comment"># sync_binlog = 1</span><br><br><span class="hljs-comment"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class="hljs-comment"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class="hljs-comment"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class="hljs-comment"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class="hljs-comment"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class="hljs-comment"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class="hljs-comment"># replicate-do-db = test；</span><br><br><span class="hljs-comment"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></div></td></tr></table></figure><h3 id="启动docker-compose并配置主从关系"><a href="#启动docker-compose并配置主从关系" class="headerlink" title="启动docker-compose并配置主从关系"></a>启动docker-compose并配置主从关系</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose up -d <br></code></pre></div></td></tr></table></figure><h4 id="进入master配置同步账号和权限"><a href="#进入master配置同步账号和权限" class="headerlink" title="进入master配置同步账号和权限"></a>进入master配置同步账号和权限</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose <span class="hljs-built_in">exec</span> mysql-slave bash<br><br>mysql -uroot -p123455<br><br><span class="hljs-comment"># 查看配置的服务ID</span><br>mysql&gt; show variables like <span class="hljs-string">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 1     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class="hljs-comment"># 看master信息 File 和 Position 从服务上要用</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000004 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class="hljs-comment"># 创建同步账户并开启权限</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class="hljs-string">&#x27;slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></div></td></tr></table></figure><h4 id="进入slave服务配置"><a href="#进入slave服务配置" class="headerlink" title="进入slave服务配置"></a>进入slave服务配置</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose <span class="hljs-built_in">exec</span> docker-slave bash<br><br>mysql -uroot -p123456<br><br><span class="hljs-comment">#查看server_id是否生效</span><br>mysql&gt; show variables like <span class="hljs-string">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 2     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class="hljs-comment"># 连接主mysql服务 master_log_file 和 master_log_pos的值要填写主master里查出来的值 注意这里使用的docker-compose 内部服务的端口和ip</span><br>mysql&gt; change master to master_host=<span class="hljs-string">&#x27;mysql-master&#x27;</span>,master_user=<span class="hljs-string">&#x27;slave&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000004&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br><br><span class="hljs-comment"># 开启slave</span><br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>                  Master_Host: mysql-master<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000004<br>          Read_Master_Log_Pos: 778<br>               Relay_Log_File: af5556aff9be-relay-bin.000002<br>                Relay_Log_Pos: 944<br>        Relay_Master_Log_File: mysql-bin.000004<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB: <br>          Replicate_Ignore_DB: mysql<br>           Replicate_Do_Table: <br>       Replicate_Ignore_Table: <br>      Replicate_Wild_Do_Table: <br>  Replicate_Wild_Ignore_Table: <br>                   Last_Errno: 0<br>                   Last_Error: <br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 778<br>              Relay_Log_Space: 1158<br>              Until_Condition: None<br>               Until_Log_File: <br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File: <br>           Master_SSL_CA_Path: <br>              Master_SSL_Cert: <br>            Master_SSL_Cipher: <br>               Master_SSL_Key: <br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error: <br>               Last_SQL_Errno: 0<br>               Last_SQL_Error: <br>  Replicate_Ignore_Server_Ids: <br>             Master_Server_Id: 1<br>                  Master_UUID: 466c4a60-03f4-11ec-a1a1-0242ac160002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class="hljs-built_in">read</span> all relay <span class="hljs-built_in">log</span>; waiting <span class="hljs-keyword">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind: <br>      Last_IO_Error_Timestamp: <br>     Last_SQL_Error_Timestamp: <br>               Master_SSL_Crl: <br>           Master_SSL_Crlpath: <br>           Retrieved_Gtid_Set: <br>            Executed_Gtid_Set: <br>                Auto_Position: 0<br>         Replicate_Rewrite_DB: <br>                 Channel_Name: <br>           Master_TLS_Version: <br><br></code></pre></div></td></tr></table></figure><p class="note note-success"> 上面看到 Slave_IO_Running: Yes，Slave_SQL_Running: Yes 表示已经成功开启主从</p><p>连接主mysql参数说明：</p><p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p><p><strong>master_user</strong>：用于数据同步的用户</p><p><strong>master_password</strong>：用于同步的用户的密码</p><p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p><p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p><p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p><h2 id="搭建双主结构"><a href="#搭建双主结构" class="headerlink" title="搭建双主结构"></a>搭建双主结构</h2><p>通过上面主从结构我们可以我们可以大胆设想，要是两个数据库的实例都配置对方为master不就实现的双主么？事实却是如此：</p><p>双主结构只需要将双方的配置文件注释掉的地方取消注释掉分别在两台服务器上创同步账号和配置</p><h3 id="创建docker-compose文件（双主）"><a href="#创建docker-compose文件（双主）" class="headerlink" title="创建docker-compose文件（双主）"></a>创建docker-compose文件（双主）</h3><p>这里只更改了docker-compose中服务的名称</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql-m1:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-m1</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.31</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">13306</span><span class="hljs-string">:3306</span> <br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$PWD/m1/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">command:</span> [<br>        <span class="hljs-string">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class="hljs-string">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class="hljs-string">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">myweb</span><br>      <br>  <span class="hljs-attr">mysql-m2:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-m2</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.31</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">23306</span><span class="hljs-string">:3306</span> <br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$PWD/m2/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">command:</span> [<br>        <span class="hljs-string">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class="hljs-string">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class="hljs-string">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">myweb</span>    <br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">myweb:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></div></td></tr></table></figure><h3 id="创建配置文件-双主"><a href="#创建配置文件-双主" class="headerlink" title="创建配置文件(双主)"></a>创建配置文件(双主)</h3><p>这里只是将主从中的配置中注释掉的服务添加上</p><h4 id="配置文件目录结构（双主）"><a href="#配置文件目录结构（双主）" class="headerlink" title="配置文件目录结构（双主）"></a>配置文件目录结构（双主）</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@xxx MySQLM-M]<span class="hljs-comment"># tree</span><br>.<br>├── docker-compose.yaml<br>├── m1<br>│   └── conf<br>│       └── my.cnf<br>└── m2<br>    └── conf<br>        └── my.cnf<br></code></pre></div></td></tr></table></figure><h4 id="m1-conf-my-cnf"><a href="#m1-conf-my-cnf" class="headerlink" title="m1/conf/my.cnf"></a>m1/conf/my.cnf</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class="hljs-comment"># ###################################################</span><br><span class="hljs-comment"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class="hljs-literal">true</span> <br><br><span class="hljs-comment"># 自增长ID</span><br><span class="hljs-comment"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 1<br>auto_increment_increment = 2  <br><span class="hljs-comment"># ####################################################</span><br><br><br><span class="hljs-comment"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class="hljs-comment"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class="hljs-comment"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class="hljs-comment"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class="hljs-comment"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class="hljs-comment"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class="hljs-comment"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class="hljs-comment"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class="hljs-comment"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class="hljs-comment"># replicate-do-db = test；</span><br><br><span class="hljs-comment"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></div></td></tr></table></figure><h4 id="m2-conf-my-cnf"><a href="#m2-conf-my-cnf" class="headerlink" title="m2/conf/my.cnf"></a>m2/conf/my.cnf</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class="hljs-comment"># ###################################################</span><br><span class="hljs-comment"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class="hljs-literal">true</span> <br><br><span class="hljs-comment"># 自增长ID</span><br><span class="hljs-comment"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 2<br>auto_increment_increment = 2  <br><span class="hljs-comment"># ####################################################</span><br><br><span class="hljs-comment"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class="hljs-comment"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class="hljs-comment"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class="hljs-comment"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class="hljs-comment"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class="hljs-comment"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class="hljs-comment"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class="hljs-comment"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class="hljs-comment"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class="hljs-comment"># replicate-do-db = test；</span><br><br><span class="hljs-comment"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></div></td></tr></table></figure><h3 id="启动docker-compose并配置m1和m2的双主"><a href="#启动docker-compose并配置m1和m2的双主" class="headerlink" title="启动docker-compose并配置m1和m2的双主"></a>启动docker-compose并配置m1和m2的双主</h3><h4 id="启动（双主）"><a href="#启动（双主）" class="headerlink" title="启动（双主）"></a>启动（双主）</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose up -d <br></code></pre></div></td></tr></table></figure><p>进入m1和m2下执行下列命令来获取各自的master status 和同步账号</p><p>m1:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose <span class="hljs-built_in">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class="hljs-comment"># 查看m1 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class="hljs-comment"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class="hljs-string">&#x27;slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br><br></code></pre></div></td></tr></table></figure><p>m2:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose <span class="hljs-built_in">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class="hljs-comment"># 查看m2 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class="hljs-comment"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class="hljs-string">&#x27;slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></div></td></tr></table></figure><p>m1:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysql&gt; change master to master_host=<span class="hljs-string">&#x27;mysql-m2&#x27;</span>,master_user=<span class="hljs-string">&#x27;slave&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>                  Master_Host: mysql-m2<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 620<br>               Relay_Log_File: de7a84f1b7f1-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 620<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 2<br>                  Master_UUID: de8af5ce-0410-11ec-ab6d-0242ac170003<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class="hljs-built_in">read</span> all relay <span class="hljs-built_in">log</span>; waiting <span class="hljs-keyword">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br><br></code></pre></div></td></tr></table></figure><p>m2:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mysql&gt; change master to master_host=<span class="hljs-string">&#x27;mysql-m1&#x27;</span>,master_user=<span class="hljs-string">&#x27;slave&#x27;</span>,master_password=<span class="hljs-string">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class="hljs-string">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>                  Master_Host: mysql-m1<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 1086<br>               Relay_Log_File: 65322be4d8a9-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 1086<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 1<br>                  Master_UUID: de898a82-0410-11ec-9fee-0242ac170002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class="hljs-built_in">read</span> all relay <span class="hljs-built_in">log</span>; waiting <span class="hljs-keyword">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br></code></pre></div></td></tr></table></figure><p class="noet note-success">至此双主节点设置完成</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主从模式多用来进行读写分离</p><p>双主模式多用来进行高可用</p><p>更复杂的部署可能会部署多master和多slave并用keeplive保证统一访问的模式，这里没探究</p>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>高可用</tag>
      
      <tag>数据同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务概述</title>
    <link href="/2021/08/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/08/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="微服务起源"><a href="#微服务起源" class="headerlink" title="微服务起源"></a>微服务起源</h2><h3 id="单体应用的缺点"><a href="#单体应用的缺点" class="headerlink" title="单体应用的缺点"></a>单体应用的缺点</h3><ul><li>单体应用复杂</li><li>应用无法拓展</li><li>可靠性低</li><li>敏捷开发和快速部署无法完成</li></ul><p><em><strong>由此产生微服务</strong></em></p><blockquote><p>一切争端的开始</p></blockquote><h3 id="微服务的演变"><a href="#微服务的演变" class="headerlink" title="微服务的演变"></a>微服务的演变</h3><p>微服务本质上是对面向架构的模式(SOA)的一种实践</p><p>微服务的特点:</p><ul><li>小即是美</li><li>单一职责</li><li>尽可能早创建原型</li><li>可以执行比效率更重要</li></ul><h3 id="微服务的定义"><a href="#微服务的定义" class="headerlink" title="微服务的定义"></a>微服务的定义</h3><p>围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活</p><p><em><strong>核心： 化繁为简 分而治之</strong></em></p><p>优点：</p><ul><li>原子服务</li><li>独立部署</li><li>隔离部署</li><li>去中心化服务治理</li></ul><p>缺点：</p><ul><li>基础设施建设复杂度高</li><li>分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂</li><li>分布式的分区数据库 对分布式事物等需要做对应的复杂处理</li><li>测试整体的微服务架构复杂</li><li>服务间的依赖 局部升级可能影响整体</li></ul><h2 id="微服务设计思路"><a href="#微服务设计思路" class="headerlink" title="微服务设计思路"></a>微服务设计思路</h2><h3 id="组件服务化"><a href="#组件服务化" class="headerlink" title="组件服务化"></a>组件服务化</h3><ul><li>kit:一个微服务的基础库（框架）</li><li>service: 业务业务代码+kit依赖+第三方组件的依赖</li><li>RPC+message queue: 轻量级通讯</li></ul><h3 id="按业务组织服务"><a href="#按业务组织服务" class="headerlink" title="按业务组织服务"></a>按业务组织服务</h3><p>事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能</p><h3 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h3><ul><li>数据去中心化</li><li>治理去中心化</li><li>技术去中心化</li></ul><h3 id="基础设施自动化"><a href="#基础设施自动化" class="headerlink" title="基础设施自动化"></a>基础设施自动化</h3><ul><li>ci/cd</li><li>auto testing</li><li>在线监控</li></ul><h3 id="服务兼容性设计"><a href="#服务兼容性设计" class="headerlink" title="服务兼容性设计"></a>服务兼容性设计</h3><p>发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。</p><ul><li>负载均衡</li><li>超时控制</li><li>负载保护</li><li>隔离</li><li>限流</li><li>降级</li><li>重试</li><li>熔断</li></ul><h2 id="微服务设计"><a href="#微服务设计" class="headerlink" title="微服务设计"></a>微服务设计</h2><h3 id="API-GATEWAY"><a href="#API-GATEWAY" class="headerlink" title="API GATEWAY"></a>API GATEWAY</h3><blockquote><p>backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务</p></blockquote><h3 id="微服务的划分"><a href="#微服务的划分" class="headerlink" title="微服务的划分"></a>微服务的划分</h3><h3 id="微服务的安全"><a href="#微服务的安全" class="headerlink" title="微服务的安全"></a>微服务的安全</h3><h2 id="服务发现-amp-GRPC"><a href="#服务发现-amp-GRPC" class="headerlink" title="服务发现 &amp; GRPC"></a>服务发现 &amp; GRPC</h2><h3 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h3><ul><li>多语言：语言中立，支持多种语言。</li><li>轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架</li><li>可插拔</li><li>IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li><li>移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。</li><li>服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念</li><li>负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。</li><li>流：Streaming API。</li><li>阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。</li><li>元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。</li><li>标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 </li></ul><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><ul><li><p>客户端发现：<br>直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑</p></li><li><p>服务端发现：<br>Consumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失</p></li><li><p>服务网格 service mesh:<br>通过sidercar 方式隐式的支持服务发现（待补充）</p></li></ul><h2 id="多集群-amp-多租户"><a href="#多集群-amp-多租户" class="headerlink" title="多集群 &amp; 多租户"></a>多集群 &amp; 多租户</h2><h3 id="多集群"><a href="#多集群" class="headerlink" title="多集群"></a>多集群</h3><p>为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力</p><h3 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h3><p>在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）</p><p>通过不同的租户区分不同的业务功能：</p><ul><li>红蓝发布</li><li>灰度测试</li><li>模块测试</li></ul><blockquote><p>多租户的概念较为模糊<br>思考？ 多租户中是怎样实现在上下文中传递多租户信息的?</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ddd</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
