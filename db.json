{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/abg/favicon.jpg","path":"img/abg/favicon.jpg","modified":0,"renderable":0},{"_id":"source/img/abg/default.jpg","path":"img/abg/default.jpg","modified":0,"renderable":0},{"_id":"source/img/micro/top.png","path":"img/micro/top.png","modified":0,"renderable":0},{"_id":"source/img/micro/banner.jpg","path":"img/micro/banner.jpg","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/mysql/mysql-m-s.png","path":"img/mysql/mysql-m-s.png","modified":0,"renderable":0},{"_id":"source/img/mysql/mysql.png","path":"img/mysql/mysql.png","modified":0,"renderable":0},{"_id":"source/img/mysql/banner-1.jpg","path":"img/mysql/banner-1.jpg","modified":0,"renderable":0},{"_id":"source/img/mysql/isolation.jpg","path":"img/mysql/isolation.jpg","modified":0,"renderable":0},{"_id":"source/img/hash/redis-hash-cache.png","path":"img/hash/redis-hash-cache.png","modified":0,"renderable":0},{"_id":"source/img/hash/redis-hash-cache.jpg","path":"img/hash/redis-hash-cache.jpg","modified":0,"renderable":0},{"_id":"source/img/hash/cricle-hash-1.jpg","path":"img/hash/cricle-hash-1.jpg","modified":0,"renderable":0},{"_id":"source/img/hash/cricle-hash-2.png","path":"img/hash/cricle-hash-2.png","modified":0,"renderable":0},{"_id":"source/img/hash/cricle-hash-3.png","path":"img/hash/cricle-hash-3.png","modified":0,"renderable":0},{"_id":"source/img/hash/banner.jpg","path":"img/hash/banner.jpg","modified":0,"renderable":0},{"_id":"source/img/hash/index.jpeg","path":"img/hash/index.jpeg","modified":0,"renderable":0},{"_id":"source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":0},{"_id":"source/img/golang/go.jpg","path":"img/golang/go.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/page1.md","hash":"eb4d0cfaef6a04d02b85236549cc375c8363d03a","modified":1629266783715},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1629256660631},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629195218765},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1629195218765},{"_id":"public/2021/08/18/page1/index.html","hash":"fda431ef4c8bacd2bc0b8c5f57985ce2bb6781ba","modified":1629277319486},{"_id":"public/2021/08/18/hello-world/index.html","hash":"b12b91ef2d64f05af18ad6ab705be18cb69cbee3","modified":1629277319486},{"_id":"public/archives/index.html","hash":"d03de4e5ff60eb4780c639fcb7dd0ea2e682574c","modified":1633491675880},{"_id":"public/index.html","hash":"cfdb577acc20308b661761d107062d7f368d65f6","modified":1633513777838},{"_id":"public/archives/2021/index.html","hash":"d03de4e5ff60eb4780c639fcb7dd0ea2e682574c","modified":1633491675880},{"_id":"public/archives/2021/08/index.html","hash":"91b28e4af57812746b65a95e136504d9b443351b","modified":1633491080228},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1629257320618},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1629257320618},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1629257320618},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1629257320618},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1629257320618},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1629257320618},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1629257320618},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1629257320618},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1629257320618},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1629257320618},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629257320618},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1629257320618},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1629257407578},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1629257407593},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1629257407345},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1629257407346},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1629257407347},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1629257407347},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1629257407437},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":1629257407418},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":1629257407432},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":1629257407438},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1629257407599},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":1629257407596},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1629257407599},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1629257407599},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1629257407602},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1629257407602},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1629257407603},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1629257407373},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1629257407374},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1629257407378},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1629257407380},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":1629257407379},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":1629257407388},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":1629257407388},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":1629257407389},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1629257407394},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1629257407396},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1629257407400},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1629257407400},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1629257407435},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1629257407433},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1629257407437},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1629257407437},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1629257407437},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1629257407437},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1629257407595},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":1629257407596},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1629257407378},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":1629257407378},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":1629257407382},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":1629257407385},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":1629257407384},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":1629257407391},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1629257407394},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":1629257407397},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1629257407395},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1629257407398},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1629257407420},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1629257407426},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1629257407399},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1629257407401},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1629257407431},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1629257407424},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1629257407429},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":1629257407416},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1629257407428},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1629257407431},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1629257407432},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1629257407432},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1629257407411},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1629257407411},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1629257407418},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1629257407422},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1629257407427},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1629257407428},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1629257407421},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1629257407428},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1629257407588},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1629257407445},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1629257407369},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1629257407455},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1629257407458},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1629257407410},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1629257407564},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1629257407408},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1629257407415},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1629257407420},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1629257407423},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1629257407412},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1629257407424},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1629257407430},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":1629257407381},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1629257407432},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1629257407594},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":1629257407383},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1629257407384},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1629257407383},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1629257407397},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1629257407389},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":1629257407401},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1629257407404},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":1629257407404},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1629257407377},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":1629257407405},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1629257407390},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1629257407391},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1629257407392},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1629257407414},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1629257407403},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1629257407417},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1629257407419},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1629257407420},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":1629257407422},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1629257407427},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1629257407575},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1629257407589},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":1629257407576},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1629257407574},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1629257407372},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1629257407571},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1629257407570},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":1629257407576},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1629257407581},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1629257407585},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1629257407585},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1629257407578},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":1629257407592},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":1629257407585},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1629257407587},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1629257407590},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":1629257407593},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1629257407594},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1629257407576},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1629257407573},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1629257407582},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1629257407583},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1629257407584},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1629257407583},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1629257407591},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1629257407592},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1629257407593},{"_id":"public/local-search.xml","hash":"e37e74f508057f6b71b7f595c29225c3bad1d2c2","modified":1633513777838},{"_id":"public/404.html","hash":"1527432e64701d3e105dbbaba6c38e83d409c1d1","modified":1631951119746},{"_id":"public/tags/index.html","hash":"d61992a7b71c177ac5bdbf5bcde7a75525f56c1f","modified":1633513777838},{"_id":"public/categories/index.html","hash":"82524e1a84f45eb8a8e02934b1026fc406321c5e","modified":1633491675880},{"_id":"public/links/index.html","hash":"4c0980210b96926bb63c54041c795bcbddbe57ea","modified":1631951119746},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1629258589263},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1629258589263},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1629258589263},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1629258589263},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1629258589263},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1629258589263},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1629258589263},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1629258589263},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1629258589263},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1629258589263},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1629258589263},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1629258589263},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1629258589263},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1629258589263},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1629258589263},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1629258589263},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1629258589263},{"_id":"source/.DS_Store","hash":"5cf82504fbd3e875c83b195870fdfe6ad0865a5d","modified":1631950362037},{"_id":"source/img/page1/photo.png","hash":"41f5ac5618f938e1f0f763fa0c4b141122556c31","modified":1628693618417},{"_id":"public/img/page1/photo.png","hash":"41f5ac5618f938e1f0f763fa0c4b141122556c31","modified":1629266790034},{"_id":"source/img/.DS_Store","hash":"ba289c4c0b831bd9345622494226fc2951dd21b0","modified":1630481776713},{"_id":"source/img/abg/favicon.jpg","hash":"5355e7cb3382dc2733338e13542c2c318a0a3516","modified":1629267093000},{"_id":"source/img/abg/default.jpg","hash":"c5e4f5a6bbc8196771c2a5bd0e967d6e2d1f0368","modified":1629269734000},{"_id":"public/img/abg/favicon.jpg","hash":"5355e7cb3382dc2733338e13542c2c318a0a3516","modified":1629271940099},{"_id":"public/img/abg/default.jpg","hash":"c5e4f5a6bbc8196771c2a5bd0e967d6e2d1f0368","modified":1629271940099},{"_id":"source/about/index.md","hash":"9b63de9246ee185b3e442616e7c1201eb0f50a1d","modified":1629278699784},{"_id":"source/_posts/微服务概述.md","hash":"6bda4d3d5db266381037ef1e27a8ff98f96d2f63","modified":1629298754146},{"_id":"public/about/index.html","hash":"34898660883c7f8facf7a58b810954e062d694be","modified":1631951119746},{"_id":"public/2021/08/18/微服务概述/index.html","hash":"47004808832da76e225f5a2bbe30ee5d95df9afd","modified":1631951119746},{"_id":"source/img/micro/top.png","hash":"e9a2b17f218a68188dcd6afb660206080b7523f8","modified":1629281723104},{"_id":"public/categories/架构/index.html","hash":"a23887f68cb6f021fb94f920ed0b7e42b46855c4","modified":1631951119746},{"_id":"public/tags/ddd/index.html","hash":"7c1615c05a5c8d074c55e2464e2f2839d5509ea2","modified":1631951119746},{"_id":"public/tags/微服务/index.html","hash":"9faa3c87c5fe3ca03019690bad3cdc43fce18887","modified":1631951119746},{"_id":"public/img/micro/top.png","hash":"e9a2b17f218a68188dcd6afb660206080b7523f8","modified":1629281764758},{"_id":"source/img/micro/banner.jpg","hash":"8f6b3e89c6d6f183f0d03c6f97d21b2b87cdc76c","modified":1629293742175},{"_id":"public/img/micro/banner.jpg","hash":"8f6b3e89c6d6f183f0d03c6f97d21b2b87cdc76c","modified":1629294544576},{"_id":"source/CNAME","hash":"ed23b6fccb9994b0407e2b78d1a687bcc6343cd7","modified":1629338173642},{"_id":"public/CNAME","hash":"ed23b6fccb9994b0407e2b78d1a687bcc6343cd7","modified":1629338186415},{"_id":"source/_posts/docker-compose搭建MySql主从和双主.md","hash":"bf481cea9657f8267f4ddec4716c5d13fdf9e6c0","modified":1629727218942},{"_id":"source/img/mysql/mysql-m-s.png","hash":"38b32caacde54b3981ac2a67489eb9b13f18f19a","modified":1629726519031},{"_id":"source/img/mysql/mysql.png","hash":"b32675731302b1cd1816bf0edc4bba403ca12671","modified":1629726855583},{"_id":"source/img/mysql/banner-1.jpg","hash":"759f8bfa9a895292082f56c89c5fbd783a0dbb39","modified":1629727156694},{"_id":"public/categories/存储/index.html","hash":"a72cc564503ea9d5a5bee3d5fd00cd130c451ed3","modified":1631951119746},{"_id":"public/tags/mysql/index.html","hash":"5926e02099c62e67e13d0e08a4eaa24b9a26554b","modified":1631951119746},{"_id":"public/tags/高可用/index.html","hash":"9df4976756a6594cd27a453c250dc0774e3507cf","modified":1631951119746},{"_id":"public/tags/数据同步/index.html","hash":"6dfe3b87b03e829aae616fc2e01e1f579b8c380f","modified":1631951119746},{"_id":"public/2021/08/23/docker-compose搭建MySql主从和双主/index.html","hash":"2642c530a35647f492e727be4009a3f52539389b","modified":1631951119746},{"_id":"public/img/mysql/mysql.png","hash":"b32675731302b1cd1816bf0edc4bba403ca12671","modified":1629727312185},{"_id":"public/img/mysql/mysql-m-s.png","hash":"38b32caacde54b3981ac2a67489eb9b13f18f19a","modified":1629727312185},{"_id":"public/img/mysql/banner-1.jpg","hash":"759f8bfa9a895292082f56c89c5fbd783a0dbb39","modified":1629727312185},{"_id":"source/_posts/MySQL事务的隔离性和隔离级别.md","hash":"8b4533480c2c7a48130053e45e74587d0267da94","modified":1629895183115},{"_id":"public/2021/08/25/MySQL事务的隔离性和隔离级别/index.html","hash":"3567cf0a3418f6823a116a765bcdcf1f66418f0f","modified":1629896973004},{"_id":"public/tags/mvcc/index.html","hash":"bf8fae070979153a5f3907f9fa7ec4a6ca9c1a4d","modified":1629885327858},{"_id":"public/tags/ACID/index.html","hash":"4c80cb04d18c75b5dee3f1a4cafd7904ec20d81e","modified":1629885327858},{"_id":"public/sitemap.xml","hash":"17942a4abd4dd5733371006922aa02dfd71899c3","modified":1633513777838},{"_id":"public/baidusitemap.xml","hash":"fa9c76258a695166e74784d66664ef97e882d9d2","modified":1633513777838},{"_id":"source/_drafts/MySQL事务的隔离性和隔离级别.md","hash":"8b4533480c2c7a48130053e45e74587d0267da94","modified":1629897233306},{"_id":"source/_drafts/设置MySQL的隔离级别.md","hash":"35df4e787497852f535e1df997eb1e8a70041bae","modified":1629904015478},{"_id":"source/_posts/设置MySQL的隔离级别.md","hash":"c2a45260f14eacca381a8f81f84ff133f994f68f","modified":1629964792081},{"_id":"public/2021/08/25/设置MySQL的隔离级别/index.html","hash":"38659c62d49126ea182e9eac3f1f15efd1c49a0d","modified":1631951119746},{"_id":"source/img/mysql/isolation.jpg","hash":"857eeda51d229fbcf1382a2a676b101158e438a3","modified":1629904327912},{"_id":"public/img/mysql/isolation.jpg","hash":"857eeda51d229fbcf1382a2a676b101158e438a3","modified":1629904440295},{"_id":"source/_posts/一致性哈希算法以及Go实现.md","hash":"ef081faf407912c950c348c598e87a0057739163","modified":1630717147574},{"_id":"source/img/hash/redis-hash-cache.png","hash":"3eb4f7e728c9fd0d1ea8a971030c6665725dbe2e","modified":1630481761124},{"_id":"source/img/hash/redis-hash-cache.jpg","hash":"74aae94646080d802e7cbb687219a62cdc258afa","modified":1630481694115},{"_id":"source/img/hash/cricle-hash-2.png","hash":"48565c305ecd06fc2e08cf87d9fc17dadcd8e456","modified":1630486090343},{"_id":"source/img/hash/cricle-hash-1.jpg","hash":"af958e472733b4ed8d8ae882ef46722cea6894e9","modified":1630484480178},{"_id":"source/img/hash/cricle-hash-3.png","hash":"29dd5ad26cf819836b0864548538414fa76df6bb","modified":1630504867304},{"_id":"public/2021/08/31/一致性哈希算法以及Go实现/index.html","hash":"8dcb463626a887d7f4b724f99a50340083c8ac19","modified":1630661469413},{"_id":"public/img/hash/redis-hash-cache.jpg","hash":"74aae94646080d802e7cbb687219a62cdc258afa","modified":1630661469413},{"_id":"public/img/hash/cricle-hash-2.png","hash":"48565c305ecd06fc2e08cf87d9fc17dadcd8e456","modified":1630661469413},{"_id":"public/img/hash/cricle-hash-1.jpg","hash":"af958e472733b4ed8d8ae882ef46722cea6894e9","modified":1630661469413},{"_id":"public/img/hash/redis-hash-cache.png","hash":"3eb4f7e728c9fd0d1ea8a971030c6665725dbe2e","modified":1630661469413},{"_id":"public/img/hash/cricle-hash-3.png","hash":"29dd5ad26cf819836b0864548538414fa76df6bb","modified":1630661469413},{"_id":"source/img/hash/index.jpeg","hash":"fac4d2703b9abf2817b44e1dd997ba80febdb0cb","modified":1630662037169},{"_id":"source/img/hash/banner.jpg","hash":"c44373f42e8e2e87f33e28a7dd63544af499b7ec","modified":1630662280322},{"_id":"public/archives/2021/09/index.html","hash":"9f572ed6d077fd771eb9aa1311f42557450c2213","modified":1633491080228},{"_id":"public/2021/09/03/一致性哈希算法以及Go实现/index.html","hash":"5ec00ec9b5ecc2daea4281e92064cb90952e0df4","modified":1633491080228},{"_id":"public/img/hash/index.jpeg","hash":"fac4d2703b9abf2817b44e1dd997ba80febdb0cb","modified":1630662345820},{"_id":"public/img/hash/banner.jpg","hash":"c44373f42e8e2e87f33e28a7dd63544af499b7ec","modified":1630662345820},{"_id":"public/tags/hash/index.html","hash":"870d7b53b187465313a5561c5b32394df2be84c9","modified":1631951119746},{"_id":"public/tags/缓存/index.html","hash":"e76a85bb50f3b15b9c656703308b3d126100e0d6","modified":1631951119746},{"_id":"public/tags/golang/index.html","hash":"dc78aa07822be6629792499d2037cf1bb526e164","modified":1633491080228},{"_id":"source/img/police_beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1631950106000},{"_id":"source/_posts/golang运行时队列操作函数源码分析.md","hash":"d79a5f350048314c3662d49c22cf1c012fbfbbd0","modified":1633512995599},{"_id":"source/img/hash/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1632047622363},{"_id":"source/_posts/golang运行时核心调度函数.md","hash":"eb225d3aebb48e8dd7603ca00a019340f86ae2f6","modified":1633490609655},{"_id":"source/img/golang/go.jpg","hash":"3b3c9eba74d6b78ffd5598d8ed7ac78462e485c5","modified":1633490842932},{"_id":"public/2021/10/06/golang运行时核心调度函数/index.html","hash":"eab55dd890ed22fcd4ee04c24a2427a6302029ca","modified":1633491080228},{"_id":"public/categories/golang/index.html","hash":"e71662efc6a3e20335623d76c56d41403a089e5a","modified":1633491675880},{"_id":"public/tags/runtime/index.html","hash":"c13e1ffb7722ab185ab77fdc7fd94c0349bbfb2d","modified":1633491675880},{"_id":"public/archives/2021/10/index.html","hash":"83a1c76da7ebc6ac624f868135ebf3a3c09db299","modified":1633491675880},{"_id":"public/2021/10/06/golang运行时队列操作函数源码分析/index.html","hash":"956e1b378282d4f88bbe3abd29dabdbc519ee267","modified":1633513777838},{"_id":"public/img/golang/go.jpg","hash":"3b3c9eba74d6b78ffd5598d8ed7ac78462e485c5","modified":1633491080228},{"_id":"source/_posts/golang运行时核心调度函数-schedule，findrunnable，sysmon-源码分析.md","hash":"ff7e9b002a83bfcac8886da1aaeb36dfdc3141c1","modified":1633512815467},{"_id":"public/tags/schedule/index.html","hash":"223f8142ffba4e3119360b231a338604c5e0ca77","modified":1633491675880},{"_id":"public/tags/sysmon/index.html","hash":"d88a2ed2b4ceedaed8c262f61c3bf802f0e37ca3","modified":1633491675880},{"_id":"public/2021/10/06/golang运行时核心调度函数-schedule，findrunnable，sysmon-源码分析/index.html","hash":"6c0dc9d0fbd6d063a36fbd3000520635422b6d4e","modified":1633513777838},{"_id":"public/tags/findrunnable/index.html","hash":"0edfdfa548063b10824ac739d7ff66548adeeac9","modified":1633513777838}],"Category":[{"name":"微服务","_id":"ckshbbndm0000oa8zfb3rftn5"},{"name":"架构","_id":"ckshc2kdo00002r8z2adqd3mj"},{"name":"存储","_id":"cksoctoh70001mn8z7tr052fq"},{"name":"golang","_id":"ckueye19i0001yx8z0pts62qa"}],"Data":[],"Page":[{"title":"about","date":"2021-08-18T09:24:59.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-18 17:24:59\n---\n","updated":"2021-08-18T09:24:59.784Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckshaj2420000ie8zc36i3pf4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"微服务概述","date":"2021-08-18T09:26:08.000Z","index_img":"/img/micro/top.png","banner_img":"/img/micro/banner.jpg","_content":"\n## 微服务起源\n\n### 单体应用的缺点\n\n- 单体应用复杂\n- 应用无法拓展\n- 可靠性低\n- 敏捷开发和快速部署无法完成\n\n***由此产生微服务***\n\n> 一切争端的开始\n\n### 微服务的演变\n\n微服务本质上是对面向架构的模式(SOA)的一种实践\n\n微服务的特点:\n\n- 小即是美\n- 单一职责\n- 尽可能早创建原型\n- 可以执行比效率更重要\n\n### 微服务的定义\n\n围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活\n\n***核心： 化繁为简 分而治之***\n\n优点：\n\n- 原子服务\n- 独立部署\n- 隔离部署\n- 去中心化服务治理\n\n缺点：\n\n- 基础设施建设复杂度高\n- 分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂\n- 分布式的分区数据库 对分布式事物等需要做对应的复杂处理\n- 测试整体的微服务架构复杂\n- 服务间的依赖 局部升级可能影响整体\n\n## 微服务设计思路\n\n### 组件服务化\n\n- kit:一个微服务的基础库（框架）\n- service: 业务业务代码+kit依赖+第三方组件的依赖\n- RPC+message queue: 轻量级通讯\n\n### 按业务组织服务\n\n事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能\n\n### 去中心化\n\n- 数据去中心化\n- 治理去中心化\n- 技术去中心化\n\n### 基础设施自动化\n\n- ci/cd\n- auto testing\n- 在线监控\n\n### 服务兼容性设计\n\n发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。\n\n- 负载均衡\n- 超时控制\n- 负载保护\n- 隔离\n- 限流\n- 降级\n- 重试\n- 熔断\n\n## 微服务设计\n\n### API GATEWAY\n\n> backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务\n\n### 微服务的划分\n\n### 微服务的安全\n\n## 服务发现 & GRPC\n\n### GRPC\n\n- 多语言：语言中立，支持多种语言。\n- 轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架\n- 可插拔\n- IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub\n- 移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。\n- 服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念\n- 负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。\n- 流：Streaming API。\n- 阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。\n- 元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。\n- 标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 \n\n### 服务发现\n\n- 客户端发现：\n直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑\n\n- 服务端发现：\nConsumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失\n\n- 服务网格 service mesh:\n通过sidercar 方式隐式的支持服务发现（待补充）\n\n## 多集群 & 多租户\n\n### 多集群\n\n为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力\n\n### 多租户\n\n在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）\n\n通过不同的租户区分不同的业务功能：\n\n- 红蓝发布\n- 灰度测试\n- 模块测试\n\n> 多租户的概念较为模糊\n> 思考？ 多租户中是怎样实现在上下文中传递多租户信息的?\n","source":"_posts/微服务概述.md","raw":"---\ntitle: 微服务概述\ndate: 2021-08-18 17:26:08\nindex_img: /img/micro/top.png\nbanner_img: /img/micro/banner.jpg\ncategories:\n- 架构\ntags:\n- 微服务\n- ddd\n---\n\n## 微服务起源\n\n### 单体应用的缺点\n\n- 单体应用复杂\n- 应用无法拓展\n- 可靠性低\n- 敏捷开发和快速部署无法完成\n\n***由此产生微服务***\n\n> 一切争端的开始\n\n### 微服务的演变\n\n微服务本质上是对面向架构的模式(SOA)的一种实践\n\n微服务的特点:\n\n- 小即是美\n- 单一职责\n- 尽可能早创建原型\n- 可以执行比效率更重要\n\n### 微服务的定义\n\n围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活\n\n***核心： 化繁为简 分而治之***\n\n优点：\n\n- 原子服务\n- 独立部署\n- 隔离部署\n- 去中心化服务治理\n\n缺点：\n\n- 基础设施建设复杂度高\n- 分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂\n- 分布式的分区数据库 对分布式事物等需要做对应的复杂处理\n- 测试整体的微服务架构复杂\n- 服务间的依赖 局部升级可能影响整体\n\n## 微服务设计思路\n\n### 组件服务化\n\n- kit:一个微服务的基础库（框架）\n- service: 业务业务代码+kit依赖+第三方组件的依赖\n- RPC+message queue: 轻量级通讯\n\n### 按业务组织服务\n\n事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能\n\n### 去中心化\n\n- 数据去中心化\n- 治理去中心化\n- 技术去中心化\n\n### 基础设施自动化\n\n- ci/cd\n- auto testing\n- 在线监控\n\n### 服务兼容性设计\n\n发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。\n\n- 负载均衡\n- 超时控制\n- 负载保护\n- 隔离\n- 限流\n- 降级\n- 重试\n- 熔断\n\n## 微服务设计\n\n### API GATEWAY\n\n> backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务\n\n### 微服务的划分\n\n### 微服务的安全\n\n## 服务发现 & GRPC\n\n### GRPC\n\n- 多语言：语言中立，支持多种语言。\n- 轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架\n- 可插拔\n- IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub\n- 移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。\n- 服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念\n- 负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。\n- 流：Streaming API。\n- 阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。\n- 元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。\n- 标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 \n\n### 服务发现\n\n- 客户端发现：\n直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑\n\n- 服务端发现：\nConsumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失\n\n- 服务网格 service mesh:\n通过sidercar 方式隐式的支持服务发现（待补充）\n\n## 多集群 & 多租户\n\n### 多集群\n\n为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力\n\n### 多租户\n\n在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）\n\n通过不同的租户区分不同的业务功能：\n\n- 红蓝发布\n- 灰度测试\n- 模块测试\n\n> 多租户的概念较为模糊\n> 思考？ 多租户中是怎样实现在上下文中传递多租户信息的?\n","slug":"微服务概述","published":1,"updated":"2021-08-18T14:59:14.146Z","_id":"ckshaj2460001ie8zaa5998l6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"微服务起源\"><a href=\"#微服务起源\" class=\"headerlink\" title=\"微服务起源\"></a>微服务起源</h2><h3 id=\"单体应用的缺点\"><a href=\"#单体应用的缺点\" class=\"headerlink\" title=\"单体应用的缺点\"></a>单体应用的缺点</h3><ul>\n<li>单体应用复杂</li>\n<li>应用无法拓展</li>\n<li>可靠性低</li>\n<li>敏捷开发和快速部署无法完成</li>\n</ul>\n<p><em><strong>由此产生微服务</strong></em></p>\n<blockquote>\n<p>一切争端的开始</p>\n</blockquote>\n<h3 id=\"微服务的演变\"><a href=\"#微服务的演变\" class=\"headerlink\" title=\"微服务的演变\"></a>微服务的演变</h3><p>微服务本质上是对面向架构的模式(SOA)的一种实践</p>\n<p>微服务的特点:</p>\n<ul>\n<li>小即是美</li>\n<li>单一职责</li>\n<li>尽可能早创建原型</li>\n<li>可以执行比效率更重要</li>\n</ul>\n<h3 id=\"微服务的定义\"><a href=\"#微服务的定义\" class=\"headerlink\" title=\"微服务的定义\"></a>微服务的定义</h3><p>围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活</p>\n<p><em><strong>核心： 化繁为简 分而治之</strong></em></p>\n<p>优点：</p>\n<ul>\n<li>原子服务</li>\n<li>独立部署</li>\n<li>隔离部署</li>\n<li>去中心化服务治理</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基础设施建设复杂度高</li>\n<li>分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂</li>\n<li>分布式的分区数据库 对分布式事物等需要做对应的复杂处理</li>\n<li>测试整体的微服务架构复杂</li>\n<li>服务间的依赖 局部升级可能影响整体</li>\n</ul>\n<h2 id=\"微服务设计思路\"><a href=\"#微服务设计思路\" class=\"headerlink\" title=\"微服务设计思路\"></a>微服务设计思路</h2><h3 id=\"组件服务化\"><a href=\"#组件服务化\" class=\"headerlink\" title=\"组件服务化\"></a>组件服务化</h3><ul>\n<li>kit:一个微服务的基础库（框架）</li>\n<li>service: 业务业务代码+kit依赖+第三方组件的依赖</li>\n<li>RPC+message queue: 轻量级通讯</li>\n</ul>\n<h3 id=\"按业务组织服务\"><a href=\"#按业务组织服务\" class=\"headerlink\" title=\"按业务组织服务\"></a>按业务组织服务</h3><p>事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能</p>\n<h3 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h3><ul>\n<li>数据去中心化</li>\n<li>治理去中心化</li>\n<li>技术去中心化</li>\n</ul>\n<h3 id=\"基础设施自动化\"><a href=\"#基础设施自动化\" class=\"headerlink\" title=\"基础设施自动化\"></a>基础设施自动化</h3><ul>\n<li>ci/cd</li>\n<li>auto testing</li>\n<li>在线监控</li>\n</ul>\n<h3 id=\"服务兼容性设计\"><a href=\"#服务兼容性设计\" class=\"headerlink\" title=\"服务兼容性设计\"></a>服务兼容性设计</h3><p>发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。</p>\n<ul>\n<li>负载均衡</li>\n<li>超时控制</li>\n<li>负载保护</li>\n<li>隔离</li>\n<li>限流</li>\n<li>降级</li>\n<li>重试</li>\n<li>熔断</li>\n</ul>\n<h2 id=\"微服务设计\"><a href=\"#微服务设计\" class=\"headerlink\" title=\"微服务设计\"></a>微服务设计</h2><h3 id=\"API-GATEWAY\"><a href=\"#API-GATEWAY\" class=\"headerlink\" title=\"API GATEWAY\"></a>API GATEWAY</h3><blockquote>\n<p>backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务</p>\n</blockquote>\n<h3 id=\"微服务的划分\"><a href=\"#微服务的划分\" class=\"headerlink\" title=\"微服务的划分\"></a>微服务的划分</h3><h3 id=\"微服务的安全\"><a href=\"#微服务的安全\" class=\"headerlink\" title=\"微服务的安全\"></a>微服务的安全</h3><h2 id=\"服务发现-amp-GRPC\"><a href=\"#服务发现-amp-GRPC\" class=\"headerlink\" title=\"服务发现 &amp; GRPC\"></a>服务发现 &amp; GRPC</h2><h3 id=\"GRPC\"><a href=\"#GRPC\" class=\"headerlink\" title=\"GRPC\"></a>GRPC</h3><ul>\n<li>多语言：语言中立，支持多种语言。</li>\n<li>轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架</li>\n<li>可插拔</li>\n<li>IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li>\n<li>移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。</li>\n<li>服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念</li>\n<li>负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。</li>\n<li>流：Streaming API。</li>\n<li>阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。</li>\n<li>元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。</li>\n<li>标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 </li>\n</ul>\n<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><ul>\n<li><p>客户端发现：<br>直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑</p>\n</li>\n<li><p>服务端发现：<br>Consumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失</p>\n</li>\n<li><p>服务网格 service mesh:<br>通过sidercar 方式隐式的支持服务发现（待补充）</p>\n</li>\n</ul>\n<h2 id=\"多集群-amp-多租户\"><a href=\"#多集群-amp-多租户\" class=\"headerlink\" title=\"多集群 &amp; 多租户\"></a>多集群 &amp; 多租户</h2><h3 id=\"多集群\"><a href=\"#多集群\" class=\"headerlink\" title=\"多集群\"></a>多集群</h3><p>为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力</p>\n<h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a>多租户</h3><p>在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）</p>\n<p>通过不同的租户区分不同的业务功能：</p>\n<ul>\n<li>红蓝发布</li>\n<li>灰度测试</li>\n<li>模块测试</li>\n</ul>\n<blockquote>\n<p>多租户的概念较为模糊<br>思考？ 多租户中是怎样实现在上下文中传递多租户信息的?</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微服务起源\"><a href=\"#微服务起源\" class=\"headerlink\" title=\"微服务起源\"></a>微服务起源</h2><h3 id=\"单体应用的缺点\"><a href=\"#单体应用的缺点\" class=\"headerlink\" title=\"单体应用的缺点\"></a>单体应用的缺点</h3><ul>\n<li>单体应用复杂</li>\n<li>应用无法拓展</li>\n<li>可靠性低</li>\n<li>敏捷开发和快速部署无法完成</li>\n</ul>\n<p><em><strong>由此产生微服务</strong></em></p>\n<blockquote>\n<p>一切争端的开始</p>\n</blockquote>\n<h3 id=\"微服务的演变\"><a href=\"#微服务的演变\" class=\"headerlink\" title=\"微服务的演变\"></a>微服务的演变</h3><p>微服务本质上是对面向架构的模式(SOA)的一种实践</p>\n<p>微服务的特点:</p>\n<ul>\n<li>小即是美</li>\n<li>单一职责</li>\n<li>尽可能早创建原型</li>\n<li>可以执行比效率更重要</li>\n</ul>\n<h3 id=\"微服务的定义\"><a href=\"#微服务的定义\" class=\"headerlink\" title=\"微服务的定义\"></a>微服务的定义</h3><p>围绕业务功能构建的，服务关注单一业务，服务间采用轻量级的通信机制，可以全自动独立部署，可以使用不同的编程语言和数据存储技术。微服务架构通过业务拆分实现服务组件化，通过组件组合快速开发系统，业务单一的服务组件又可以独立部署，使得整个系统变得清晰灵活</p>\n<p><em><strong>核心： 化繁为简 分而治之</strong></em></p>\n<p>优点：</p>\n<ul>\n<li>原子服务</li>\n<li>独立部署</li>\n<li>隔离部署</li>\n<li>去中心化服务治理</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基础设施建设复杂度高</li>\n<li>分布式服务间通信机制变得复杂 对不可用节点服务处理变得更加复杂</li>\n<li>分布式的分区数据库 对分布式事物等需要做对应的复杂处理</li>\n<li>测试整体的微服务架构复杂</li>\n<li>服务间的依赖 局部升级可能影响整体</li>\n</ul>\n<h2 id=\"微服务设计思路\"><a href=\"#微服务设计思路\" class=\"headerlink\" title=\"微服务设计思路\"></a>微服务设计思路</h2><h3 id=\"组件服务化\"><a href=\"#组件服务化\" class=\"headerlink\" title=\"组件服务化\"></a>组件服务化</h3><ul>\n<li>kit:一个微服务的基础库（框架）</li>\n<li>service: 业务业务代码+kit依赖+第三方组件的依赖</li>\n<li>RPC+message queue: 轻量级通讯</li>\n</ul>\n<h3 id=\"按业务组织服务\"><a href=\"#按业务组织服务\" class=\"headerlink\" title=\"按业务组织服务\"></a>按业务组织服务</h3><p>事实上传统应用设计架构的分层结构正反映了不同角色的沟通结构。所以若要按微服务的方式来构建应用，也需要对应调整团队的组织架构。每个服务背后的小团队的组织是跨功能的，包含实现业务所需的全面的技能</p>\n<h3 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h3><ul>\n<li>数据去中心化</li>\n<li>治理去中心化</li>\n<li>技术去中心化</li>\n</ul>\n<h3 id=\"基础设施自动化\"><a href=\"#基础设施自动化\" class=\"headerlink\" title=\"基础设施自动化\"></a>基础设施自动化</h3><ul>\n<li>ci/cd</li>\n<li>auto testing</li>\n<li>在线监控</li>\n</ul>\n<h3 id=\"服务兼容性设计\"><a href=\"#服务兼容性设计\" class=\"headerlink\" title=\"服务兼容性设计\"></a>服务兼容性设计</h3><p>发送时要保守，接收时要开放。按照伯斯塔尔法则的思想来设计和实现服务时，发送的数据要更保守，意味着最小化的传送必要的信息，接收时更开放意味着要最大限度的容忍冗余数据，保证兼容性。</p>\n<ul>\n<li>负载均衡</li>\n<li>超时控制</li>\n<li>负载保护</li>\n<li>隔离</li>\n<li>限流</li>\n<li>降级</li>\n<li>重试</li>\n<li>熔断</li>\n</ul>\n<h2 id=\"微服务设计\"><a href=\"#微服务设计\" class=\"headerlink\" title=\"微服务设计\"></a>微服务设计</h2><h3 id=\"API-GATEWAY\"><a href=\"#API-GATEWAY\" class=\"headerlink\" title=\"API GATEWAY\"></a>API GATEWAY</h3><blockquote>\n<p>backend for forntend BFF 可以认为是一种适配服务，将后端的微服务进行适配（主要包括聚合裁剪和格式适配等逻辑），向无线端设备暴露友好和统一的 API，方便无线设备接入访问后端服务</p>\n</blockquote>\n<h3 id=\"微服务的划分\"><a href=\"#微服务的划分\" class=\"headerlink\" title=\"微服务的划分\"></a>微服务的划分</h3><h3 id=\"微服务的安全\"><a href=\"#微服务的安全\" class=\"headerlink\" title=\"微服务的安全\"></a>微服务的安全</h3><h2 id=\"服务发现-amp-GRPC\"><a href=\"#服务发现-amp-GRPC\" class=\"headerlink\" title=\"服务发现 &amp; GRPC\"></a>服务发现 &amp; GRPC</h2><h3 id=\"GRPC\"><a href=\"#GRPC\" class=\"headerlink\" title=\"GRPC\"></a>GRPC</h3><ul>\n<li>多语言：语言中立，支持多种语言。</li>\n<li>轻量级、高性能：序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架</li>\n<li>可插拔</li>\n<li>IDL：基于文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub</li>\n<li>移动端：基于标准的 HTTP/2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。</li>\n<li>服务而非对象 消息而非引用：促进微服务的系统间粗粒度消息交互设计理念</li>\n<li>负载无关的：不同的服务需要使用不同的消息类型和编码，例如 protocol buffers、JSON、XML 和 Thrift。</li>\n<li>流：Streaming API。</li>\n<li>阻塞式和非阻塞式：支持异步和同步处理在客户端和服务端间交互的消息序列。</li>\n<li>元数据交换：常见的横切关注点，如认证或跟踪，依赖数据交换。</li>\n<li>标准化状态码：客户端通常以有限的方式响应 API 调用返回的错误 </li>\n</ul>\n<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><ul>\n<li><p>客户端发现：<br>直连 比服务端服务发现少一次网络跳转 Consumer 需要内置特定的服务发现客户端和发现逻辑</p>\n</li>\n<li><p>服务端发现：<br>Consumer 无需关注服务发现具体细节 只需知道服务的 DNS 域名即可 支持异构语言开发 需要基础设施支撑 多了一次网络跳转 可能有性能损失</p>\n</li>\n<li><p>服务网格 service mesh:<br>通过sidercar 方式隐式的支持服务发现（待补充）</p>\n</li>\n</ul>\n<h2 id=\"多集群-amp-多租户\"><a href=\"#多集群-amp-多租户\" class=\"headerlink\" title=\"多集群 &amp; 多租户\"></a>多集群 &amp; 多租户</h2><h3 id=\"多集群\"><a href=\"#多集群\" class=\"headerlink\" title=\"多集群\"></a>多集群</h3><p>为了保证服务的可用性 已经对异常情况的预处理 使用多集群的方式提高系统的可用能力</p>\n<h3 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a>多租户</h3><p>在一个微服务架构中允许多系统共存是利用微服务稳定性以及模块化最有效的方式之一 这种方式一般被称为多租户（multi-tenancy）</p>\n<p>通过不同的租户区分不同的业务功能：</p>\n<ul>\n<li>红蓝发布</li>\n<li>灰度测试</li>\n<li>模块测试</li>\n</ul>\n<blockquote>\n<p>多租户的概念较为模糊<br>思考？ 多租户中是怎样实现在上下文中传递多租户信息的?</p>\n</blockquote>\n"},{"title":"docker-compose搭建MySql主从和双主","date":"2021-08-23T08:03:58.000Z","index_img":"/img/mysql/mysql.png","banner_img":"/img/mysql/banner-1.jpg","_content":"\n<p class=\"note note-primary\">相信mysql的binlog都不陌生</br>binlog的主要作用就是进行数据同步，今天我们从数据同步的角度搭一下mysql的主从/双主。</p>\n\n## base\n\n以下基于mysql5.7\n\n## 简单了解下binlog\n\n- binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。\n\n- binlog日志包括两类文件：二进制日志索引文件（文件名后缀为.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。\n\n- binlog有三种格式：statement基于sql语句复制、row基于行数据变更的复制、mixed混合前两种格式的复制。\n\n## 搭建主从结构\n\n![mysql主从架构](/img/mysql/mysql-m-s.png)\n\n### 创建docker-compose\n\n```yml\nversion: '3.8'\nservices:\n  mysql-master:\n    container_name: mysql-master \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 13306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/master/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb\n      \n  mysql-slave:\n    container_name: mysql-slave \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 23306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/slave/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb    \n\nnetworks:\n  myweb:\n    driver: bridge\n```\n\n### 创建配置文件\n\n#### 配置文件目录结构\n\n```bash\n[root@xxx MySQLM-S]# tree\n.\n├── docker-compose.yaml\n├── master\n│   └── conf\n│       └── my.cnf\n└── slave\n    └── conf\n        └── my.cnf\n```\n\n#### master/conf/my.cnf 配置文件\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段\nserver-id=1\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\n# log-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\n# auto_increment_offset = 1\n# auto_increment_increment = 2  \n# ####################################################\n\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all  \n```\n\n#### slave/conf/my.cnf 配置文件\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段  \nserver-id=2\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\n# log-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\n# auto_increment_offset = 2\n# auto_increment_increment = 2  \n# ####################################################\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\n# sync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all \n```\n\n### 启动docker-compose并配置主从关系\n\n#### 启动\n\n```bash\ndocker-compose up -d \n```\n\n#### 进入master配置同步账号和权限\n\n```bash\ndocker-compose exec mysql-slave bash\n\nmysql -uroot -p123455\n\n# 查看配置的服务ID\nmysql> show variables like '%server_id%';\n+----------------+-------+\n| Variable_name  | Value |\n+----------------+-------+\n| server_id      | 1     |\n| server_id_bits | 32    |\n+----------------+-------+\n\n# 看master信息 File 和 Position 从服务上要用\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000004 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账户并开启权限\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n```\n\n#### 进入slave服务配置\n\n```bash\ndocker-compose exec docker-slave bash\n\nmysql -uroot -p123456\n\n#查看server_id是否生效\nmysql> show variables like '%server_id%';\n+----------------+-------+\n| Variable_name  | Value |\n+----------------+-------+\n| server_id      | 2     |\n| server_id_bits | 32    |\n+----------------+-------+\n\n# 连接主mysql服务 master_log_file 和 master_log_pos的值要填写主master里查出来的值 注意这里使用的docker-compose 内部服务的端口和ip\nmysql> change master to master_host='mysql-master',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000004', master_log_pos=154,master_connect_retry=30;\n\n\n# 开启slave\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-master\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000004\n          Read_Master_Log_Pos: 778\n               Relay_Log_File: af5556aff9be-relay-bin.000002\n                Relay_Log_Pos: 944\n        Relay_Master_Log_File: mysql-bin.000004\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: mysql\n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 778\n              Relay_Log_Space: 1158\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: 466c4a60-03f4-11ec-a1a1-0242ac160002\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: \n                Auto_Position: 0\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n\n```\n\n<p class=\"note note-success\"> 上面看到 Slave_IO_Running: Yes，Slave_SQL_Running: Yes 表示已经成功开启主从</p>\n\n连接主mysql参数说明：\n\n**master_port**：Master的端口号，指的是容器的端口号\n\n**master_user**：用于数据同步的用户\n\n**master_password**：用于同步的用户的密码\n\n**master_log_file**：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值\n\n**master_log_pos**：从哪个 Position 开始读，即上文中提到的 Position 字段的值\n\n**master_connect_retry**：如果连接失败，重试的时间间隔，单位是秒，默认是60秒\n\n## 搭建双主结构\n\n通过上面主从结构我们可以我们可以大胆设想，要是两个数据库的实例都配置对方为master不就实现的双主么？事实却是如此：\n\n双主结构只需要将双方的配置文件注释掉的地方取消注释掉分别在两台服务器上创同步账号和配置\n\n### 创建docker-compose文件（双主）\n\n这里只更改了docker-compose中服务的名称\n\n```yaml\nversion: '3.8'\nservices:\n  mysql-m1:\n    container_name: mysql-m1\n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 13306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/m1/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb\n      \n  mysql-m2:\n    container_name: mysql-m2 \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 23306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/m2/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb    \n\nnetworks:\n  myweb:\n    driver: bridge\n```\n\n### 创建配置文件(双主)\n\n这里只是将主从中的配置中注释掉的服务添加上\n\n#### 配置文件目录结构（双主）\n\n```bash\n[root@xxx MySQLM-M]# tree\n.\n├── docker-compose.yaml\n├── m1\n│   └── conf\n│       └── my.cnf\n└── m2\n    └── conf\n        └── my.cnf\n```\n\n#### m1/conf/my.cnf\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段\nserver-id=1\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\nlog-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\nauto_increment_offset = 1\nauto_increment_increment = 2  \n# ####################################################\n\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all  \n```\n\n#### m2/conf/my.cnf\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段  \nserver-id=2\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\nlog-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\nauto_increment_offset = 2\nauto_increment_increment = 2  \n# ####################################################\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all \n```\n\n### 启动docker-compose并配置m1和m2的双主\n\n#### 启动（双主）\n\n```bash\ndocker-compose up -d \n```\n\n进入m1和m2下执行下列命令来获取各自的master status 和同步账号\n\nm1:\n\n```bash\ndocker-compose exec mysql-m1 bash\n\nmysql -uroot -p123456\n\n# 查看m1 File和Position\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000005 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账号\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n\n```\n\nm2:\n\n```bash\ndocker-compose exec mysql-m1 bash\n\nmysql -uroot -p123456\n\n# 查看m2 File和Position\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000005 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账号\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n```\n\nm1:\n\n```bash\nmysql> change master to master_host='mysql-m2',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000005', master_log_pos=154,master_connect_retry=30;\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-m2\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000005\n          Read_Master_Log_Pos: 620\n               Relay_Log_File: de7a84f1b7f1-relay-bin.000002\n                Relay_Log_Pos: 786\n        Relay_Master_Log_File: mysql-bin.000005\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 620\n              Relay_Log_Space: 1000\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 2\n                  Master_UUID: de8af5ce-0410-11ec-ab6d-0242ac170003\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n\n```\n\nm2:\n\n```bash\nmysql> change master to master_host='mysql-m1',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000005', master_log_pos=154,master_connect_retry=30;\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-m1\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000005\n          Read_Master_Log_Pos: 1086\n               Relay_Log_File: 65322be4d8a9-relay-bin.000002\n                Relay_Log_Pos: 786\n        Relay_Master_Log_File: mysql-bin.000005\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 1086\n              Relay_Log_Space: 1000\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 1\n                  Master_UUID: de898a82-0410-11ec-9fee-0242ac170002\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n```\n\n<p class=\"noet note-success\">至此双主节点设置完成</p>\n\n## 总结\n\n主从模式多用来进行读写分离\n\n双主模式多用来进行高可用\n\n更复杂的部署可能会部署多master和多slave并用keeplive保证统一访问的模式，这里没探究\n","source":"_posts/docker-compose搭建MySql主从和双主.md","raw":"---\ntitle: docker-compose搭建MySql主从和双主\ndate: 2021-08-23 16:03:58\nindex_img: /img/mysql/mysql.png\nbanner_img: /img/mysql/banner-1.jpg\ncategories:\n- 存储\ntags:\n- mysql\n- 高可用\n- 数据同步\n---\n\n<p class=\"note note-primary\">相信mysql的binlog都不陌生</br>binlog的主要作用就是进行数据同步，今天我们从数据同步的角度搭一下mysql的主从/双主。</p>\n\n## base\n\n以下基于mysql5.7\n\n## 简单了解下binlog\n\n- binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。\n\n- binlog日志包括两类文件：二进制日志索引文件（文件名后缀为.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。\n\n- binlog有三种格式：statement基于sql语句复制、row基于行数据变更的复制、mixed混合前两种格式的复制。\n\n## 搭建主从结构\n\n![mysql主从架构](/img/mysql/mysql-m-s.png)\n\n### 创建docker-compose\n\n```yml\nversion: '3.8'\nservices:\n  mysql-master:\n    container_name: mysql-master \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 13306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/master/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb\n      \n  mysql-slave:\n    container_name: mysql-slave \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 23306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/slave/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb    \n\nnetworks:\n  myweb:\n    driver: bridge\n```\n\n### 创建配置文件\n\n#### 配置文件目录结构\n\n```bash\n[root@xxx MySQLM-S]# tree\n.\n├── docker-compose.yaml\n├── master\n│   └── conf\n│       └── my.cnf\n└── slave\n    └── conf\n        └── my.cnf\n```\n\n#### master/conf/my.cnf 配置文件\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段\nserver-id=1\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\n# log-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\n# auto_increment_offset = 1\n# auto_increment_increment = 2  \n# ####################################################\n\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all  \n```\n\n#### slave/conf/my.cnf 配置文件\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段  \nserver-id=2\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\n# log-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\n# auto_increment_offset = 2\n# auto_increment_increment = 2  \n# ####################################################\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\n# sync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all \n```\n\n### 启动docker-compose并配置主从关系\n\n#### 启动\n\n```bash\ndocker-compose up -d \n```\n\n#### 进入master配置同步账号和权限\n\n```bash\ndocker-compose exec mysql-slave bash\n\nmysql -uroot -p123455\n\n# 查看配置的服务ID\nmysql> show variables like '%server_id%';\n+----------------+-------+\n| Variable_name  | Value |\n+----------------+-------+\n| server_id      | 1     |\n| server_id_bits | 32    |\n+----------------+-------+\n\n# 看master信息 File 和 Position 从服务上要用\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000004 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账户并开启权限\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n```\n\n#### 进入slave服务配置\n\n```bash\ndocker-compose exec docker-slave bash\n\nmysql -uroot -p123456\n\n#查看server_id是否生效\nmysql> show variables like '%server_id%';\n+----------------+-------+\n| Variable_name  | Value |\n+----------------+-------+\n| server_id      | 2     |\n| server_id_bits | 32    |\n+----------------+-------+\n\n# 连接主mysql服务 master_log_file 和 master_log_pos的值要填写主master里查出来的值 注意这里使用的docker-compose 内部服务的端口和ip\nmysql> change master to master_host='mysql-master',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000004', master_log_pos=154,master_connect_retry=30;\n\n\n# 开启slave\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-master\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000004\n          Read_Master_Log_Pos: 778\n               Relay_Log_File: af5556aff9be-relay-bin.000002\n                Relay_Log_Pos: 944\n        Relay_Master_Log_File: mysql-bin.000004\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: mysql\n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 778\n              Relay_Log_Space: 1158\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: 466c4a60-03f4-11ec-a1a1-0242ac160002\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: \n                Auto_Position: 0\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n\n```\n\n<p class=\"note note-success\"> 上面看到 Slave_IO_Running: Yes，Slave_SQL_Running: Yes 表示已经成功开启主从</p>\n\n连接主mysql参数说明：\n\n**master_port**：Master的端口号，指的是容器的端口号\n\n**master_user**：用于数据同步的用户\n\n**master_password**：用于同步的用户的密码\n\n**master_log_file**：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值\n\n**master_log_pos**：从哪个 Position 开始读，即上文中提到的 Position 字段的值\n\n**master_connect_retry**：如果连接失败，重试的时间间隔，单位是秒，默认是60秒\n\n## 搭建双主结构\n\n通过上面主从结构我们可以我们可以大胆设想，要是两个数据库的实例都配置对方为master不就实现的双主么？事实却是如此：\n\n双主结构只需要将双方的配置文件注释掉的地方取消注释掉分别在两台服务器上创同步账号和配置\n\n### 创建docker-compose文件（双主）\n\n这里只更改了docker-compose中服务的名称\n\n```yaml\nversion: '3.8'\nservices:\n  mysql-m1:\n    container_name: mysql-m1\n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 13306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/m1/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb\n      \n  mysql-m2:\n    container_name: mysql-m2 \n    image: mysql:5.7.31\n    restart: always\n    ports:\n      - 23306:3306 \n    privileged: true\n    volumes:\n      # 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射\n      - $PWD/m2/conf/my.cnf:/etc/mysql/my.cnf\n    environment:\n      MYSQL_ROOT_PASSWORD: \"123456\"\n    command: [\n        '--character-set-server=utf8mb4',\n        '--collation-server=utf8mb4_general_ci',\n        '--max_connections=3000'\n    ]\n    networks:\n      - myweb    \n\nnetworks:\n  myweb:\n    driver: bridge\n```\n\n### 创建配置文件(双主)\n\n这里只是将主从中的配置中注释掉的服务添加上\n\n#### 配置文件目录结构（双主）\n\n```bash\n[root@xxx MySQLM-M]# tree\n.\n├── docker-compose.yaml\n├── m1\n│   └── conf\n│       └── my.cnf\n└── m2\n    └── conf\n        └── my.cnf\n```\n\n#### m1/conf/my.cnf\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段\nserver-id=1\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\nlog-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\nauto_increment_offset = 1\nauto_increment_increment = 2  \n# ####################################################\n\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all  \n```\n\n#### m2/conf/my.cnf\n\n```bash\n[mysqld]\n# [必须]服务器唯一ID，默认是1，一般取IP最后一段  \nserver-id=2\n\n\n# ###################################################\n# 如果当前实例既做主库又做从库次选线必须开启\nlog-slave-updates = true \n\n# 自增长ID\n# 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题\nauto_increment_offset = 2\nauto_increment_increment = 2  \n# ####################################################\n\n# [必须]启用二进制日志\nlog-bin=mysql-bin \n\n# 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n\n# 确保binlog日志写入后与硬盘同步\nsync_binlog = 1\n\n# 设置需要同步的数据库 binlog_do_db = 数据库名； \n# 如果是多个同步库，就以此格式另写几行即可。\n# 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库\n# binlog_do_db = test #需要同步test数据库。\n\n# 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；\n# 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。\n# replicate-do-db = test；\n\n# 跳过所有的错误，继续执行复制操作\nslave-skip-errors = all \n```\n\n### 启动docker-compose并配置m1和m2的双主\n\n#### 启动（双主）\n\n```bash\ndocker-compose up -d \n```\n\n进入m1和m2下执行下列命令来获取各自的master status 和同步账号\n\nm1:\n\n```bash\ndocker-compose exec mysql-m1 bash\n\nmysql -uroot -p123456\n\n# 查看m1 File和Position\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000005 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账号\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n\n```\n\nm2:\n\n```bash\ndocker-compose exec mysql-m1 bash\n\nmysql -uroot -p123456\n\n# 查看m2 File和Position\nmysql> show master status;\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000005 |      154 |              | mysql            |                   |\n+------------------+----------+--------------+------------------+-------------------+\n\n# 创建同步账号\nmysql> grant replication slave,replication client on *.* to 'slave'@'%' identified by \"123456\";\nmysql> flush privileges;\n```\n\nm1:\n\n```bash\nmysql> change master to master_host='mysql-m2',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000005', master_log_pos=154,master_connect_retry=30;\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-m2\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000005\n          Read_Master_Log_Pos: 620\n               Relay_Log_File: de7a84f1b7f1-relay-bin.000002\n                Relay_Log_Pos: 786\n        Relay_Master_Log_File: mysql-bin.000005\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 620\n              Relay_Log_Space: 1000\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 2\n                  Master_UUID: de8af5ce-0410-11ec-ab6d-0242ac170003\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n\n```\n\nm2:\n\n```bash\nmysql> change master to master_host='mysql-m1',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000005', master_log_pos=154,master_connect_retry=30;\n\nmysql> start slave;\n\nmysql> show slave status \\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: mysql-m1\n                  Master_User: slave\n                  Master_Port: 3306\n                Connect_Retry: 30\n              Master_Log_File: mysql-bin.000005\n          Read_Master_Log_Pos: 1086\n               Relay_Log_File: 65322be4d8a9-relay-bin.000002\n                Relay_Log_Pos: 786\n        Relay_Master_Log_File: mysql-bin.000005\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 1086\n              Relay_Log_Space: 1000\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 1\n                  Master_UUID: de898a82-0410-11ec-9fee-0242ac170002\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n```\n\n<p class=\"noet note-success\">至此双主节点设置完成</p>\n\n## 总结\n\n主从模式多用来进行读写分离\n\n双主模式多用来进行高可用\n\n更复杂的部署可能会部署多master和多slave并用keeplive保证统一访问的模式，这里没探究\n","slug":"docker-compose搭建MySql主从和双主","published":1,"updated":"2021-08-23T14:00:18.942Z","_id":"cksoctoh00000mn8z5wzr74op","comments":1,"layout":"post","photos":[],"link":"","content":"<p class=\"note note-primary\">相信mysql的binlog都不陌生</br>binlog的主要作用就是进行数据同步，今天我们从数据同步的角度搭一下mysql的主从/双主。</p>\n\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><p>以下基于mysql5.7</p>\n<h2 id=\"简单了解下binlog\"><a href=\"#简单了解下binlog\" class=\"headerlink\" title=\"简单了解下binlog\"></a>简单了解下binlog</h2><ul>\n<li><p>binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。</p>\n</li>\n<li><p>binlog日志包括两类文件：二进制日志索引文件（文件名后缀为.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。</p>\n</li>\n<li><p>binlog有三种格式：statement基于sql语句复制、row基于行数据变更的复制、mixed混合前两种格式的复制。</p>\n</li>\n</ul>\n<h2 id=\"搭建主从结构\"><a href=\"#搭建主从结构\" class=\"headerlink\" title=\"搭建主从结构\"></a>搭建主从结构</h2><p><img src=\"/img/mysql/mysql-m-s.png\" alt=\"mysql主从架构\"></p>\n<h3 id=\"创建docker-compose\"><a href=\"#创建docker-compose\" class=\"headerlink\" title=\"创建docker-compose\"></a>创建docker-compose</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql-master:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-master</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">13306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/master/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span><br>      <br>  <span class=\"hljs-attr\">mysql-slave:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-slave</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">23306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/slave/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span>    <br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">myweb:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><h4 id=\"配置文件目录结构\"><a href=\"#配置文件目录结构\" class=\"headerlink\" title=\"配置文件目录结构\"></a>配置文件目录结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[root@xxx MySQLM-S]<span class=\"hljs-comment\"># tree</span><br>.<br>├── docker-compose.yaml<br>├── master<br>│   └── conf<br>│       └── my.cnf<br>└── slave<br>    └── conf<br>        └── my.cnf<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"master-conf-my-cnf-配置文件\"><a href=\"#master-conf-my-cnf-配置文件\" class=\"headerlink\" title=\"master/conf/my.cnf 配置文件\"></a>master/conf/my.cnf 配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class=\"hljs-comment\"># log-slave-updates = true </span><br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class=\"hljs-comment\"># auto_increment_offset = 1</span><br><span class=\"hljs-comment\"># auto_increment_increment = 2  </span><br><span class=\"hljs-comment\"># ####################################################</span><br><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"slave-conf-my-cnf-配置文件\"><a href=\"#slave-conf-my-cnf-配置文件\" class=\"headerlink\" title=\"slave/conf/my.cnf 配置文件\"></a>slave/conf/my.cnf 配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class=\"hljs-comment\"># log-slave-updates = true </span><br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class=\"hljs-comment\"># auto_increment_offset = 2</span><br><span class=\"hljs-comment\"># auto_increment_increment = 2  </span><br><span class=\"hljs-comment\"># ####################################################</span><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br><span class=\"hljs-comment\"># sync_binlog = 1</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"启动docker-compose并配置主从关系\"><a href=\"#启动docker-compose并配置主从关系\" class=\"headerlink\" title=\"启动docker-compose并配置主从关系\"></a>启动docker-compose并配置主从关系</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose up -d <br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"进入master配置同步账号和权限\"><a href=\"#进入master配置同步账号和权限\" class=\"headerlink\" title=\"进入master配置同步账号和权限\"></a>进入master配置同步账号和权限</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-slave bash<br><br>mysql -uroot -p123455<br><br><span class=\"hljs-comment\"># 查看配置的服务ID</span><br>mysql&gt; show variables like <span class=\"hljs-string\">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 1     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class=\"hljs-comment\"># 看master信息 File 和 Position 从服务上要用</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000004 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账户并开启权限</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"进入slave服务配置\"><a href=\"#进入slave服务配置\" class=\"headerlink\" title=\"进入slave服务配置\"></a>进入slave服务配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> docker-slave bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\">#查看server_id是否生效</span><br>mysql&gt; show variables like <span class=\"hljs-string\">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 2     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class=\"hljs-comment\"># 连接主mysql服务 master_log_file 和 master_log_pos的值要填写主master里查出来的值 注意这里使用的docker-compose 内部服务的端口和ip</span><br>mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-master&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000004&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br><br><span class=\"hljs-comment\"># 开启slave</span><br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-master<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000004<br>          Read_Master_Log_Pos: 778<br>               Relay_Log_File: af5556aff9be-relay-bin.000002<br>                Relay_Log_Pos: 944<br>        Relay_Master_Log_File: mysql-bin.000004<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB: <br>          Replicate_Ignore_DB: mysql<br>           Replicate_Do_Table: <br>       Replicate_Ignore_Table: <br>      Replicate_Wild_Do_Table: <br>  Replicate_Wild_Ignore_Table: <br>                   Last_Errno: 0<br>                   Last_Error: <br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 778<br>              Relay_Log_Space: 1158<br>              Until_Condition: None<br>               Until_Log_File: <br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File: <br>           Master_SSL_CA_Path: <br>              Master_SSL_Cert: <br>            Master_SSL_Cipher: <br>               Master_SSL_Key: <br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error: <br>               Last_SQL_Errno: 0<br>               Last_SQL_Error: <br>  Replicate_Ignore_Server_Ids: <br>             Master_Server_Id: 1<br>                  Master_UUID: 466c4a60-03f4-11ec-a1a1-0242ac160002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind: <br>      Last_IO_Error_Timestamp: <br>     Last_SQL_Error_Timestamp: <br>               Master_SSL_Crl: <br>           Master_SSL_Crlpath: <br>           Retrieved_Gtid_Set: <br>            Executed_Gtid_Set: <br>                Auto_Position: 0<br>         Replicate_Rewrite_DB: <br>                 Channel_Name: <br>           Master_TLS_Version: <br><br></code></pre></div></td></tr></table></figure>\n\n<p class=\"note note-success\"> 上面看到 Slave_IO_Running: Yes，Slave_SQL_Running: Yes 表示已经成功开启主从</p>\n\n<p>连接主mysql参数说明：</p>\n<p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p>\n<p><strong>master_user</strong>：用于数据同步的用户</p>\n<p><strong>master_password</strong>：用于同步的用户的密码</p>\n<p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p>\n<p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p>\n<p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p>\n<h2 id=\"搭建双主结构\"><a href=\"#搭建双主结构\" class=\"headerlink\" title=\"搭建双主结构\"></a>搭建双主结构</h2><p>通过上面主从结构我们可以我们可以大胆设想，要是两个数据库的实例都配置对方为master不就实现的双主么？事实却是如此：</p>\n<p>双主结构只需要将双方的配置文件注释掉的地方取消注释掉分别在两台服务器上创同步账号和配置</p>\n<h3 id=\"创建docker-compose文件（双主）\"><a href=\"#创建docker-compose文件（双主）\" class=\"headerlink\" title=\"创建docker-compose文件（双主）\"></a>创建docker-compose文件（双主）</h3><p>这里只更改了docker-compose中服务的名称</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql-m1:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-m1</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">13306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/m1/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span><br>      <br>  <span class=\"hljs-attr\">mysql-m2:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-m2</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">23306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/m2/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span>    <br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">myweb:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"创建配置文件-双主\"><a href=\"#创建配置文件-双主\" class=\"headerlink\" title=\"创建配置文件(双主)\"></a>创建配置文件(双主)</h3><p>这里只是将主从中的配置中注释掉的服务添加上</p>\n<h4 id=\"配置文件目录结构（双主）\"><a href=\"#配置文件目录结构（双主）\" class=\"headerlink\" title=\"配置文件目录结构（双主）\"></a>配置文件目录结构（双主）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[root@xxx MySQLM-M]<span class=\"hljs-comment\"># tree</span><br>.<br>├── docker-compose.yaml<br>├── m1<br>│   └── conf<br>│       └── my.cnf<br>└── m2<br>    └── conf<br>        └── my.cnf<br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"m1-conf-my-cnf\"><a href=\"#m1-conf-my-cnf\" class=\"headerlink\" title=\"m1/conf/my.cnf\"></a>m1/conf/my.cnf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class=\"hljs-literal\">true</span> <br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 1<br>auto_increment_increment = 2  <br><span class=\"hljs-comment\"># ####################################################</span><br><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></div></td></tr></table></figure>\n\n<h4 id=\"m2-conf-my-cnf\"><a href=\"#m2-conf-my-cnf\" class=\"headerlink\" title=\"m2/conf/my.cnf\"></a>m2/conf/my.cnf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class=\"hljs-literal\">true</span> <br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 2<br>auto_increment_increment = 2  <br><span class=\"hljs-comment\"># ####################################################</span><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"启动docker-compose并配置m1和m2的双主\"><a href=\"#启动docker-compose并配置m1和m2的双主\" class=\"headerlink\" title=\"启动docker-compose并配置m1和m2的双主\"></a>启动docker-compose并配置m1和m2的双主</h3><h4 id=\"启动（双主）\"><a href=\"#启动（双主）\" class=\"headerlink\" title=\"启动（双主）\"></a>启动（双主）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose up -d <br></code></pre></div></td></tr></table></figure>\n\n<p>进入m1和m2下执行下列命令来获取各自的master status 和同步账号</p>\n<p>m1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\"># 查看m1 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br><br></code></pre></div></td></tr></table></figure>\n\n<p>m2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\"># 查看m2 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></div></td></tr></table></figure>\n\n<p>m1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-m2&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-m2<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 620<br>               Relay_Log_File: de7a84f1b7f1-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 620<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 2<br>                  Master_UUID: de8af5ce-0410-11ec-ab6d-0242ac170003<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br><br></code></pre></div></td></tr></table></figure>\n\n<p>m2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-m1&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-m1<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 1086<br>               Relay_Log_File: 65322be4d8a9-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 1086<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 1<br>                  Master_UUID: de898a82-0410-11ec-9fee-0242ac170002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br></code></pre></div></td></tr></table></figure>\n\n<p class=\"noet note-success\">至此双主节点设置完成</p>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>主从模式多用来进行读写分离</p>\n<p>双主模式多用来进行高可用</p>\n<p>更复杂的部署可能会部署多master和多slave并用keeplive保证统一访问的模式，这里没探究</p>\n","site":{"data":{}},"excerpt":"","more":"<p class=\"note note-primary\">相信mysql的binlog都不陌生</br>binlog的主要作用就是进行数据同步，今天我们从数据同步的角度搭一下mysql的主从/双主。</p>\n\n<h2 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h2><p>以下基于mysql5.7</p>\n<h2 id=\"简单了解下binlog\"><a href=\"#简单了解下binlog\" class=\"headerlink\" title=\"简单了解下binlog\"></a>简单了解下binlog</h2><ul>\n<li><p>binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。</p>\n</li>\n<li><p>binlog日志包括两类文件：二进制日志索引文件（文件名后缀为.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。</p>\n</li>\n<li><p>binlog有三种格式：statement基于sql语句复制、row基于行数据变更的复制、mixed混合前两种格式的复制。</p>\n</li>\n</ul>\n<h2 id=\"搭建主从结构\"><a href=\"#搭建主从结构\" class=\"headerlink\" title=\"搭建主从结构\"></a>搭建主从结构</h2><p><img src=\"/img/mysql/mysql-m-s.png\" alt=\"mysql主从架构\"></p>\n<h3 id=\"创建docker-compose\"><a href=\"#创建docker-compose\" class=\"headerlink\" title=\"创建docker-compose\"></a>创建docker-compose</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql-master:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-master</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">13306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/master/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span><br>      <br>  <span class=\"hljs-attr\">mysql-slave:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-slave</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">23306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/slave/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span>    <br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">myweb:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><h4 id=\"配置文件目录结构\"><a href=\"#配置文件目录结构\" class=\"headerlink\" title=\"配置文件目录结构\"></a>配置文件目录结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[root@xxx MySQLM-S]<span class=\"hljs-comment\"># tree</span><br>.<br>├── docker-compose.yaml<br>├── master<br>│   └── conf<br>│       └── my.cnf<br>└── slave<br>    └── conf<br>        └── my.cnf<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"master-conf-my-cnf-配置文件\"><a href=\"#master-conf-my-cnf-配置文件\" class=\"headerlink\" title=\"master/conf/my.cnf 配置文件\"></a>master/conf/my.cnf 配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class=\"hljs-comment\"># log-slave-updates = true </span><br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class=\"hljs-comment\"># auto_increment_offset = 1</span><br><span class=\"hljs-comment\"># auto_increment_increment = 2  </span><br><span class=\"hljs-comment\"># ####################################################</span><br><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"slave-conf-my-cnf-配置文件\"><a href=\"#slave-conf-my-cnf-配置文件\" class=\"headerlink\" title=\"slave/conf/my.cnf 配置文件\"></a>slave/conf/my.cnf 配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br><span class=\"hljs-comment\"># log-slave-updates = true </span><br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br><span class=\"hljs-comment\"># auto_increment_offset = 2</span><br><span class=\"hljs-comment\"># auto_increment_increment = 2  </span><br><span class=\"hljs-comment\"># ####################################################</span><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br><span class=\"hljs-comment\"># sync_binlog = 1</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动docker-compose并配置主从关系\"><a href=\"#启动docker-compose并配置主从关系\" class=\"headerlink\" title=\"启动docker-compose并配置主从关系\"></a>启动docker-compose并配置主从关系</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"进入master配置同步账号和权限\"><a href=\"#进入master配置同步账号和权限\" class=\"headerlink\" title=\"进入master配置同步账号和权限\"></a>进入master配置同步账号和权限</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-slave bash<br><br>mysql -uroot -p123455<br><br><span class=\"hljs-comment\"># 查看配置的服务ID</span><br>mysql&gt; show variables like <span class=\"hljs-string\">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 1     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class=\"hljs-comment\"># 看master信息 File 和 Position 从服务上要用</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000004 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账户并开启权限</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"进入slave服务配置\"><a href=\"#进入slave服务配置\" class=\"headerlink\" title=\"进入slave服务配置\"></a>进入slave服务配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> docker-slave bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\">#查看server_id是否生效</span><br>mysql&gt; show variables like <span class=\"hljs-string\">&#x27;%server_id%&#x27;</span>;<br>+----------------+-------+<br>| Variable_name  | Value |<br>+----------------+-------+<br>| server_id      | 2     |<br>| server_id_bits | 32    |<br>+----------------+-------+<br><br><span class=\"hljs-comment\"># 连接主mysql服务 master_log_file 和 master_log_pos的值要填写主master里查出来的值 注意这里使用的docker-compose 内部服务的端口和ip</span><br>mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-master&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000004&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br><br><span class=\"hljs-comment\"># 开启slave</span><br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-master<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000004<br>          Read_Master_Log_Pos: 778<br>               Relay_Log_File: af5556aff9be-relay-bin.000002<br>                Relay_Log_Pos: 944<br>        Relay_Master_Log_File: mysql-bin.000004<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB: <br>          Replicate_Ignore_DB: mysql<br>           Replicate_Do_Table: <br>       Replicate_Ignore_Table: <br>      Replicate_Wild_Do_Table: <br>  Replicate_Wild_Ignore_Table: <br>                   Last_Errno: 0<br>                   Last_Error: <br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 778<br>              Relay_Log_Space: 1158<br>              Until_Condition: None<br>               Until_Log_File: <br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File: <br>           Master_SSL_CA_Path: <br>              Master_SSL_Cert: <br>            Master_SSL_Cipher: <br>               Master_SSL_Key: <br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error: <br>               Last_SQL_Errno: 0<br>               Last_SQL_Error: <br>  Replicate_Ignore_Server_Ids: <br>             Master_Server_Id: 1<br>                  Master_UUID: 466c4a60-03f4-11ec-a1a1-0242ac160002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind: <br>      Last_IO_Error_Timestamp: <br>     Last_SQL_Error_Timestamp: <br>               Master_SSL_Crl: <br>           Master_SSL_Crlpath: <br>           Retrieved_Gtid_Set: <br>            Executed_Gtid_Set: <br>                Auto_Position: 0<br>         Replicate_Rewrite_DB: <br>                 Channel_Name: <br>           Master_TLS_Version: <br><br></code></pre></td></tr></table></figure>\n\n<p class=\"note note-success\"> 上面看到 Slave_IO_Running: Yes，Slave_SQL_Running: Yes 表示已经成功开启主从</p>\n\n<p>连接主mysql参数说明：</p>\n<p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p>\n<p><strong>master_user</strong>：用于数据同步的用户</p>\n<p><strong>master_password</strong>：用于同步的用户的密码</p>\n<p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p>\n<p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p>\n<p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p>\n<h2 id=\"搭建双主结构\"><a href=\"#搭建双主结构\" class=\"headerlink\" title=\"搭建双主结构\"></a>搭建双主结构</h2><p>通过上面主从结构我们可以我们可以大胆设想，要是两个数据库的实例都配置对方为master不就实现的双主么？事实却是如此：</p>\n<p>双主结构只需要将双方的配置文件注释掉的地方取消注释掉分别在两台服务器上创同步账号和配置</p>\n<h3 id=\"创建docker-compose文件（双主）\"><a href=\"#创建docker-compose文件（双主）\" class=\"headerlink\" title=\"创建docker-compose文件（双主）\"></a>创建docker-compose文件（双主）</h3><p>这里只更改了docker-compose中服务的名称</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.8&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">mysql-m1:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-m1</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">13306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/m1/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span><br>      <br>  <span class=\"hljs-attr\">mysql-m2:</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">mysql-m2</span> <br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:5.7.31</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">23306</span><span class=\"hljs-string\">:3306</span> <br>    <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-comment\"># 这个只对mysql主从进行验证 没有持久化配置以及日志相关的映射</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">$PWD/m2/conf/my.cnf:/etc/mysql/my.cnf</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"hljs-string\">&quot;123456&quot;</span><br>    <span class=\"hljs-attr\">command:</span> [<br>        <span class=\"hljs-string\">&#x27;--character-set-server=utf8mb4&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--collation-server=utf8mb4_general_ci&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;--max_connections=3000&#x27;</span><br>    ]<br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">myweb</span>    <br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">myweb:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建配置文件-双主\"><a href=\"#创建配置文件-双主\" class=\"headerlink\" title=\"创建配置文件(双主)\"></a>创建配置文件(双主)</h3><p>这里只是将主从中的配置中注释掉的服务添加上</p>\n<h4 id=\"配置文件目录结构（双主）\"><a href=\"#配置文件目录结构（双主）\" class=\"headerlink\" title=\"配置文件目录结构（双主）\"></a>配置文件目录结构（双主）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[root@xxx MySQLM-M]<span class=\"hljs-comment\"># tree</span><br>.<br>├── docker-compose.yaml<br>├── m1<br>│   └── conf<br>│       └── my.cnf<br>└── m2<br>    └── conf<br>        └── my.cnf<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"m1-conf-my-cnf\"><a href=\"#m1-conf-my-cnf\" class=\"headerlink\" title=\"m1/conf/my.cnf\"></a>m1/conf/my.cnf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br>server-id=1<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class=\"hljs-literal\">true</span> <br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 1<br>auto_increment_increment = 2  <br><span class=\"hljs-comment\"># ####################################################</span><br><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all  <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"m2-conf-my-cnf\"><a href=\"#m2-conf-my-cnf\" class=\"headerlink\" title=\"m2/conf/my.cnf\"></a>m2/conf/my.cnf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[mysqld]<br><span class=\"hljs-comment\"># [必须]服务器唯一ID，默认是1，一般取IP最后一段  </span><br>server-id=2<br><br><br><span class=\"hljs-comment\"># ###################################################</span><br><span class=\"hljs-comment\"># 如果当前实例既做主库又做从库次选线必须开启</span><br>log-slave-updates = <span class=\"hljs-literal\">true</span> <br><br><span class=\"hljs-comment\"># 自增长ID</span><br><span class=\"hljs-comment\"># 特殊说明 当该实例为双主的架构时要特殊配置 以避免自增id冲突的问题</span><br>auto_increment_offset = 2<br>auto_increment_increment = 2  <br><span class=\"hljs-comment\"># ####################################################</span><br><br><span class=\"hljs-comment\"># [必须]启用二进制日志</span><br>log-bin=mysql-bin <br><br><span class=\"hljs-comment\"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br>binlog-ignore-db=mysql<br><br><span class=\"hljs-comment\"># 确保binlog日志写入后与硬盘同步</span><br>sync_binlog = 1<br><br><span class=\"hljs-comment\"># 设置需要同步的数据库 binlog_do_db = 数据库名； </span><br><span class=\"hljs-comment\"># 如果是多个同步库，就以此格式另写几行即可。</span><br><span class=\"hljs-comment\"># 如果不指明对某个具体库同步，表示同步所有库。除了binlog-ignore-db设置的忽略的库</span><br><span class=\"hljs-comment\"># binlog_do_db = test #需要同步test数据库。</span><br><br><span class=\"hljs-comment\"># 设置需要同步的数据库，主服务器上不限定数据库，在从服务器上限定replicate-do-db = 数据库名；</span><br><span class=\"hljs-comment\"># 如果不指明同步哪些库，就去掉这行，表示所有库的同步（除了ignore忽略的库）。</span><br><span class=\"hljs-comment\"># replicate-do-db = test；</span><br><br><span class=\"hljs-comment\"># 跳过所有的错误，继续执行复制操作</span><br>slave-skip-errors = all <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"启动docker-compose并配置m1和m2的双主\"><a href=\"#启动docker-compose并配置m1和m2的双主\" class=\"headerlink\" title=\"启动docker-compose并配置m1和m2的双主\"></a>启动docker-compose并配置m1和m2的双主</h3><h4 id=\"启动（双主）\"><a href=\"#启动（双主）\" class=\"headerlink\" title=\"启动（双主）\"></a>启动（双主）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up -d <br></code></pre></td></tr></table></figure>\n\n<p>进入m1和m2下执行下列命令来获取各自的master status 和同步账号</p>\n<p>m1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\"># 查看m1 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br><br></code></pre></td></tr></table></figure>\n\n<p>m2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose <span class=\"hljs-built_in\">exec</span> mysql-m1 bash<br><br>mysql -uroot -p123456<br><br><span class=\"hljs-comment\"># 查看m2 File和Position</span><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000005 |      154 |              | mysql            |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br><br><span class=\"hljs-comment\"># 创建同步账号</span><br>mysql&gt; grant replication slave,replication client on *.* to <span class=\"hljs-string\">&#x27;slave&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified by <span class=\"hljs-string\">&quot;123456&quot;</span>;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure>\n\n<p>m1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-m2&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-m2<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 620<br>               Relay_Log_File: de7a84f1b7f1-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 620<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 2<br>                  Master_UUID: de8af5ce-0410-11ec-ab6d-0242ac170003<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br><br></code></pre></td></tr></table></figure>\n\n<p>m2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; change master to master_host=<span class=\"hljs-string\">&#x27;mysql-m1&#x27;</span>,master_user=<span class=\"hljs-string\">&#x27;slave&#x27;</span>,master_password=<span class=\"hljs-string\">&#x27;123456&#x27;</span>,master_port=3306,master_log_file=<span class=\"hljs-string\">&#x27;mysql-bin.000005&#x27;</span>, master_log_pos=154,master_connect_retry=30;<br><br>mysql&gt; start slave;<br><br>mysql&gt; show slave status \\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class=\"hljs-keyword\">for</span> master to send event<br>                  Master_Host: mysql-m1<br>                  Master_User: slave<br>                  Master_Port: 3306<br>                Connect_Retry: 30<br>              Master_Log_File: mysql-bin.000005<br>          Read_Master_Log_Pos: 1086<br>               Relay_Log_File: 65322be4d8a9-relay-bin.000002<br>                Relay_Log_Pos: 786<br>        Relay_Master_Log_File: mysql-bin.000005<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br>       Replicate_Ignore_Table:<br>      Replicate_Wild_Do_Table:<br>  Replicate_Wild_Ignore_Table:<br>                   Last_Errno: 0<br>                   Last_Error:<br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 1086<br>              Relay_Log_Space: 1000<br>              Until_Condition: None<br>               Until_Log_File:<br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File:<br>           Master_SSL_CA_Path:<br>              Master_SSL_Cert:<br>            Master_SSL_Cipher:<br>               Master_SSL_Key:<br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error:<br>               Last_SQL_Errno: 0<br>               Last_SQL_Error:<br>  Replicate_Ignore_Server_Ids:<br>             Master_Server_Id: 1<br>                  Master_UUID: de898a82-0410-11ec-9fee-0242ac170002<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has <span class=\"hljs-built_in\">read</span> all relay <span class=\"hljs-built_in\">log</span>; waiting <span class=\"hljs-keyword\">for</span> more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind:<br>      Last_IO_Error_Timestamp:<br>     Last_SQL_Error_Timestamp:<br>               Master_SSL_Crl:<br>           Master_SSL_Crlpath:<br>           Retrieved_Gtid_Set:<br>            Executed_Gtid_Set:<br>                Auto_Position: 0<br>         Replicate_Rewrite_DB:<br>                 Channel_Name:<br>           Master_TLS_Version:<br></code></pre></td></tr></table></figure>\n\n<p class=\"noet note-success\">至此双主节点设置完成</p>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>主从模式多用来进行读写分离</p>\n<p>双主模式多用来进行高可用</p>\n<p>更复杂的部署可能会部署多master和多slave并用keeplive保证统一访问的模式，这里没探究</p>\n"},{"title":"MySQL事务的隔离性和隔离级别","date":"2021-08-25T09:51:27.000Z","index_img":null,"banner_img":null,"_content":"\n## 用人话说说事务和特性？\n\n## 事务怎么有这么多的隔离级别？\n\n## MVCC是咋回事？\n\n## 穿针引线\n","source":"_drafts/MySQL事务的隔离性和隔离级别.md","raw":"---\ntitle: MySQL事务的隔离性和隔离级别\ndate: 2021-08-25 17:51:27\nindex_img:\nbanner_img:\ncategories:\n- 存储\ntags:\n- mysql\n- ACID\n- mvcc\n---\n\n## 用人话说说事务和特性？\n\n## 事务怎么有这么多的隔离级别？\n\n## MVCC是咋回事？\n\n## 穿针引线\n","slug":"MySQL事务的隔离性和隔离级别","published":0,"updated":"2021-08-25T13:13:53.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksriqm8v0000c88zfvb4dus5","content":"<h2 id=\"用人话说说事务和特性？\"><a href=\"#用人话说说事务和特性？\" class=\"headerlink\" title=\"用人话说说事务和特性？\"></a>用人话说说事务和特性？</h2><h2 id=\"事务怎么有这么多的隔离级别？\"><a href=\"#事务怎么有这么多的隔离级别？\" class=\"headerlink\" title=\"事务怎么有这么多的隔离级别？\"></a>事务怎么有这么多的隔离级别？</h2><h2 id=\"MVCC是咋回事？\"><a href=\"#MVCC是咋回事？\" class=\"headerlink\" title=\"MVCC是咋回事？\"></a>MVCC是咋回事？</h2><h2 id=\"穿针引线\"><a href=\"#穿针引线\" class=\"headerlink\" title=\"穿针引线\"></a>穿针引线</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用人话说说事务和特性？\"><a href=\"#用人话说说事务和特性？\" class=\"headerlink\" title=\"用人话说说事务和特性？\"></a>用人话说说事务和特性？</h2><h2 id=\"事务怎么有这么多的隔离级别？\"><a href=\"#事务怎么有这么多的隔离级别？\" class=\"headerlink\" title=\"事务怎么有这么多的隔离级别？\"></a>事务怎么有这么多的隔离级别？</h2><h2 id=\"MVCC是咋回事？\"><a href=\"#MVCC是咋回事？\" class=\"headerlink\" title=\"MVCC是咋回事？\"></a>MVCC是咋回事？</h2><h2 id=\"穿针引线\"><a href=\"#穿针引线\" class=\"headerlink\" title=\"穿针引线\"></a>穿针引线</h2>"},{"title":"设置MySQL的隔离级别","date":"2021-08-25T15:00:28.000Z","index_img":"/img/mysql/mysql.png","banner_img":"/img/mysql/isolation.jpg","_content":"\n\n## 怎么查当前的隔离级别？\n\n<p class=\"note note-success\">MySQL数据库默认的存储引擎是支持事务的innodb,所以自然的就有默认的隔离级别--可重复读</p>\n<p class=\"note note-warning\">只有支持ACID的存储引擎才有对应的各种隔离级别</p>\n\n在我们设置当前事务的隔离级别的时候我们首先要会查询我们的MySQL的隔离级别是什么\n\nMySQL查询隔离级别的语句是：\n\n```bash\nmysql> select @@global.tx_isolation,@@tx_isolation;\n+-----------------------+-----------------+\n| @@global.tx_isolation | @@tx_isolation  |\n+-----------------------+-----------------+\n| REPEATABLE-READ       | REPEATABLE-READ |\n+-----------------------+-----------------+\n1 row in set (0.00 sec)\n```\n\n## 如何设置自己的隔离级别？\n\n设置innodb的事务级别方法是：\n\nset 作用域 transaction isolation level 事务隔离级别，例如~\n\n> SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}\n\n```bash\n// 全局的\nmysql> set global transaction isolation level read committed;\n// 当前会话\nmysql> set session transaction isolation level read committed;\n```\n\n## 各个隔离级别都是啥意思？\n\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n\n但是读提交和串行化一般很少使用\n\n- **Read Uncommitted（读取未提交内容）**\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n\n- **Read Committed（读取提交内容）**\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n- **Repeatable Read（可重读）**\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n\n- **Serializable（可串行化）**\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n## 脏读、不可重复读、幻读\n\n1. 脏读 ：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问 这个数据，然后使用了这个数据。\n \n2. 不可重复读 ：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两 次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不 可重复读。例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果 只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题。\n \n3. 幻读 : 是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。 同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象 发生了幻觉一样。例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。 如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。\n\n<p class=\"note note-primary\">这里只有幻读理解起来有些绕 简单来讲就是同一个事物中连续执行两次同样的sql语句，可能导致不同的结果问题，第二次sql语句可能返回之前不存在的行</p>\n\n## 不同隔离级别对应可能出现问题\n\n|      隔离级别      |  脏读  | 不可重复读 | 幻读  |\n|       ----        | ----  | ---      | ---   |\n| Read Uncommitted  | Y     | Y        | Y     |\n| Read Committed    | N     | Y        | Y     |\n| Repeatable Read   | N     | N        | Y     |\n| Serializable      | N     | N        | N     |\n\n","source":"_posts/设置MySQL的隔离级别.md","raw":"---\ntitle: 设置MySQL的隔离级别\ndate: 2021-08-25 23:00:28\nindex_img: /img/mysql/mysql.png\nbanner_img: /img/mysql/isolation.jpg\ncategories:\n  - 存储\ntags:\n  - mysql\n---\n\n\n## 怎么查当前的隔离级别？\n\n<p class=\"note note-success\">MySQL数据库默认的存储引擎是支持事务的innodb,所以自然的就有默认的隔离级别--可重复读</p>\n<p class=\"note note-warning\">只有支持ACID的存储引擎才有对应的各种隔离级别</p>\n\n在我们设置当前事务的隔离级别的时候我们首先要会查询我们的MySQL的隔离级别是什么\n\nMySQL查询隔离级别的语句是：\n\n```bash\nmysql> select @@global.tx_isolation,@@tx_isolation;\n+-----------------------+-----------------+\n| @@global.tx_isolation | @@tx_isolation  |\n+-----------------------+-----------------+\n| REPEATABLE-READ       | REPEATABLE-READ |\n+-----------------------+-----------------+\n1 row in set (0.00 sec)\n```\n\n## 如何设置自己的隔离级别？\n\n设置innodb的事务级别方法是：\n\nset 作用域 transaction isolation level 事务隔离级别，例如~\n\n> SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}\n\n```bash\n// 全局的\nmysql> set global transaction isolation level read committed;\n// 当前会话\nmysql> set session transaction isolation level read committed;\n```\n\n## 各个隔离级别都是啥意思？\n\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n\n但是读提交和串行化一般很少使用\n\n- **Read Uncommitted（读取未提交内容）**\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。\n\n- **Read Committed（读取提交内容）**\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n- **Repeatable Read（可重读）**\n这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n\n- **Serializable（可串行化）**\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n## 脏读、不可重复读、幻读\n\n1. 脏读 ：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问 这个数据，然后使用了这个数据。\n \n2. 不可重复读 ：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两 次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不 可重复读。例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果 只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题。\n \n3. 幻读 : 是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。 同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象 发生了幻觉一样。例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。 如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。\n\n<p class=\"note note-primary\">这里只有幻读理解起来有些绕 简单来讲就是同一个事物中连续执行两次同样的sql语句，可能导致不同的结果问题，第二次sql语句可能返回之前不存在的行</p>\n\n## 不同隔离级别对应可能出现问题\n\n|      隔离级别      |  脏读  | 不可重复读 | 幻读  |\n|       ----        | ----  | ---      | ---   |\n| Read Uncommitted  | Y     | Y        | Y     |\n| Read Committed    | N     | Y        | Y     |\n| Repeatable Read   | N     | N        | Y     |\n| Serializable      | N     | N        | N     |\n\n","slug":"设置MySQL的隔离级别","published":1,"updated":"2021-08-26T07:59:52.081Z","_id":"cksrmjlz70000lo8z831y2ng7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"怎么查当前的隔离级别？\"><a href=\"#怎么查当前的隔离级别？\" class=\"headerlink\" title=\"怎么查当前的隔离级别？\"></a>怎么查当前的隔离级别？</h2><p class=\"note note-success\">MySQL数据库默认的存储引擎是支持事务的innodb,所以自然的就有默认的隔离级别--可重复读</p>\n<p class=\"note note-warning\">只有支持ACID的存储引擎才有对应的各种隔离级别</p>\n\n<p>在我们设置当前事务的隔离级别的时候我们首先要会查询我们的MySQL的隔离级别是什么</p>\n<p>MySQL查询隔离级别的语句是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select @@global.tx_isolation,@@tx_isolation;<br>+-----------------------+-----------------+<br>| @@global.tx_isolation | @@tx_isolation  |<br>+-----------------------+-----------------+<br>| REPEATABLE-READ       | REPEATABLE-READ |<br>+-----------------------+-----------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"如何设置自己的隔离级别？\"><a href=\"#如何设置自己的隔离级别？\" class=\"headerlink\" title=\"如何设置自己的隔离级别？\"></a>如何设置自己的隔离级别？</h2><p>设置innodb的事务级别方法是：</p>\n<p>set 作用域 transaction isolation level 事务隔离级别，例如~</p>\n<blockquote>\n<p>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">// 全局的<br>mysql&gt; <span class=\"hljs-built_in\">set</span> global transaction isolation level <span class=\"hljs-built_in\">read</span> committed;<br>// 当前会话<br>mysql&gt; <span class=\"hljs-built_in\">set</span> session transaction isolation level <span class=\"hljs-built_in\">read</span> committed;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"各个隔离级别都是啥意思？\"><a href=\"#各个隔离级别都是啥意思？\" class=\"headerlink\" title=\"各个隔离级别都是啥意思？\"></a>各个隔离级别都是啥意思？</h2><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n<p>但是读提交和串行化一般很少使用</p>\n<ul>\n<li><p><strong>Read Uncommitted（读取未提交内容）</strong><br>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n</li>\n<li><p><strong>Read Committed（读取提交内容）</strong><br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n</li>\n<li><p><strong>Repeatable Read（可重读）</strong><br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>\n</li>\n<li><p><strong>Serializable（可串行化）</strong><br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n</li>\n</ul>\n<h2 id=\"脏读、不可重复读、幻读\"><a href=\"#脏读、不可重复读、幻读\" class=\"headerlink\" title=\"脏读、不可重复读、幻读\"></a>脏读、不可重复读、幻读</h2><ol>\n<li>脏读 ：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问 这个数据，然后使用了这个数据。</li>\n<li>不可重复读 ：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两 次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不 可重复读。例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果 只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题。</li>\n<li>幻读 : 是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。 同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象 发生了幻觉一样。例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。 如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。</li>\n</ol>\n<p class=\"note note-primary\">这里只有幻读理解起来有些绕 简单来讲就是同一个事物中连续执行两次同样的sql语句，可能导致不同的结果问题，第二次sql语句可能返回之前不存在的行</p>\n\n<h2 id=\"不同隔离级别对应可能出现问题\"><a href=\"#不同隔离级别对应可能出现问题\" class=\"headerlink\" title=\"不同隔离级别对应可能出现问题\"></a>不同隔离级别对应可能出现问题</h2><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Read Committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"怎么查当前的隔离级别？\"><a href=\"#怎么查当前的隔离级别？\" class=\"headerlink\" title=\"怎么查当前的隔离级别？\"></a>怎么查当前的隔离级别？</h2><p class=\"note note-success\">MySQL数据库默认的存储引擎是支持事务的innodb,所以自然的就有默认的隔离级别--可重复读</p>\n<p class=\"note note-warning\">只有支持ACID的存储引擎才有对应的各种隔离级别</p>\n\n<p>在我们设置当前事务的隔离级别的时候我们首先要会查询我们的MySQL的隔离级别是什么</p>\n<p>MySQL查询隔离级别的语句是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select @@global.tx_isolation,@@tx_isolation;<br>+-----------------------+-----------------+<br>| @@global.tx_isolation | @@tx_isolation  |<br>+-----------------------+-----------------+<br>| REPEATABLE-READ       | REPEATABLE-READ |<br>+-----------------------+-----------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置自己的隔离级别？\"><a href=\"#如何设置自己的隔离级别？\" class=\"headerlink\" title=\"如何设置自己的隔离级别？\"></a>如何设置自己的隔离级别？</h2><p>设置innodb的事务级别方法是：</p>\n<p>set 作用域 transaction isolation level 事务隔离级别，例如~</p>\n<blockquote>\n<p>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">// 全局的<br>mysql&gt; <span class=\"hljs-built_in\">set</span> global transaction isolation level <span class=\"hljs-built_in\">read</span> committed;<br>// 当前会话<br>mysql&gt; <span class=\"hljs-built_in\">set</span> session transaction isolation level <span class=\"hljs-built_in\">read</span> committed;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"各个隔离级别都是啥意思？\"><a href=\"#各个隔离级别都是啥意思？\" class=\"headerlink\" title=\"各个隔离级别都是啥意思？\"></a>各个隔离级别都是啥意思？</h2><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n<p>但是读提交和串行化一般很少使用</p>\n<ul>\n<li><p><strong>Read Uncommitted（读取未提交内容）</strong><br>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n</li>\n<li><p><strong>Read Committed（读取提交内容）</strong><br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>\n</li>\n<li><p><strong>Repeatable Read（可重读）</strong><br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p>\n</li>\n<li><p><strong>Serializable（可串行化）</strong><br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n</li>\n</ul>\n<h2 id=\"脏读、不可重复读、幻读\"><a href=\"#脏读、不可重复读、幻读\" class=\"headerlink\" title=\"脏读、不可重复读、幻读\"></a>脏读、不可重复读、幻读</h2><ol>\n<li>脏读 ：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问 这个数据，然后使用了这个数据。</li>\n<li>不可重复读 ：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两 次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不 可重复读。例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果 只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题。</li>\n<li>幻读 : 是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。 同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象 发生了幻觉一样。例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。 如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。</li>\n</ol>\n<p class=\"note note-primary\">这里只有幻读理解起来有些绕 简单来讲就是同一个事物中连续执行两次同样的sql语句，可能导致不同的结果问题，第二次sql语句可能返回之前不存在的行</p>\n\n<h2 id=\"不同隔离级别对应可能出现问题\"><a href=\"#不同隔离级别对应可能出现问题\" class=\"headerlink\" title=\"不同隔离级别对应可能出现问题\"></a>不同隔离级别对应可能出现问题</h2><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Read Committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody></table>\n"},{"title":"一致性哈希算法以及Go实现","date":"2021-09-03T10:00:00.000Z","index_img":"/img/hash/index.jpeg","banner_img":"/img/hash/banner.jpg","_content":"\n## 什么是一致性哈希\n\n一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。\n\n以上为维基百科中的介绍，很显然要想明白一致性哈希首先我们要先搞懂传统哈希\n\n## 传统哈希用例\n\n首先我们以一种简单的分布式缓存架构来阐述\n\n![图-1](/img/hash/redis-hash-cache.jpg)\n\n如图-1所示，我们有的时候后会使用redis对热点数据缓存进而缓解数据库的压力，理论上我们认为mysql的操作是高昂的。\n\n<p class=\"note note-success\">这里多个redis本质上是多个集群</p>\n\n这个时候我们希望将热点数据均匀的打散到多个redis上，来降低单个redis集群为缓存造成节点访问过热的情况发生。简单的我们可以理解为将不同的数据转换唯一值后，按照redis数量取模。假设有3台redis做缓存。计算公式如下：\n\n```bash\n    h=hash(key)%3\n```\n\n我们把这3个redis对应编号，h的值就是这个数据应该落在的缓存redis的位置。这就是传统的hash使用的一种，类似的在数据库分表对数据操作的时候也可以使用这种方式。\n\n**传统哈希存在什么问题？**\n\n很明显存在这种问题：当我们其中一个redis断电之或者新增一个那么对应的全部缓存对应的要全部改变位置，因为节点的数量发生改变了，仍然用之前的计算方法数据落点全部出错。为了解决这个问题一致性哈希就出现了。\n\n## 一致性哈希原理\n\n一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希空间环如下：\n\n![图-2](/img/hash/cricle-hash-1.jpg)\n\n接下来就是将我们的缓存对象哈希化放到这个环中，访问数据的时候数据key也是用同样的算法计算出哈希，通过环上顺时针转动知道遇到第一个存贮节点，这个存储节点就是数据的保存节点。如图-3所\n\n![图-3](/img/hash/cricle-hash-2.png)\n\n图-3中object1的key哈希之后为400000000顺时针转动知道遇到第一个存储对象node2所以object1保存的对象为node2。\n\n<p class=\"note note-primary\">一般的如果一个节点不可用则这个节点上的数据就会分配到相邻的节点上而其他key所在的位置不会变化。新增一个节点同理</p>\n\n## 一致性哈希引入虚拟节点解决分配不均问题\n\n想必大聪明的你已经看出来了。当存储节点较少或者节点分配本身就不均衡的情况下，一些key落入的数据节点必然会不均衡，这个时候又会造成节点过热。为解决这个问题引入了虚拟节点。即一个真实节点对应了多个虚拟的节点如图-4所示：\n\n![图-4](/img/hash/cricle-hash-3.png)\n\n图-4中的虚拟节点并不是真实的存储节点，而是按照一定规则批量生成的虚拟节点。这些虚拟节点都有一个对应的真实节点。\n\n## 一致性哈希与其哈希算法对比\n\n对于集群中缓存类数据key的节点分配问题，有这几种解决方法，简单的hash取模，槽映射，一致性hash。\n\n- **hash取模**\n对于hash取模，均衡性没有什么问题，但是如果集群中新增一个节点时，将会有N／（N+1）的数据实效，当N值越大，失效率越高。这显然是不可接受的。\n\n- **槽映射**\nredis采用的就是这种算法, 其思想是将key值做一定运算（如crc16， crc32，hash）， 获得一个整数值，再将该值与固定的槽数取模（slots）， 每个节点处理固定的slots。获取key所在的节点时，先要计算出key与槽的对应关系，再通过槽与节点的对应关系找到节点，这里每次新增节点时，只需要迁移一定槽对应的key即可，而不迁移的槽点key值则不会实效，这种方式将失效率降低到了 1／（N+1）。不过这种方式有个缺点就是所有节点都需要知道槽与节点对应关系，如果client端不保存槽与节点的对应关系的话，它需要实现重定向的逻辑。\n\n- **一致性hash**\n一致性hash如上文所言，其新增一个节点的失效率仅为1／（N+1），通过一致性hash最大程度的降低了实效率。同时相比于槽映射的方式，不需要引人槽来做中间对应，最大限度的简化了实现。\n\n## Go实现一致性哈希\n\n**代码实现详细[github.com/dogslee/consistent](https://github.com/dogslee/consistent)**\n\n使用样例:\n\n```golang\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/dogslee/consistent\"\n)\n\nfunc main() {\n\t// default consistent hash function\n\tc := consistent.New()\n\t// add new node\n\tc.Add(\"node1\")\n\tc.Add(\"node2\")\n\tc.Add(\"node3\")\n\tc.Add(\"node4\")\n\tkeyCase := []string{\"user1\", \"user2\", \"user3\", \"user4\"}\n\tfor _, k := range keyCase {\n\t\tsrvNode, err := c.Get(k)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"key: %s ==> srvNode: %s\", k, srvNode)\n\t}\n}\n```\n\n## Refrence\n\n[一致性哈希算法](https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/a.3.html)\n[5分钟理解一致性哈希算法](https://juejin.cn/post/6844903750860013576)\n[维基百科-一致性哈希](https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C)\n[golang 实现一致性 hash 算法](https://xie.infoq.cn/article/78043810ecc807d1896c6f3f2)\n[一致性hash算法原理及golang实现](https://segmentfault.com/a/1190000013533592)\n","source":"_posts/一致性哈希算法以及Go实现.md","raw":"---\ntitle: 一致性哈希算法以及Go实现\ndate: 2021-09-03 18:00:00\nindex_img: /img/hash/index.jpeg\nbanner_img: /img/hash/banner.jpg\ncategories:\n  - 存储\ntags:\n  - 缓存\n  - hash\n  - golang\n---\n\n## 什么是一致性哈希\n\n一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。\n\n以上为维基百科中的介绍，很显然要想明白一致性哈希首先我们要先搞懂传统哈希\n\n## 传统哈希用例\n\n首先我们以一种简单的分布式缓存架构来阐述\n\n![图-1](/img/hash/redis-hash-cache.jpg)\n\n如图-1所示，我们有的时候后会使用redis对热点数据缓存进而缓解数据库的压力，理论上我们认为mysql的操作是高昂的。\n\n<p class=\"note note-success\">这里多个redis本质上是多个集群</p>\n\n这个时候我们希望将热点数据均匀的打散到多个redis上，来降低单个redis集群为缓存造成节点访问过热的情况发生。简单的我们可以理解为将不同的数据转换唯一值后，按照redis数量取模。假设有3台redis做缓存。计算公式如下：\n\n```bash\n    h=hash(key)%3\n```\n\n我们把这3个redis对应编号，h的值就是这个数据应该落在的缓存redis的位置。这就是传统的hash使用的一种，类似的在数据库分表对数据操作的时候也可以使用这种方式。\n\n**传统哈希存在什么问题？**\n\n很明显存在这种问题：当我们其中一个redis断电之或者新增一个那么对应的全部缓存对应的要全部改变位置，因为节点的数量发生改变了，仍然用之前的计算方法数据落点全部出错。为了解决这个问题一致性哈希就出现了。\n\n## 一致性哈希原理\n\n一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希空间环如下：\n\n![图-2](/img/hash/cricle-hash-1.jpg)\n\n接下来就是将我们的缓存对象哈希化放到这个环中，访问数据的时候数据key也是用同样的算法计算出哈希，通过环上顺时针转动知道遇到第一个存贮节点，这个存储节点就是数据的保存节点。如图-3所\n\n![图-3](/img/hash/cricle-hash-2.png)\n\n图-3中object1的key哈希之后为400000000顺时针转动知道遇到第一个存储对象node2所以object1保存的对象为node2。\n\n<p class=\"note note-primary\">一般的如果一个节点不可用则这个节点上的数据就会分配到相邻的节点上而其他key所在的位置不会变化。新增一个节点同理</p>\n\n## 一致性哈希引入虚拟节点解决分配不均问题\n\n想必大聪明的你已经看出来了。当存储节点较少或者节点分配本身就不均衡的情况下，一些key落入的数据节点必然会不均衡，这个时候又会造成节点过热。为解决这个问题引入了虚拟节点。即一个真实节点对应了多个虚拟的节点如图-4所示：\n\n![图-4](/img/hash/cricle-hash-3.png)\n\n图-4中的虚拟节点并不是真实的存储节点，而是按照一定规则批量生成的虚拟节点。这些虚拟节点都有一个对应的真实节点。\n\n## 一致性哈希与其哈希算法对比\n\n对于集群中缓存类数据key的节点分配问题，有这几种解决方法，简单的hash取模，槽映射，一致性hash。\n\n- **hash取模**\n对于hash取模，均衡性没有什么问题，但是如果集群中新增一个节点时，将会有N／（N+1）的数据实效，当N值越大，失效率越高。这显然是不可接受的。\n\n- **槽映射**\nredis采用的就是这种算法, 其思想是将key值做一定运算（如crc16， crc32，hash）， 获得一个整数值，再将该值与固定的槽数取模（slots）， 每个节点处理固定的slots。获取key所在的节点时，先要计算出key与槽的对应关系，再通过槽与节点的对应关系找到节点，这里每次新增节点时，只需要迁移一定槽对应的key即可，而不迁移的槽点key值则不会实效，这种方式将失效率降低到了 1／（N+1）。不过这种方式有个缺点就是所有节点都需要知道槽与节点对应关系，如果client端不保存槽与节点的对应关系的话，它需要实现重定向的逻辑。\n\n- **一致性hash**\n一致性hash如上文所言，其新增一个节点的失效率仅为1／（N+1），通过一致性hash最大程度的降低了实效率。同时相比于槽映射的方式，不需要引人槽来做中间对应，最大限度的简化了实现。\n\n## Go实现一致性哈希\n\n**代码实现详细[github.com/dogslee/consistent](https://github.com/dogslee/consistent)**\n\n使用样例:\n\n```golang\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/dogslee/consistent\"\n)\n\nfunc main() {\n\t// default consistent hash function\n\tc := consistent.New()\n\t// add new node\n\tc.Add(\"node1\")\n\tc.Add(\"node2\")\n\tc.Add(\"node3\")\n\tc.Add(\"node4\")\n\tkeyCase := []string{\"user1\", \"user2\", \"user3\", \"user4\"}\n\tfor _, k := range keyCase {\n\t\tsrvNode, err := c.Get(k)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"key: %s ==> srvNode: %s\", k, srvNode)\n\t}\n}\n```\n\n## Refrence\n\n[一致性哈希算法](https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/a.3.html)\n[5分钟理解一致性哈希算法](https://juejin.cn/post/6844903750860013576)\n[维基百科-一致性哈希](https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C)\n[golang 实现一致性 hash 算法](https://xie.infoq.cn/article/78043810ecc807d1896c6f3f2)\n[一致性hash算法原理及golang实现](https://segmentfault.com/a/1190000013533592)\n","slug":"一致性哈希算法以及Go实现","published":1,"updated":"2021-09-04T00:59:07.574Z","_id":"ckt45i8a500010v8zddqfhzos","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是一致性哈希\"><a href=\"#什么是一致性哈希\" class=\"headerlink\" title=\"什么是一致性哈希\"></a>什么是一致性哈希</h2><p>一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。</p>\n<p>以上为维基百科中的介绍，很显然要想明白一致性哈希首先我们要先搞懂传统哈希</p>\n<h2 id=\"传统哈希用例\"><a href=\"#传统哈希用例\" class=\"headerlink\" title=\"传统哈希用例\"></a>传统哈希用例</h2><p>首先我们以一种简单的分布式缓存架构来阐述</p>\n<p><img src=\"/img/hash/redis-hash-cache.jpg\" alt=\"图-1\"></p>\n<p>如图-1所示，我们有的时候后会使用redis对热点数据缓存进而缓解数据库的压力，理论上我们认为mysql的操作是高昂的。</p>\n<p class=\"note note-success\">这里多个redis本质上是多个集群</p>\n\n<p>这个时候我们希望将热点数据均匀的打散到多个redis上，来降低单个redis集群为缓存造成节点访问过热的情况发生。简单的我们可以理解为将不同的数据转换唯一值后，按照redis数量取模。假设有3台redis做缓存。计算公式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">h=<span class=\"hljs-built_in\">hash</span>(key)%3<br></code></pre></div></td></tr></table></figure>\n\n<p>我们把这3个redis对应编号，h的值就是这个数据应该落在的缓存redis的位置。这就是传统的hash使用的一种，类似的在数据库分表对数据操作的时候也可以使用这种方式。</p>\n<p><strong>传统哈希存在什么问题？</strong></p>\n<p>很明显存在这种问题：当我们其中一个redis断电之或者新增一个那么对应的全部缓存对应的要全部改变位置，因为节点的数量发生改变了，仍然用之前的计算方法数据落点全部出错。为了解决这个问题一致性哈希就出现了。</p>\n<h2 id=\"一致性哈希原理\"><a href=\"#一致性哈希原理\" class=\"headerlink\" title=\"一致性哈希原理\"></a>一致性哈希原理</h2><p>一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希空间环如下：</p>\n<p><img src=\"/img/hash/cricle-hash-1.jpg\" alt=\"图-2\"></p>\n<p>接下来就是将我们的缓存对象哈希化放到这个环中，访问数据的时候数据key也是用同样的算法计算出哈希，通过环上顺时针转动知道遇到第一个存贮节点，这个存储节点就是数据的保存节点。如图-3所</p>\n<p><img src=\"/img/hash/cricle-hash-2.png\" alt=\"图-3\"></p>\n<p>图-3中object1的key哈希之后为400000000顺时针转动知道遇到第一个存储对象node2所以object1保存的对象为node2。</p>\n<p class=\"note note-primary\">一般的如果一个节点不可用则这个节点上的数据就会分配到相邻的节点上而其他key所在的位置不会变化。新增一个节点同理</p>\n\n<h2 id=\"一致性哈希引入虚拟节点解决分配不均问题\"><a href=\"#一致性哈希引入虚拟节点解决分配不均问题\" class=\"headerlink\" title=\"一致性哈希引入虚拟节点解决分配不均问题\"></a>一致性哈希引入虚拟节点解决分配不均问题</h2><p>想必大聪明的你已经看出来了。当存储节点较少或者节点分配本身就不均衡的情况下，一些key落入的数据节点必然会不均衡，这个时候又会造成节点过热。为解决这个问题引入了虚拟节点。即一个真实节点对应了多个虚拟的节点如图-4所示：</p>\n<p><img src=\"/img/hash/cricle-hash-3.png\" alt=\"图-4\"></p>\n<p>图-4中的虚拟节点并不是真实的存储节点，而是按照一定规则批量生成的虚拟节点。这些虚拟节点都有一个对应的真实节点。</p>\n<h2 id=\"一致性哈希与其哈希算法对比\"><a href=\"#一致性哈希与其哈希算法对比\" class=\"headerlink\" title=\"一致性哈希与其哈希算法对比\"></a>一致性哈希与其哈希算法对比</h2><p>对于集群中缓存类数据key的节点分配问题，有这几种解决方法，简单的hash取模，槽映射，一致性hash。</p>\n<ul>\n<li><p><strong>hash取模</strong><br>对于hash取模，均衡性没有什么问题，但是如果集群中新增一个节点时，将会有N／（N+1）的数据实效，当N值越大，失效率越高。这显然是不可接受的。</p>\n</li>\n<li><p><strong>槽映射</strong><br>redis采用的就是这种算法, 其思想是将key值做一定运算（如crc16， crc32，hash）， 获得一个整数值，再将该值与固定的槽数取模（slots）， 每个节点处理固定的slots。获取key所在的节点时，先要计算出key与槽的对应关系，再通过槽与节点的对应关系找到节点，这里每次新增节点时，只需要迁移一定槽对应的key即可，而不迁移的槽点key值则不会实效，这种方式将失效率降低到了 1／（N+1）。不过这种方式有个缺点就是所有节点都需要知道槽与节点对应关系，如果client端不保存槽与节点的对应关系的话，它需要实现重定向的逻辑。</p>\n</li>\n<li><p><strong>一致性hash</strong><br>一致性hash如上文所言，其新增一个节点的失效率仅为1／（N+1），通过一致性hash最大程度的降低了实效率。同时相比于槽映射的方式，不需要引人槽来做中间对应，最大限度的简化了实现。</p>\n</li>\n</ul>\n<h2 id=\"Go实现一致性哈希\"><a href=\"#Go实现一致性哈希\" class=\"headerlink\" title=\"Go实现一致性哈希\"></a>Go实现一致性哈希</h2><p><strong>代码实现详细<a href=\"https://github.com/dogslee/consistent\">github.com/dogslee/consistent</a></strong></p>\n<p>使用样例:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/dogslee/consistent&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// default consistent hash function</span><br>\tc := consistent.New()<br>\t<span class=\"hljs-comment\">// add new node</span><br>\tc.Add(<span class=\"hljs-string\">&quot;node1&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node2&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node3&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node4&quot;</span>)<br>\tkeyCase := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;user1&quot;</span>, <span class=\"hljs-string\">&quot;user2&quot;</span>, <span class=\"hljs-string\">&quot;user3&quot;</span>, <span class=\"hljs-string\">&quot;user4&quot;</span>&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, k := <span class=\"hljs-keyword\">range</span> keyCase &#123;<br>\t\tsrvNode, err := c.Get(k)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Fatal(err)<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;key: %s ==&gt; srvNode: %s&quot;</span>, k, srvNode)<br>\t&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"Refrence\"><a href=\"#Refrence\" class=\"headerlink\" title=\"Refrence\"></a>Refrence</h2><p><a href=\"https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/a.3.html\">一致性哈希算法</a><br><a href=\"https://juejin.cn/post/6844903750860013576\">5分钟理解一致性哈希算法</a><br><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C\">维基百科-一致性哈希</a><br><a href=\"https://xie.infoq.cn/article/78043810ecc807d1896c6f3f2\">golang 实现一致性 hash 算法</a><br><a href=\"https://segmentfault.com/a/1190000013533592\">一致性hash算法原理及golang实现</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是一致性哈希\"><a href=\"#什么是一致性哈希\" class=\"headerlink\" title=\"什么是一致性哈希\"></a>什么是一致性哈希</h2><p>一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。</p>\n<p>以上为维基百科中的介绍，很显然要想明白一致性哈希首先我们要先搞懂传统哈希</p>\n<h2 id=\"传统哈希用例\"><a href=\"#传统哈希用例\" class=\"headerlink\" title=\"传统哈希用例\"></a>传统哈希用例</h2><p>首先我们以一种简单的分布式缓存架构来阐述</p>\n<p><img src=\"/img/hash/redis-hash-cache.jpg\" alt=\"图-1\"></p>\n<p>如图-1所示，我们有的时候后会使用redis对热点数据缓存进而缓解数据库的压力，理论上我们认为mysql的操作是高昂的。</p>\n<p class=\"note note-success\">这里多个redis本质上是多个集群</p>\n\n<p>这个时候我们希望将热点数据均匀的打散到多个redis上，来降低单个redis集群为缓存造成节点访问过热的情况发生。简单的我们可以理解为将不同的数据转换唯一值后，按照redis数量取模。假设有3台redis做缓存。计算公式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">h=<span class=\"hljs-built_in\">hash</span>(key)%3<br></code></pre></td></tr></table></figure>\n\n<p>我们把这3个redis对应编号，h的值就是这个数据应该落在的缓存redis的位置。这就是传统的hash使用的一种，类似的在数据库分表对数据操作的时候也可以使用这种方式。</p>\n<p><strong>传统哈希存在什么问题？</strong></p>\n<p>很明显存在这种问题：当我们其中一个redis断电之或者新增一个那么对应的全部缓存对应的要全部改变位置，因为节点的数量发生改变了，仍然用之前的计算方法数据落点全部出错。为了解决这个问题一致性哈希就出现了。</p>\n<h2 id=\"一致性哈希原理\"><a href=\"#一致性哈希原理\" class=\"headerlink\" title=\"一致性哈希原理\"></a>一致性哈希原理</h2><p>一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希空间环如下：</p>\n<p><img src=\"/img/hash/cricle-hash-1.jpg\" alt=\"图-2\"></p>\n<p>接下来就是将我们的缓存对象哈希化放到这个环中，访问数据的时候数据key也是用同样的算法计算出哈希，通过环上顺时针转动知道遇到第一个存贮节点，这个存储节点就是数据的保存节点。如图-3所</p>\n<p><img src=\"/img/hash/cricle-hash-2.png\" alt=\"图-3\"></p>\n<p>图-3中object1的key哈希之后为400000000顺时针转动知道遇到第一个存储对象node2所以object1保存的对象为node2。</p>\n<p class=\"note note-primary\">一般的如果一个节点不可用则这个节点上的数据就会分配到相邻的节点上而其他key所在的位置不会变化。新增一个节点同理</p>\n\n<h2 id=\"一致性哈希引入虚拟节点解决分配不均问题\"><a href=\"#一致性哈希引入虚拟节点解决分配不均问题\" class=\"headerlink\" title=\"一致性哈希引入虚拟节点解决分配不均问题\"></a>一致性哈希引入虚拟节点解决分配不均问题</h2><p>想必大聪明的你已经看出来了。当存储节点较少或者节点分配本身就不均衡的情况下，一些key落入的数据节点必然会不均衡，这个时候又会造成节点过热。为解决这个问题引入了虚拟节点。即一个真实节点对应了多个虚拟的节点如图-4所示：</p>\n<p><img src=\"/img/hash/cricle-hash-3.png\" alt=\"图-4\"></p>\n<p>图-4中的虚拟节点并不是真实的存储节点，而是按照一定规则批量生成的虚拟节点。这些虚拟节点都有一个对应的真实节点。</p>\n<h2 id=\"一致性哈希与其哈希算法对比\"><a href=\"#一致性哈希与其哈希算法对比\" class=\"headerlink\" title=\"一致性哈希与其哈希算法对比\"></a>一致性哈希与其哈希算法对比</h2><p>对于集群中缓存类数据key的节点分配问题，有这几种解决方法，简单的hash取模，槽映射，一致性hash。</p>\n<ul>\n<li><p><strong>hash取模</strong><br>对于hash取模，均衡性没有什么问题，但是如果集群中新增一个节点时，将会有N／（N+1）的数据实效，当N值越大，失效率越高。这显然是不可接受的。</p>\n</li>\n<li><p><strong>槽映射</strong><br>redis采用的就是这种算法, 其思想是将key值做一定运算（如crc16， crc32，hash）， 获得一个整数值，再将该值与固定的槽数取模（slots）， 每个节点处理固定的slots。获取key所在的节点时，先要计算出key与槽的对应关系，再通过槽与节点的对应关系找到节点，这里每次新增节点时，只需要迁移一定槽对应的key即可，而不迁移的槽点key值则不会实效，这种方式将失效率降低到了 1／（N+1）。不过这种方式有个缺点就是所有节点都需要知道槽与节点对应关系，如果client端不保存槽与节点的对应关系的话，它需要实现重定向的逻辑。</p>\n</li>\n<li><p><strong>一致性hash</strong><br>一致性hash如上文所言，其新增一个节点的失效率仅为1／（N+1），通过一致性hash最大程度的降低了实效率。同时相比于槽映射的方式，不需要引人槽来做中间对应，最大限度的简化了实现。</p>\n</li>\n</ul>\n<h2 id=\"Go实现一致性哈希\"><a href=\"#Go实现一致性哈希\" class=\"headerlink\" title=\"Go实现一致性哈希\"></a>Go实现一致性哈希</h2><p><strong>代码实现详细<a href=\"https://github.com/dogslee/consistent\">github.com/dogslee/consistent</a></strong></p>\n<p>使用样例:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/dogslee/consistent&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// default consistent hash function</span><br>\tc := consistent.New()<br>\t<span class=\"hljs-comment\">// add new node</span><br>\tc.Add(<span class=\"hljs-string\">&quot;node1&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node2&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node3&quot;</span>)<br>\tc.Add(<span class=\"hljs-string\">&quot;node4&quot;</span>)<br>\tkeyCase := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;user1&quot;</span>, <span class=\"hljs-string\">&quot;user2&quot;</span>, <span class=\"hljs-string\">&quot;user3&quot;</span>, <span class=\"hljs-string\">&quot;user4&quot;</span>&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, k := <span class=\"hljs-keyword\">range</span> keyCase &#123;<br>\t\tsrvNode, err := c.Get(k)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tlog.Fatal(err)<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;key: %s ==&gt; srvNode: %s&quot;</span>, k, srvNode)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Refrence\"><a href=\"#Refrence\" class=\"headerlink\" title=\"Refrence\"></a>Refrence</h2><p><a href=\"https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/a.3.html\">一致性哈希算法</a><br><a href=\"https://juejin.cn/post/6844903750860013576\">5分钟理解一致性哈希算法</a><br><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C\">维基百科-一致性哈希</a><br><a href=\"https://xie.infoq.cn/article/78043810ecc807d1896c6f3f2\">golang 实现一致性 hash 算法</a><br><a href=\"https://segmentfault.com/a/1190000013533592\">一致性hash算法原理及golang实现</a></p>\n"},{"title":"golang运行时队列操作函数源码分析","date":"2021-10-06T01:32:36.000Z","index_img":"/img/golang/go.jpg","banner_img":null,"_content":"\n> 环境：\n> \n> CentOS Linux release 8.4.2105\n> \n> go1.15.14\n> \n> dlv1.5.0\n> \n> 被调试的源码内容：\n\n```golang\npackage main\n\nfunc main() {\n\tprintln(\"Hello World!\")\n}\n```\n\n> 快速搭建调试环境:\n\n```Dockerfile\n    FROM centos\n    RUN yum install golang -y \\\n    && yum install dlv -y \\\n    && yum install binutils -y \\\n    && yum install vim -y \\\n    && yum install gdb -y\n```\n\n# golang运行时概述\n\nGo的调度流程本质上是生产-消费流程\n\n1. 生产端生成goruntine放入队列\n2. 消费端通过与M绑定的P获取goroutine\n3. M循环调度执行 runtime.schedule->runtime.execute->runtime.gogo->runtime.goexit\n\n为了缓解一级队列中生产消费模型的压力，Go采用三级队列：\n\n1. P中的runnext队列, 该队列只保存一个goroutine\n2. local run queue 该队列最大保存256个goroutine\n3. global run queue 该队列以链表的形式保存goroutine\n\n操作运行时goroutine队列的函数主要有：\n\n1. runqput\n2. runqget\n3. globrunqput\n4. globrunqget\n\n> 为了方便描述一下内容所有的g代指goroutine\n\n## runqput\n\n使用dlv调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.runqput\nBreakpoint 1 set at 0x43c073 for runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153\n(dlv) c\n> runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153 (hits total:1) (PC: 0x43c073)\nWarning: debugging optimized function\n  5148: // runqput tries to put g on the local runnable queue.\n  5149: // If next is false, runqput adds g to the tail of the runnable queue.\n  5150: // If next is true, runqput puts g in the _p_.runnext slot.\n  5151: // If the run queue is full, runnext puts g on the global queue.\n  5152: // Executed only by the owner P.\n=>5153: func runqput(_p_ *p, gp *g, next bool) {\n  5154:         if randomizeScheduler && next && fastrand()%2 == 0 {\n  5155:                 next = false\n  5156:         }\n  5157:\n  5158:         if next {\n```\n\nrunqput 全部源码内容：\n\n```go\n    func runqput(_p_ *p, gp *g, next bool) {\n        if randomizeScheduler && next && fastrand()%2 == 0 {\n            next = false\n        }\n\n        if next {\n        retryNext:\n            oldnext := _p_.runnext\n            if !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) {\n                goto retryNext\n            }\n            if oldnext == 0 {\n                return\n            }\n            // Kick the old runnext out to the regular run queue.\n            gp = oldnext.ptr()\n        }\n\n    retry:\n        h := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with consumers\n        t := _p_.runqtail\n        if t-h < uint32(len(_p_.runq)) {\n            _p_.runq[t%uint32(len(_p_.runq))].set(gp)\n            atomic.StoreRel(&_p_.runqtail, t+1) // store-release, makes the item available for consumption\n            return\n        }\n        if runqputslow(_p_, gp, h, t) {\n            return\n        }\n        // the queue is not full, now the put above must succeed\n        goto retry\n    }\n```\n\n从该函数可以看出goroutine放入队列主要有一下一些逻辑\n\n1. 当入参next为false时:\n\n   1) 尝试将g放入当前P的runq队列，我们称为本地队列\n   2) 当本地队列已经满了的时候调用  runqputslow 函数\n   3) runqputslow函数执行批量的将本地队列的一半大小和当前的g一起移动到全局队列\n\n2. 当入参next为true时:\n\n    1) 尝试将g放入当前P的runnext中,将原先存在的g从runnext中取出\n    2) 尝试将取出的g放入当前P的runq队列，我们称为本地队列\n    3) 当本地队列已经满了的时候调用  runqputslow 函数\n    4) runqputslow函数执行批量的将本地队列的一半大小和取出的g一起移动到全局队列\n\n## runqget\n\ndlv 调试runqget\n\n```sh\n(dlv) b runtime.runqget\nBreakpoint 2 set at 0x43c4a0 for runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265\n(dlv) c\n> runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265 (hits total:1) (PC: 0x43c4a0)\nWarning: debugging optimized function\n  5260:\n  5261: // Get g from local runnable queue.\n  5262: // If inheritTime is true, gp should inherit the remaining time in the\n  5263: // current time slice. Otherwise, it should start a new time slice.\n  5264: // Executed only by the owner P.\n=>5265: func runqget(_p_ *p) (gp *g, inheritTime bool) {\n  5266:         // If there's a runnext, it's the next G to run.\n  5267:         for {\n  5268:                 next := _p_.runnext\n  5269:                 if next == 0 {\n  5270:                         break\n```\n\n通过调试信息找到源代码：\n\n```go\n    func runqget(_p_ *p) (gp *g, inheritTime bool) {\n        // If there's a runnext, it's the next G to run.\n        for {\n            next := _p_.runnext\n            if next == 0 {\n                break\n            }\n            if _p_.runnext.cas(next, 0) {\n                return next.ptr(), true\n            }\n        }\n\n        for {\n            h := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with other consumers\n            t := _p_.runqtail\n            if t == h {\n                return nil, false\n            }\n            gp := _p_.runq[h%uint32(len(_p_.runq))].ptr()\n            if atomic.CasRel(&_p_.runqhead, h, h+1) { // cas-release, commits consume\n                return gp, false\n            }\n        }\n    }\n```\n\n从源码中可以看出 runqget主要操作P的本地队列， 优先获取runnext之后再获取runq中的头个\n\n## globalrunqput\n\ndlv 调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.globrunqput\nBreakpoint 1 set at 0x435b46,0x43670e,0x437bb0,0x4396fc,0x453ca6,0x454814 for runtime.injectglist() /usr/lib/golang/src/runtime/proc.go:5044\n(dlv) c\n> runtime.goschedImpl() /usr/lib/golang/src/runtime/proc.go:5043 (hits total:1) (PC: 0x43670e)\nWarning: debugging optimized function\n  5038: // Put gp on the global runnable queue.\n  5039: // Sched must be locked.\n  5040: // May run during STW, so write barriers are not allowed.\n  5041: //go:nowritebarrierrec\n  5042: func globrunqput(gp *g) {\n=>5043:         sched.runq.pushBack(gp)\n  5044:         sched.runqsize++\n  5045: }\n  5046:\n  5047: // Put gp at the head of the global runnable queue.\n  5048: // Sched must be locked.\n```\n\n该函数逻辑比较简单 只是将g添加到全局队列的链表中\n\n## globrunqget\n\ndlv 调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.globrunqget\nBreakpoint 1 set at 0x43be33 for runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067\n(dlv) c\n> runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067 (hits total:1) (PC: 0x43be33)\nWarning: debugging optimized function\n  5062:         *batch = gQueue{}\n  5063: }\n  5064:\n  5065: // Try get a batch of G's from the global runnable queue.\n  5066: // Sched must be locked.\n=>5067: func globrunqget(_p_ *p, max int32) *g {\n  5068:         if sched.runqsize == 0 {\n  5069:                 return nil\n  5070:         }\n  5071:\n  5072:         n := sched.runqsize/gomaxprocs + 1\n```\n\n找到对应源码为:\n\n```go\n    func globrunqget(_p_ *p, max int32) *g {\n        if sched.runqsize == 0 {\n            return nil\n        }\n\n        n := sched.runqsize/gomaxprocs + 1\n        if n > sched.runqsize {\n            n = sched.runqsize\n        }\n        if max > 0 && n > max {\n            n = max\n        }\n        if n > int32(len(_p_.runq))/2 {\n            n = int32(len(_p_.runq)) / 2\n        }\n\n        sched.runqsize -= n\n\n        gp := sched.runq.pop()\n        n--\n        for ; n > 0; n-- {\n            gp1 := sched.runq.pop()\n            runqput(_p_, gp1, false)\n        }\n        return gp\n    }\n```\n\n分析源码发现该函数主要逻辑：\n\n1. 批量取出部分全局队列的g，取出数量= 全局总量/核心数+1\n2. 将 全局总量/核心数 的g加入到当前P的本地队列\n3. 返回一个g\n\n### 总结\n\n获取： g的获取优先从runnext 然后本地runq 最终获取不到去全局获取\n添加： 优先放入runnext 然后本地队列 本地队列满了批量放入全局队列\n","source":"_posts/golang运行时队列操作函数源码分析.md","raw":"---\ntitle: golang运行时队列操作函数源码分析\ndate: 2021-10-06 09:32:36\nindex_img: /img/golang/go.jpg\nbanner_img:\ncategories: \n- golang\ntags:\n- golang\n- runtime\n---\n\n> 环境：\n> \n> CentOS Linux release 8.4.2105\n> \n> go1.15.14\n> \n> dlv1.5.0\n> \n> 被调试的源码内容：\n\n```golang\npackage main\n\nfunc main() {\n\tprintln(\"Hello World!\")\n}\n```\n\n> 快速搭建调试环境:\n\n```Dockerfile\n    FROM centos\n    RUN yum install golang -y \\\n    && yum install dlv -y \\\n    && yum install binutils -y \\\n    && yum install vim -y \\\n    && yum install gdb -y\n```\n\n# golang运行时概述\n\nGo的调度流程本质上是生产-消费流程\n\n1. 生产端生成goruntine放入队列\n2. 消费端通过与M绑定的P获取goroutine\n3. M循环调度执行 runtime.schedule->runtime.execute->runtime.gogo->runtime.goexit\n\n为了缓解一级队列中生产消费模型的压力，Go采用三级队列：\n\n1. P中的runnext队列, 该队列只保存一个goroutine\n2. local run queue 该队列最大保存256个goroutine\n3. global run queue 该队列以链表的形式保存goroutine\n\n操作运行时goroutine队列的函数主要有：\n\n1. runqput\n2. runqget\n3. globrunqput\n4. globrunqget\n\n> 为了方便描述一下内容所有的g代指goroutine\n\n## runqput\n\n使用dlv调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.runqput\nBreakpoint 1 set at 0x43c073 for runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153\n(dlv) c\n> runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153 (hits total:1) (PC: 0x43c073)\nWarning: debugging optimized function\n  5148: // runqput tries to put g on the local runnable queue.\n  5149: // If next is false, runqput adds g to the tail of the runnable queue.\n  5150: // If next is true, runqput puts g in the _p_.runnext slot.\n  5151: // If the run queue is full, runnext puts g on the global queue.\n  5152: // Executed only by the owner P.\n=>5153: func runqput(_p_ *p, gp *g, next bool) {\n  5154:         if randomizeScheduler && next && fastrand()%2 == 0 {\n  5155:                 next = false\n  5156:         }\n  5157:\n  5158:         if next {\n```\n\nrunqput 全部源码内容：\n\n```go\n    func runqput(_p_ *p, gp *g, next bool) {\n        if randomizeScheduler && next && fastrand()%2 == 0 {\n            next = false\n        }\n\n        if next {\n        retryNext:\n            oldnext := _p_.runnext\n            if !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) {\n                goto retryNext\n            }\n            if oldnext == 0 {\n                return\n            }\n            // Kick the old runnext out to the regular run queue.\n            gp = oldnext.ptr()\n        }\n\n    retry:\n        h := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with consumers\n        t := _p_.runqtail\n        if t-h < uint32(len(_p_.runq)) {\n            _p_.runq[t%uint32(len(_p_.runq))].set(gp)\n            atomic.StoreRel(&_p_.runqtail, t+1) // store-release, makes the item available for consumption\n            return\n        }\n        if runqputslow(_p_, gp, h, t) {\n            return\n        }\n        // the queue is not full, now the put above must succeed\n        goto retry\n    }\n```\n\n从该函数可以看出goroutine放入队列主要有一下一些逻辑\n\n1. 当入参next为false时:\n\n   1) 尝试将g放入当前P的runq队列，我们称为本地队列\n   2) 当本地队列已经满了的时候调用  runqputslow 函数\n   3) runqputslow函数执行批量的将本地队列的一半大小和当前的g一起移动到全局队列\n\n2. 当入参next为true时:\n\n    1) 尝试将g放入当前P的runnext中,将原先存在的g从runnext中取出\n    2) 尝试将取出的g放入当前P的runq队列，我们称为本地队列\n    3) 当本地队列已经满了的时候调用  runqputslow 函数\n    4) runqputslow函数执行批量的将本地队列的一半大小和取出的g一起移动到全局队列\n\n## runqget\n\ndlv 调试runqget\n\n```sh\n(dlv) b runtime.runqget\nBreakpoint 2 set at 0x43c4a0 for runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265\n(dlv) c\n> runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265 (hits total:1) (PC: 0x43c4a0)\nWarning: debugging optimized function\n  5260:\n  5261: // Get g from local runnable queue.\n  5262: // If inheritTime is true, gp should inherit the remaining time in the\n  5263: // current time slice. Otherwise, it should start a new time slice.\n  5264: // Executed only by the owner P.\n=>5265: func runqget(_p_ *p) (gp *g, inheritTime bool) {\n  5266:         // If there's a runnext, it's the next G to run.\n  5267:         for {\n  5268:                 next := _p_.runnext\n  5269:                 if next == 0 {\n  5270:                         break\n```\n\n通过调试信息找到源代码：\n\n```go\n    func runqget(_p_ *p) (gp *g, inheritTime bool) {\n        // If there's a runnext, it's the next G to run.\n        for {\n            next := _p_.runnext\n            if next == 0 {\n                break\n            }\n            if _p_.runnext.cas(next, 0) {\n                return next.ptr(), true\n            }\n        }\n\n        for {\n            h := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with other consumers\n            t := _p_.runqtail\n            if t == h {\n                return nil, false\n            }\n            gp := _p_.runq[h%uint32(len(_p_.runq))].ptr()\n            if atomic.CasRel(&_p_.runqhead, h, h+1) { // cas-release, commits consume\n                return gp, false\n            }\n        }\n    }\n```\n\n从源码中可以看出 runqget主要操作P的本地队列， 优先获取runnext之后再获取runq中的头个\n\n## globalrunqput\n\ndlv 调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.globrunqput\nBreakpoint 1 set at 0x435b46,0x43670e,0x437bb0,0x4396fc,0x453ca6,0x454814 for runtime.injectglist() /usr/lib/golang/src/runtime/proc.go:5044\n(dlv) c\n> runtime.goschedImpl() /usr/lib/golang/src/runtime/proc.go:5043 (hits total:1) (PC: 0x43670e)\nWarning: debugging optimized function\n  5038: // Put gp on the global runnable queue.\n  5039: // Sched must be locked.\n  5040: // May run during STW, so write barriers are not allowed.\n  5041: //go:nowritebarrierrec\n  5042: func globrunqput(gp *g) {\n=>5043:         sched.runq.pushBack(gp)\n  5044:         sched.runqsize++\n  5045: }\n  5046:\n  5047: // Put gp at the head of the global runnable queue.\n  5048: // Sched must be locked.\n```\n\n该函数逻辑比较简单 只是将g添加到全局队列的链表中\n\n## globrunqget\n\ndlv 调试\n\n```sh\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.globrunqget\nBreakpoint 1 set at 0x43be33 for runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067\n(dlv) c\n> runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067 (hits total:1) (PC: 0x43be33)\nWarning: debugging optimized function\n  5062:         *batch = gQueue{}\n  5063: }\n  5064:\n  5065: // Try get a batch of G's from the global runnable queue.\n  5066: // Sched must be locked.\n=>5067: func globrunqget(_p_ *p, max int32) *g {\n  5068:         if sched.runqsize == 0 {\n  5069:                 return nil\n  5070:         }\n  5071:\n  5072:         n := sched.runqsize/gomaxprocs + 1\n```\n\n找到对应源码为:\n\n```go\n    func globrunqget(_p_ *p, max int32) *g {\n        if sched.runqsize == 0 {\n            return nil\n        }\n\n        n := sched.runqsize/gomaxprocs + 1\n        if n > sched.runqsize {\n            n = sched.runqsize\n        }\n        if max > 0 && n > max {\n            n = max\n        }\n        if n > int32(len(_p_.runq))/2 {\n            n = int32(len(_p_.runq)) / 2\n        }\n\n        sched.runqsize -= n\n\n        gp := sched.runq.pop()\n        n--\n        for ; n > 0; n-- {\n            gp1 := sched.runq.pop()\n            runqput(_p_, gp1, false)\n        }\n        return gp\n    }\n```\n\n分析源码发现该函数主要逻辑：\n\n1. 批量取出部分全局队列的g，取出数量= 全局总量/核心数+1\n2. 将 全局总量/核心数 的g加入到当前P的本地队列\n3. 返回一个g\n\n### 总结\n\n获取： g的获取优先从runnext 然后本地runq 最终获取不到去全局获取\n添加： 优先放入runnext 然后本地队列 本地队列满了批量放入全局队列\n","slug":"golang运行时队列操作函数源码分析","published":1,"updated":"2021-10-06T09:36:35.599Z","_id":"ckuevhqw50000nw8zglvm24c4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>环境：</p>\n<p>CentOS Linux release 8.4.2105</p>\n<p>go1.15.14</p>\n<p>dlv1.5.0</p>\n<p>被调试的源码内容：</p>\n</blockquote>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>快速搭建调试环境:</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Dockerfile\"><span class=\"hljs-keyword\">FROM</span> centos<br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> yum install golang -y \\</span><br><span class=\"bash\">&amp;&amp; yum install dlv -y \\</span><br><span class=\"bash\">&amp;&amp; yum install binutils -y \\</span><br><span class=\"bash\">&amp;&amp; yum install vim -y \\</span><br><span class=\"bash\">&amp;&amp; yum install gdb -y</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"golang运行时概述\"><a href=\"#golang运行时概述\" class=\"headerlink\" title=\"golang运行时概述\"></a>golang运行时概述</h1><p>Go的调度流程本质上是生产-消费流程</p>\n<ol>\n<li>生产端生成goruntine放入队列</li>\n<li>消费端通过与M绑定的P获取goroutine</li>\n<li>M循环调度执行 runtime.schedule-&gt;runtime.execute-&gt;runtime.gogo-&gt;runtime.goexit</li>\n</ol>\n<p>为了缓解一级队列中生产消费模型的压力，Go采用三级队列：</p>\n<ol>\n<li>P中的runnext队列, 该队列只保存一个goroutine</li>\n<li>local run queue 该队列最大保存256个goroutine</li>\n<li>global run queue 该队列以链表的形式保存goroutine</li>\n</ol>\n<p>操作运行时goroutine队列的函数主要有：</p>\n<ol>\n<li>runqput</li>\n<li>runqget</li>\n<li>globrunqput</li>\n<li>globrunqget</li>\n</ol>\n<blockquote>\n<p>为了方便描述一下内容所有的g代指goroutine</p>\n</blockquote>\n<h2 id=\"runqput\"><a href=\"#runqput\" class=\"headerlink\" title=\"runqput\"></a>runqput</h2><p>使用dlv调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.runqput<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x43c073 <span class=\"hljs-keyword\">for</span> runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153<br>(dlv) c<br>&gt; runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153 (hits total:1) (PC: 0x43c073)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5148: // runqput tries to put g on the <span class=\"hljs-built_in\">local</span> runnable queue.<br>  5149: // If next is <span class=\"hljs-literal\">false</span>, runqput adds g to the tail of the runnable queue.<br>  5150: // If next is <span class=\"hljs-literal\">true</span>, runqput puts g <span class=\"hljs-keyword\">in</span> the _p_.runnext slot.<br>  5151: // If the run queue is full, runnext puts g on the global queue.<br>  5152: // Executed only by the owner P.<br>=&gt;5153: func runqput(_p_ *p, gp *g, next bool) &#123;<br>  5154:         <span class=\"hljs-keyword\">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%2 == 0 &#123;<br>  5155:                 next = <span class=\"hljs-literal\">false</span><br>  5156:         &#125;<br>  5157:<br>  5158:         <span class=\"hljs-keyword\">if</span> next &#123;<br></code></pre></div></td></tr></table></figure>\n\n<p>runqput 全部源码内容：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">runqput</span><span class=\"hljs-params\">(_p_ *p, gp *g, next <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>    <span class=\"hljs-keyword\">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>        next = <span class=\"hljs-literal\">false</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> next &#123;<br>    retryNext:<br>        oldnext := _p_.runnext<br>        <span class=\"hljs-keyword\">if</span> !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) &#123;<br>            <span class=\"hljs-keyword\">goto</span> retryNext<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> oldnext == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-comment\">// Kick the old runnext out to the regular run queue.</span><br>        gp = oldnext.ptr()<br>    &#125;<br><br>retry:<br>    h := atomic.LoadAcq(&amp;_p_.runqhead) <span class=\"hljs-comment\">// load-acquire, synchronize with consumers</span><br>    t := _p_.runqtail<br>    <span class=\"hljs-keyword\">if</span> t-h &lt; <span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq)) &#123;<br>        _p_.runq[t%<span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))].set(gp)<br>        atomic.StoreRel(&amp;_p_.runqtail, t+<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// store-release, makes the item available for consumption</span><br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> runqputslow(_p_, gp, h, t) &#123;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-comment\">// the queue is not full, now the put above must succeed</span><br>    <span class=\"hljs-keyword\">goto</span> retry<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>从该函数可以看出goroutine放入队列主要有一下一些逻辑</p>\n<ol>\n<li><p>当入参next为false时:</p>\n<ol>\n<li>尝试将g放入当前P的runq队列，我们称为本地队列</li>\n<li>当本地队列已经满了的时候调用  runqputslow 函数</li>\n<li>runqputslow函数执行批量的将本地队列的一半大小和当前的g一起移动到全局队列</li>\n</ol>\n</li>\n<li><p>当入参next为true时:</p>\n<ol>\n<li>尝试将g放入当前P的runnext中,将原先存在的g从runnext中取出</li>\n<li>尝试将取出的g放入当前P的runq队列，我们称为本地队列</li>\n<li>当本地队列已经满了的时候调用  runqputslow 函数</li>\n<li>runqputslow函数执行批量的将本地队列的一半大小和取出的g一起移动到全局队列</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"runqget\"><a href=\"#runqget\" class=\"headerlink\" title=\"runqget\"></a>runqget</h2><p>dlv 调试runqget</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">(dlv) b runtime.runqget<br>Breakpoint 2 <span class=\"hljs-built_in\">set</span> at 0x43c4a0 <span class=\"hljs-keyword\">for</span> runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265<br>(dlv) c<br>&gt; runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265 (hits total:1) (PC: 0x43c4a0)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5260:<br>  5261: // Get g from <span class=\"hljs-built_in\">local</span> runnable queue.<br>  5262: // If inheritTime is <span class=\"hljs-literal\">true</span>, gp should inherit the remaining time <span class=\"hljs-keyword\">in</span> the<br>  5263: // current time slice. Otherwise, it should start a new time slice.<br>  5264: // Executed only by the owner P.<br>=&gt;5265: func runqget(_p_ *p) (gp *g, inheritTime bool) &#123;<br>  5266:         // If there<span class=\"hljs-string\">&#x27;s a runnext, it&#x27;</span>s the next G to run.<br>  5267:         <span class=\"hljs-keyword\">for</span> &#123;<br>  5268:                 next := _p_.runnext<br>  5269:                 <span class=\"hljs-keyword\">if</span> next == 0 &#123;<br>  5270:                         <span class=\"hljs-built_in\">break</span><br></code></pre></div></td></tr></table></figure>\n\n<p>通过调试信息找到源代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">runqget</span><span class=\"hljs-params\">(_p_ *p)</span> <span class=\"hljs-params\">(gp *g, inheritTime <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>    <span class=\"hljs-comment\">// If there&#x27;s a runnext, it&#x27;s the next G to run.</span><br>    <span class=\"hljs-keyword\">for</span> &#123;<br>        next := _p_.runnext<br>        <span class=\"hljs-keyword\">if</span> next == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> _p_.runnext.cas(next, <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> next.ptr(), <span class=\"hljs-literal\">true</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> &#123;<br>        h := atomic.LoadAcq(&amp;_p_.runqhead) <span class=\"hljs-comment\">// load-acquire, synchronize with other consumers</span><br>        t := _p_.runqtail<br>        <span class=\"hljs-keyword\">if</span> t == h &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>        &#125;<br>        gp := _p_.runq[h%<span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))].ptr()<br>        <span class=\"hljs-keyword\">if</span> atomic.CasRel(&amp;_p_.runqhead, h, h+<span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">// cas-release, commits consume</span><br>            <span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>从源码中可以看出 runqget主要操作P的本地队列， 优先获取runnext之后再获取runq中的头个</p>\n<h2 id=\"globalrunqput\"><a href=\"#globalrunqput\" class=\"headerlink\" title=\"globalrunqput\"></a>globalrunqput</h2><p>dlv 调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.globrunqput<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x435b46,0x43670e,0x437bb0,0x4396fc,0x453ca6,0x454814 <span class=\"hljs-keyword\">for</span> runtime.injectglist() /usr/lib/golang/src/runtime/proc.go:5044<br>(dlv) c<br>&gt; runtime.goschedImpl() /usr/lib/golang/src/runtime/proc.go:5043 (hits total:1) (PC: 0x43670e)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5038: // Put gp on the global runnable queue.<br>  5039: // Sched must be locked.<br>  5040: // May run during STW, so write barriers are not allowed.<br>  5041: //go:nowritebarrierrec<br>  5042: func globrunqput(gp *g) &#123;<br>=&gt;5043:         sched.runq.pushBack(gp)<br>  5044:         sched.runqsize++<br>  5045: &#125;<br>  5046:<br>  5047: // Put gp at the head of the global runnable queue.<br>  5048: // Sched must be locked.<br></code></pre></div></td></tr></table></figure>\n\n<p>该函数逻辑比较简单 只是将g添加到全局队列的链表中</p>\n<h2 id=\"globrunqget\"><a href=\"#globrunqget\" class=\"headerlink\" title=\"globrunqget\"></a>globrunqget</h2><p>dlv 调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.globrunqget<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x43be33 <span class=\"hljs-keyword\">for</span> runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067<br>(dlv) c<br>&gt; runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067 (hits total:1) (PC: 0x43be33)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5062:         *batch = gQueue&#123;&#125;<br>  5063: &#125;<br>  5064:<br>  5065: // Try get a batch of G<span class=\"hljs-string\">&#x27;s from the global runnable queue.</span><br><span class=\"hljs-string\">  5066: // Sched must be locked.</span><br><span class=\"hljs-string\">=&gt;5067: func globrunqget(_p_ *p, max int32) *g &#123;</span><br><span class=\"hljs-string\">  5068:         if sched.runqsize == 0 &#123;</span><br><span class=\"hljs-string\">  5069:                 return nil</span><br><span class=\"hljs-string\">  5070:         &#125;</span><br><span class=\"hljs-string\">  5071:</span><br><span class=\"hljs-string\">  5072:         n := sched.runqsize/gomaxprocs + 1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>找到对应源码为:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">globrunqget</span><span class=\"hljs-params\">(_p_ *p, max <span class=\"hljs-keyword\">int32</span>)</span> *<span class=\"hljs-title\">g</span></span> &#123;<br>    <span class=\"hljs-keyword\">if</span> sched.runqsize == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br><br>    n := sched.runqsize/gomaxprocs + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> n &gt; sched.runqsize &#123;<br>        n = sched.runqsize<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> max &gt; <span class=\"hljs-number\">0</span> &amp;&amp; n &gt; max &#123;<br>        n = max<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-keyword\">int32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))/<span class=\"hljs-number\">2</span> &#123;<br>        n = <span class=\"hljs-keyword\">int32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq)) / <span class=\"hljs-number\">2</span><br>    &#125;<br><br>    sched.runqsize -= n<br><br>    gp := sched.runq.pop()<br>    n--<br>    <span class=\"hljs-keyword\">for</span> ; n &gt; <span class=\"hljs-number\">0</span>; n-- &#123;<br>        gp1 := sched.runq.pop()<br>        runqput(_p_, gp1, <span class=\"hljs-literal\">false</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> gp<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>分析源码发现该函数主要逻辑：</p>\n<ol>\n<li>批量取出部分全局队列的g，取出数量= 全局总量/核心数+1</li>\n<li>将 全局总量/核心数 的g加入到当前P的本地队列</li>\n<li>返回一个g</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>获取： g的获取优先从runnext 然后本地runq 最终获取不到去全局获取<br>添加： 优先放入runnext 然后本地队列 本地队列满了批量放入全局队列</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>环境：</p>\n<p>CentOS Linux release 8.4.2105</p>\n<p>go1.15.14</p>\n<p>dlv1.5.0</p>\n<p>被调试的源码内容：</p>\n</blockquote>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>快速搭建调试环境:</p>\n</blockquote>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Dockerfile\"><span class=\"hljs-keyword\">FROM</span> centos<br><span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> yum install golang -y \\</span><br><span class=\"bash\">&amp;&amp; yum install dlv -y \\</span><br><span class=\"bash\">&amp;&amp; yum install binutils -y \\</span><br><span class=\"bash\">&amp;&amp; yum install vim -y \\</span><br><span class=\"bash\">&amp;&amp; yum install gdb -y</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"golang运行时概述\"><a href=\"#golang运行时概述\" class=\"headerlink\" title=\"golang运行时概述\"></a>golang运行时概述</h1><p>Go的调度流程本质上是生产-消费流程</p>\n<ol>\n<li>生产端生成goruntine放入队列</li>\n<li>消费端通过与M绑定的P获取goroutine</li>\n<li>M循环调度执行 runtime.schedule-&gt;runtime.execute-&gt;runtime.gogo-&gt;runtime.goexit</li>\n</ol>\n<p>为了缓解一级队列中生产消费模型的压力，Go采用三级队列：</p>\n<ol>\n<li>P中的runnext队列, 该队列只保存一个goroutine</li>\n<li>local run queue 该队列最大保存256个goroutine</li>\n<li>global run queue 该队列以链表的形式保存goroutine</li>\n</ol>\n<p>操作运行时goroutine队列的函数主要有：</p>\n<ol>\n<li>runqput</li>\n<li>runqget</li>\n<li>globrunqput</li>\n<li>globrunqget</li>\n</ol>\n<blockquote>\n<p>为了方便描述一下内容所有的g代指goroutine</p>\n</blockquote>\n<h2 id=\"runqput\"><a href=\"#runqput\" class=\"headerlink\" title=\"runqput\"></a>runqput</h2><p>使用dlv调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.runqput<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x43c073 <span class=\"hljs-keyword\">for</span> runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153<br>(dlv) c<br>&gt; runtime.runqput() /usr/lib/golang/src/runtime/proc.go:5153 (hits total:1) (PC: 0x43c073)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5148: // runqput tries to put g on the <span class=\"hljs-built_in\">local</span> runnable queue.<br>  5149: // If next is <span class=\"hljs-literal\">false</span>, runqput adds g to the tail of the runnable queue.<br>  5150: // If next is <span class=\"hljs-literal\">true</span>, runqput puts g <span class=\"hljs-keyword\">in</span> the _p_.runnext slot.<br>  5151: // If the run queue is full, runnext puts g on the global queue.<br>  5152: // Executed only by the owner P.<br>=&gt;5153: func runqput(_p_ *p, gp *g, next bool) &#123;<br>  5154:         <span class=\"hljs-keyword\">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%2 == 0 &#123;<br>  5155:                 next = <span class=\"hljs-literal\">false</span><br>  5156:         &#125;<br>  5157:<br>  5158:         <span class=\"hljs-keyword\">if</span> next &#123;<br></code></pre></td></tr></table></figure>\n\n<p>runqput 全部源码内容：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">runqput</span><span class=\"hljs-params\">(_p_ *p, gp *g, next <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>    <span class=\"hljs-keyword\">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrand()%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &#123;<br>        next = <span class=\"hljs-literal\">false</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> next &#123;<br>    retryNext:<br>        oldnext := _p_.runnext<br>        <span class=\"hljs-keyword\">if</span> !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) &#123;<br>            <span class=\"hljs-keyword\">goto</span> retryNext<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> oldnext == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">return</span><br>        &#125;<br>        <span class=\"hljs-comment\">// Kick the old runnext out to the regular run queue.</span><br>        gp = oldnext.ptr()<br>    &#125;<br><br>retry:<br>    h := atomic.LoadAcq(&amp;_p_.runqhead) <span class=\"hljs-comment\">// load-acquire, synchronize with consumers</span><br>    t := _p_.runqtail<br>    <span class=\"hljs-keyword\">if</span> t-h &lt; <span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq)) &#123;<br>        _p_.runq[t%<span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))].set(gp)<br>        atomic.StoreRel(&amp;_p_.runqtail, t+<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// store-release, makes the item available for consumption</span><br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> runqputslow(_p_, gp, h, t) &#123;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-comment\">// the queue is not full, now the put above must succeed</span><br>    <span class=\"hljs-keyword\">goto</span> retry<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从该函数可以看出goroutine放入队列主要有一下一些逻辑</p>\n<ol>\n<li><p>当入参next为false时:</p>\n<ol>\n<li>尝试将g放入当前P的runq队列，我们称为本地队列</li>\n<li>当本地队列已经满了的时候调用  runqputslow 函数</li>\n<li>runqputslow函数执行批量的将本地队列的一半大小和当前的g一起移动到全局队列</li>\n</ol>\n</li>\n<li><p>当入参next为true时:</p>\n<ol>\n<li>尝试将g放入当前P的runnext中,将原先存在的g从runnext中取出</li>\n<li>尝试将取出的g放入当前P的runq队列，我们称为本地队列</li>\n<li>当本地队列已经满了的时候调用  runqputslow 函数</li>\n<li>runqputslow函数执行批量的将本地队列的一半大小和取出的g一起移动到全局队列</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"runqget\"><a href=\"#runqget\" class=\"headerlink\" title=\"runqget\"></a>runqget</h2><p>dlv 调试runqget</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">(dlv) b runtime.runqget<br>Breakpoint 2 <span class=\"hljs-built_in\">set</span> at 0x43c4a0 <span class=\"hljs-keyword\">for</span> runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265<br>(dlv) c<br>&gt; runtime.runqget() /usr/lib/golang/src/runtime/proc.go:5265 (hits total:1) (PC: 0x43c4a0)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5260:<br>  5261: // Get g from <span class=\"hljs-built_in\">local</span> runnable queue.<br>  5262: // If inheritTime is <span class=\"hljs-literal\">true</span>, gp should inherit the remaining time <span class=\"hljs-keyword\">in</span> the<br>  5263: // current time slice. Otherwise, it should start a new time slice.<br>  5264: // Executed only by the owner P.<br>=&gt;5265: func runqget(_p_ *p) (gp *g, inheritTime bool) &#123;<br>  5266:         // If there<span class=\"hljs-string\">&#x27;s a runnext, it&#x27;</span>s the next G to run.<br>  5267:         <span class=\"hljs-keyword\">for</span> &#123;<br>  5268:                 next := _p_.runnext<br>  5269:                 <span class=\"hljs-keyword\">if</span> next == 0 &#123;<br>  5270:                         <span class=\"hljs-built_in\">break</span><br></code></pre></td></tr></table></figure>\n\n<p>通过调试信息找到源代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">runqget</span><span class=\"hljs-params\">(_p_ *p)</span> <span class=\"hljs-params\">(gp *g, inheritTime <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>    <span class=\"hljs-comment\">// If there&#x27;s a runnext, it&#x27;s the next G to run.</span><br>    <span class=\"hljs-keyword\">for</span> &#123;<br>        next := _p_.runnext<br>        <span class=\"hljs-keyword\">if</span> next == <span class=\"hljs-number\">0</span> &#123;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> _p_.runnext.cas(next, <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> next.ptr(), <span class=\"hljs-literal\">true</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> &#123;<br>        h := atomic.LoadAcq(&amp;_p_.runqhead) <span class=\"hljs-comment\">// load-acquire, synchronize with other consumers</span><br>        t := _p_.runqtail<br>        <span class=\"hljs-keyword\">if</span> t == h &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span><br>        &#125;<br>        gp := _p_.runq[h%<span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))].ptr()<br>        <span class=\"hljs-keyword\">if</span> atomic.CasRel(&amp;_p_.runqhead, h, h+<span class=\"hljs-number\">1</span>) &#123; <span class=\"hljs-comment\">// cas-release, commits consume</span><br>            <span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从源码中可以看出 runqget主要操作P的本地队列， 优先获取runnext之后再获取runq中的头个</p>\n<h2 id=\"globalrunqput\"><a href=\"#globalrunqput\" class=\"headerlink\" title=\"globalrunqput\"></a>globalrunqput</h2><p>dlv 调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.globrunqput<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x435b46,0x43670e,0x437bb0,0x4396fc,0x453ca6,0x454814 <span class=\"hljs-keyword\">for</span> runtime.injectglist() /usr/lib/golang/src/runtime/proc.go:5044<br>(dlv) c<br>&gt; runtime.goschedImpl() /usr/lib/golang/src/runtime/proc.go:5043 (hits total:1) (PC: 0x43670e)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5038: // Put gp on the global runnable queue.<br>  5039: // Sched must be locked.<br>  5040: // May run during STW, so write barriers are not allowed.<br>  5041: //go:nowritebarrierrec<br>  5042: func globrunqput(gp *g) &#123;<br>=&gt;5043:         sched.runq.pushBack(gp)<br>  5044:         sched.runqsize++<br>  5045: &#125;<br>  5046:<br>  5047: // Put gp at the head of the global runnable queue.<br>  5048: // Sched must be locked.<br></code></pre></td></tr></table></figure>\n\n<p>该函数逻辑比较简单 只是将g添加到全局队列的链表中</p>\n<h2 id=\"globrunqget\"><a href=\"#globrunqget\" class=\"headerlink\" title=\"globrunqget\"></a>globrunqget</h2><p>dlv 调试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@583d9a8ec1db p1]<span class=\"hljs-comment\"># dlv exec ./main</span><br>Type <span class=\"hljs-string\">&#x27;help&#x27;</span> <span class=\"hljs-keyword\">for</span> list of commands.<br>(dlv) b runtime.globrunqget<br>Breakpoint 1 <span class=\"hljs-built_in\">set</span> at 0x43be33 <span class=\"hljs-keyword\">for</span> runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067<br>(dlv) c<br>&gt; runtime.globrunqget() /usr/lib/golang/src/runtime/proc.go:5067 (hits total:1) (PC: 0x43be33)<br>Warning: debugging optimized <span class=\"hljs-keyword\">function</span><br>  5062:         *batch = gQueue&#123;&#125;<br>  5063: &#125;<br>  5064:<br>  5065: // Try get a batch of G<span class=\"hljs-string\">&#x27;s from the global runnable queue.</span><br><span class=\"hljs-string\">  5066: // Sched must be locked.</span><br><span class=\"hljs-string\">=&gt;5067: func globrunqget(_p_ *p, max int32) *g &#123;</span><br><span class=\"hljs-string\">  5068:         if sched.runqsize == 0 &#123;</span><br><span class=\"hljs-string\">  5069:                 return nil</span><br><span class=\"hljs-string\">  5070:         &#125;</span><br><span class=\"hljs-string\">  5071:</span><br><span class=\"hljs-string\">  5072:         n := sched.runqsize/gomaxprocs + 1</span><br></code></pre></td></tr></table></figure>\n\n<p>找到对应源码为:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">globrunqget</span><span class=\"hljs-params\">(_p_ *p, max <span class=\"hljs-keyword\">int32</span>)</span> *<span class=\"hljs-title\">g</span></span> &#123;<br>    <span class=\"hljs-keyword\">if</span> sched.runqsize == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br><br>    n := sched.runqsize/gomaxprocs + <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> n &gt; sched.runqsize &#123;<br>        n = sched.runqsize<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> max &gt; <span class=\"hljs-number\">0</span> &amp;&amp; n &gt; max &#123;<br>        n = max<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-keyword\">int32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq))/<span class=\"hljs-number\">2</span> &#123;<br>        n = <span class=\"hljs-keyword\">int32</span>(<span class=\"hljs-built_in\">len</span>(_p_.runq)) / <span class=\"hljs-number\">2</span><br>    &#125;<br><br>    sched.runqsize -= n<br><br>    gp := sched.runq.pop()<br>    n--<br>    <span class=\"hljs-keyword\">for</span> ; n &gt; <span class=\"hljs-number\">0</span>; n-- &#123;<br>        gp1 := sched.runq.pop()<br>        runqput(_p_, gp1, <span class=\"hljs-literal\">false</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> gp<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>分析源码发现该函数主要逻辑：</p>\n<ol>\n<li>批量取出部分全局队列的g，取出数量= 全局总量/核心数+1</li>\n<li>将 全局总量/核心数 的g加入到当前P的本地队列</li>\n<li>返回一个g</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>获取： g的获取优先从runnext 然后本地runq 最终获取不到去全局获取<br>添加： 优先放入runnext 然后本地队列 本地队列满了批量放入全局队列</p>\n"},{"title":"golang运行时核心调度函数(schedule，findrunnable，sysmon)源码分析","date":"2021-10-06T03:35:02.000Z","index_img":"/img/golang/go.jpg","banner_img":null,"_content":"\n# 概述\n\n分析核心调度函数 shcedule findrunnable sysmon\n\n## schedule\n\n\n\ndlv调试：\n\n```shell\n(dlv) b runtime.schedule\nBreakpoint 1 set at 0x435cf3 for runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609\n(dlv) c\n> runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609 (hits total:1) (PC: 0x435cf3)\nWarning: debugging optimized function\n  2604:         }\n  2605: }\n  2606:\n  2607: // One round of scheduler: find a runnable goroutine and execute it.\n  2608: // Never returns.\n=>2609: func schedule() {\n  2610:         _g_ := getg()\n  2611:\n  2612:         if _g_.m.locks != 0 {\n  2613:                 throw(\"schedule: holding locks\")\n  2614:         }\n```\n\n全部的源码内容如下：\n\n```go\nfunc schedule() {\n\t_g_ := getg()\n\n\tif _g_.m.locks != 0 {\n\t\tthrow(\"schedule: holding locks\")\n\t}\n\n\tif _g_.m.lockedg != 0 {\n\t\tstoplockedm()\n\t\texecute(_g_.m.lockedg.ptr(), false) // Never returns.\n\t}\n\n\t// We should not schedule away from a g that is executing a cgo call,\n\t// since the cgo call is using the m's g0 stack.\n\tif _g_.m.incgo {\n\t\tthrow(\"schedule: in cgo\")\n\t}\n\ntop:\n\tpp := _g_.m.p.ptr()\n\tpp.preempt = false\n\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n\tif pp.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n\n\t// Sanity check: if we are spinning, the run queue should be empty.\n\t// Check this before calling checkTimers, as that might call\n\t// goready to put a ready goroutine on the local run queue.\n\tif _g_.m.spinning && (pp.runnext != 0 || pp.runqhead != pp.runqtail) {\n\t\tthrow(\"schedule: spinning with local work\")\n\t}\n\n\tcheckTimers(pp, 0)\n\n\tvar gp *g\n\tvar inheritTime bool\n\n\t// Normal goroutines will check for need to wakeP in ready,\n\t// but GCworkers and tracereaders will not, so the check must\n\t// be done here instead.\n\ttryWakeP := false\n\tif trace.enabled || trace.shutdown {\n\t\tgp = traceReader()\n\t\tif gp != nil {\n\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t\ttryWakeP = true\n\t\t}\n\t}\n\tif gp == nil && gcBlackenEnabled != 0 {\n\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())\n\t\ttryWakeP = tryWakeP || gp != nil\n\t}\n\tif gp == nil {\n\t\t// Check the global runnable queue once in a while to ensure fairness.\n\t\t// Otherwise two goroutines can completely occupy the local runqueue\n\t\t// by constantly respawning each other.\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t\t// We can see gp != nil here even if the M is spinning,\n\t\t// if checkTimers added a local goroutine via goready.\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = findrunnable() // blocks until work is available\n\t}\n\n\t// This thread is going to run a goroutine and is not spinning anymore,\n\t// so if it was marked as spinning we need to reset it now and potentially\n\t// start a new spinning M.\n\tif _g_.m.spinning {\n\t\tresetspinning()\n\t}\n\n\tif sched.disable.user && !schedEnabled(gp) {\n\t\t// Scheduling of this goroutine is disabled. Put it on\n\t\t// the list of pending runnable goroutines for when we\n\t\t// re-enable user scheduling and look again.\n\t\tlock(&sched.lock)\n\t\tif schedEnabled(gp) {\n\t\t\t// Something re-enabled scheduling while we\n\t\t\t// were acquiring the lock.\n\t\t\tunlock(&sched.lock)\n\t\t} else {\n\t\t\tsched.disable.runnable.pushBack(gp)\n\t\t\tsched.disable.n++\n\t\t\tunlock(&sched.lock)\n\t\t\tgoto top\n\t\t}\n\t}\n\n\t// If about to schedule a not-normal goroutine (a GCworker or tracereader),\n\t// wake a P if there is one.\n\tif tryWakeP {\n\t\twakep()\n\t}\n\tif gp.lockedm != 0 {\n\t\t// Hands off own p to the locked m,\n\t\t// then blocks waiting for a new p.\n\t\tstartlockedm(gp)\n\t\tgoto top\n\t}\n\n\texecute(gp, inheritTime)\n}\n```\n\n忽略GC和trace后分析源码发现shedule函数本质就是尽力找到可运行的g，然后去运行g上面的任务函数。查找g的流程如下：\n\n1. 如果当前GC需要停止整个世界（STW), 则调用gcstopm休眠当前的M\n2. 每隔61次调度轮回从全局队列找，避免全局队列中的g被饿死。\n3. 从p.runnext获取g，从p的本地队列中获取。\n4. 调用 `findrunnable` 找g，找不到的话就将m休眠，等待唤醒。\n\n当找到一个g后，就会调用 `execute` 去执行g。\n\n\n\n## findrunnable\n\ndlv调试：\n\n```shell\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.findrunnable\nBreakpoint 1 set at 0x4348d8 for runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189\n(dlv) c\n> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (hits total:1) (PC: 0x4348d8)\nWarning: debugging optimized function\n  2184:         gogo(&gp.sched)\n  2185: }\n  2186:\n  2187: // Finds a runnable goroutine to execute.\n  2188: // Tries to steal from other P's, get g from local or global queue, poll network.\n=>2189: func findrunnable() (gp *g, inheritTime bool) {\n  2190:         _g_ := getg()\n  2191:\n  2192:         // The conditions here and in handoffp must agree: if\n  2193:         // findrunnable would return a G to run, handoffp must start\n  2194:         // an M.\n(dlv) si\n> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (PC: 0x4348df)\nWarning: debugging optimized function\n  2184:         gogo(&gp.sched)\n  2185: }\n  2186:\n  2187: // Finds a runnable goroutine to execute.\n  2188: // Tries to steal from other P's, get g from local or global queue, poll network.\n=>2189: func findrunnable() (gp *g, inheritTime bool) {\n  2190:         _g_ := getg()\n  2191:\n  2192:         // The conditions here and in handoffp must agree: if\n  2193:         // findrunnable would return a G to run, handoffp must start\n  2194:         // an M.\n```\n\n\n\n全部源代码如下：\n\n```go\nfunc findrunnable() (gp *g, inheritTime bool) {\n\t_g_ := getg()\n\n\t// The conditions here and in handoffp must agree: if\n\t// findrunnable would return a G to run, handoffp must start\n\t// an M.\n\ntop:\n\t_p_ := _g_.m.p.ptr()\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n\tif _p_.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n\n\tnow, pollUntil, _ := checkTimers(_p_, 0)\n\n\tif fingwait && fingwake {\n\t\tif gp := wakefing(); gp != nil {\n\t\t\tready(gp, 0, true)\n\t\t}\n\t}\n\tif *cgo_yield != nil {\n\t\tasmcgocall(*cgo_yield, nil)\n\t}\n\n\t// local runq\n\tif gp, inheritTime := runqget(_p_); gp != nil {\n\t\treturn gp, inheritTime\n\t}\n\n\t// global runq\n\tif sched.runqsize != 0 {\n\t\tlock(&sched.lock)\n\t\tgp := globrunqget(_p_, 0)\n\t\tunlock(&sched.lock)\n\t\tif gp != nil {\n\t\t\treturn gp, false\n\t\t}\n\t}\n\n\t// Poll network.\n\t// This netpoll is only an optimization before we resort to stealing.\n\t// We can safely skip it if there are no waiters or a thread is blocked\n\t// in netpoll already. If there is any kind of logical race with that\n\t// blocked thread (e.g. it has already returned from netpoll, but does\n\t// not set lastpoll yet), this thread will do blocking netpoll below\n\t// anyway.\n\tif netpollinited() && atomic.Load(&netpollWaiters) > 0 && atomic.Load64(&sched.lastpoll) != 0 {\n\t\tif list := netpoll(0); !list.empty() { // non-blocking\n\t\t\tgp := list.pop()\n\t\t\tinjectglist(&list)\n\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\tif trace.enabled {\n\t\t\t\ttraceGoUnpark(gp, 0)\n\t\t\t}\n\t\t\treturn gp, false\n\t\t}\n\t}\n\n\t// Steal work from other P's.\n\tprocs := uint32(gomaxprocs)\n\tranTimer := false\n\t// If number of spinning M's >= number of busy P's, block.\n\t// This is necessary to prevent excessive CPU consumption\n\t// when GOMAXPROCS>>1 but the program parallelism is low.\n\tif !_g_.m.spinning && 2*atomic.Load(&sched.nmspinning) >= procs-atomic.Load(&sched.npidle) {\n\t\tgoto stop\n\t}\n\tif !_g_.m.spinning {\n\t\t_g_.m.spinning = true\n\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t}\n\tfor i := 0; i < 4; i++ {\n\t\tfor enum := stealOrder.start(fastrand()); !enum.done(); enum.next() {\n\t\t\tif sched.gcwaiting != 0 {\n\t\t\t\tgoto top\n\t\t\t}\n\t\t\tstealRunNextG := i > 2 // first look for ready queues with more than 1 g\n\t\t\tp2 := allp[enum.position()]\n\t\t\tif _p_ == p2 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif gp := runqsteal(_p_, p2, stealRunNextG); gp != nil {\n\t\t\t\treturn gp, false\n\t\t\t}\n\n\t\t\t// Consider stealing timers from p2.\n\t\t\t// This call to checkTimers is the only place where\n\t\t\t// we hold a lock on a different P's timers.\n\t\t\t// Lock contention can be a problem here, so\n\t\t\t// initially avoid grabbing the lock if p2 is running\n\t\t\t// and is not marked for preemption. If p2 is running\n\t\t\t// and not being preempted we assume it will handle its\n\t\t\t// own timers.\n\t\t\t// If we're still looking for work after checking all\n\t\t\t// the P's, then go ahead and steal from an active P.\n\t\t\tif i > 2 || (i > 1 && shouldStealTimers(p2)) {\n\t\t\t\ttnow, w, ran := checkTimers(p2, now)\n\t\t\t\tnow = tnow\n\t\t\t\tif w != 0 && (pollUntil == 0 || w < pollUntil) {\n\t\t\t\t\tpollUntil = w\n\t\t\t\t}\n\t\t\t\tif ran {\n\t\t\t\t\t// Running the timers may have\n\t\t\t\t\t// made an arbitrary number of G's\n\t\t\t\t\t// ready and added them to this P's\n\t\t\t\t\t// local run queue. That invalidates\n\t\t\t\t\t// the assumption of runqsteal\n\t\t\t\t\t// that is always has room to add\n\t\t\t\t\t// stolen G's. So check now if there\n\t\t\t\t\t// is a local G to run.\n\t\t\t\t\tif gp, inheritTime := runqget(_p_); gp != nil {\n\t\t\t\t\t\treturn gp, inheritTime\n\t\t\t\t\t}\n\t\t\t\t\tranTimer = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ranTimer {\n\t\t// Running a timer may have made some goroutine ready.\n\t\tgoto top\n\t}\n\nstop:\n\n\t// We have nothing to do. If we're in the GC mark phase, can\n\t// safely scan and blacken objects, and have work to do, run\n\t// idle-time marking rather than give up the P.\n\tif gcBlackenEnabled != 0 && _p_.gcBgMarkWorker != 0 && gcMarkWorkAvailable(_p_) {\n\t\t_p_.gcMarkWorkerMode = gcMarkWorkerIdleMode\n\t\tgp := _p_.gcBgMarkWorker.ptr()\n\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\tif trace.enabled {\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t}\n\t\treturn gp, false\n\t}\n\n\tdelta := int64(-1)\n\tif pollUntil != 0 {\n\t\t// checkTimers ensures that polluntil > now.\n\t\tdelta = pollUntil - now\n\t}\n\n\t// wasm only:\n\t// If a callback returned and no other goroutine is awake,\n\t// then wake event handler goroutine which pauses execution\n\t// until a callback was triggered.\n\tgp, otherReady := beforeIdle(delta)\n\tif gp != nil {\n\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\tif trace.enabled {\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t}\n\t\treturn gp, false\n\t}\n\tif otherReady {\n\t\tgoto top\n\t}\n\n\t// Before we drop our P, make a snapshot of the allp slice,\n\t// which can change underfoot once we no longer block\n\t// safe-points. We don't need to snapshot the contents because\n\t// everything up to cap(allp) is immutable.\n\tallpSnapshot := allp\n\n\t// return P and block\n\tlock(&sched.lock)\n\tif sched.gcwaiting != 0 || _p_.runSafePointFn != 0 {\n\t\tunlock(&sched.lock)\n\t\tgoto top\n\t}\n\tif sched.runqsize != 0 {\n\t\tgp := globrunqget(_p_, 0)\n\t\tunlock(&sched.lock)\n\t\treturn gp, false\n\t}\n\tif releasep() != _p_ {\n\t\tthrow(\"findrunnable: wrong p\")\n\t}\n\tpidleput(_p_)\n\tunlock(&sched.lock)\n\n\t// Delicate dance: thread transitions from spinning to non-spinning state,\n\t// potentially concurrently with submission of new goroutines. We must\n\t// drop nmspinning first and then check all per-P queues again (with\n\t// #StoreLoad memory barrier in between). If we do it the other way around,\n\t// another thread can submit a goroutine after we've checked all run queues\n\t// but before we drop nmspinning; as the result nobody will unpark a thread\n\t// to run the goroutine.\n\t// If we discover new work below, we need to restore m.spinning as a signal\n\t// for resetspinning to unpark a new worker thread (because there can be more\n\t// than one starving goroutine). However, if after discovering new work\n\t// we also observe no idle Ps, it is OK to just park the current thread:\n\t// the system is fully loaded so no spinning threads are required.\n\t// Also see \"Worker thread parking/unparking\" comment at the top of the file.\n\twasSpinning := _g_.m.spinning\n\tif _g_.m.spinning {\n\t\t_g_.m.spinning = false\n\t\tif int32(atomic.Xadd(&sched.nmspinning, -1)) < 0 {\n\t\t\tthrow(\"findrunnable: negative nmspinning\")\n\t\t}\n\t}\n\n\t// check all runqueues once again\n\tfor _, _p_ := range allpSnapshot {\n\t\tif !runqempty(_p_) {\n\t\t\tlock(&sched.lock)\n\t\t\t_p_ = pidleget()\n\t\t\tunlock(&sched.lock)\n\t\t\tif _p_ != nil {\n\t\t\t\tacquirep(_p_)\n\t\t\t\tif wasSpinning {\n\t\t\t\t\t_g_.m.spinning = true\n\t\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t\t}\n\t\t\t\tgoto top\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Check for idle-priority GC work again.\n\tif gcBlackenEnabled != 0 && gcMarkWorkAvailable(nil) {\n\t\tlock(&sched.lock)\n\t\t_p_ = pidleget()\n\t\tif _p_ != nil && _p_.gcBgMarkWorker == 0 {\n\t\t\tpidleput(_p_)\n\t\t\t_p_ = nil\n\t\t}\n\t\tunlock(&sched.lock)\n\t\tif _p_ != nil {\n\t\t\tacquirep(_p_)\n\t\t\tif wasSpinning {\n\t\t\t\t_g_.m.spinning = true\n\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t}\n\t\t\t// Go back to idle GC check.\n\t\t\tgoto stop\n\t\t}\n\t}\n\n\t// poll network\n\tif netpollinited() && (atomic.Load(&netpollWaiters) > 0 || pollUntil != 0) && atomic.Xchg64(&sched.lastpoll, 0) != 0 {\n\t\tatomic.Store64(&sched.pollUntil, uint64(pollUntil))\n\t\tif _g_.m.p != 0 {\n\t\t\tthrow(\"findrunnable: netpoll with p\")\n\t\t}\n\t\tif _g_.m.spinning {\n\t\t\tthrow(\"findrunnable: netpoll with spinning\")\n\t\t}\n\t\tif faketime != 0 {\n\t\t\t// When using fake time, just poll.\n\t\t\tdelta = 0\n\t\t}\n\t\tlist := netpoll(delta) // block until new work is available\n\t\tatomic.Store64(&sched.pollUntil, 0)\n\t\tatomic.Store64(&sched.lastpoll, uint64(nanotime()))\n\t\tif faketime != 0 && list.empty() {\n\t\t\t// Using fake time and nothing is ready; stop M.\n\t\t\t// When all M's stop, checkdead will call timejump.\n\t\t\tstopm()\n\t\t\tgoto top\n\t\t}\n\t\tlock(&sched.lock)\n\t\t_p_ = pidleget()\n\t\tunlock(&sched.lock)\n\t\tif _p_ == nil {\n\t\t\tinjectglist(&list)\n\t\t} else {\n\t\t\tacquirep(_p_)\n\t\t\tif !list.empty() {\n\t\t\t\tgp := list.pop()\n\t\t\t\tinjectglist(&list)\n\t\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\t\tif trace.enabled {\n\t\t\t\t\ttraceGoUnpark(gp, 0)\n\t\t\t\t}\n\t\t\t\treturn gp, false\n\t\t\t}\n\t\t\tif wasSpinning {\n\t\t\t\t_g_.m.spinning = true\n\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t}\n\t\t\tgoto top\n\t\t}\n\t} else if pollUntil != 0 && netpollinited() {\n\t\tpollerPollUntil := int64(atomic.Load64(&sched.pollUntil))\n\t\tif pollerPollUntil == 0 || pollerPollUntil > pollUntil {\n\t\t\tnetpollBreak()\n\t\t}\n\t}\n\tstopm()\n\tgoto top\n}\n```\n\n分析上述源码得知查找可用的g的过程如下：\n\n1. 调用 runqget ，尝试从P本地队列中获取g，获取到返回\n2. 调用 globrunqget ，尝试从全局队列中获取g，获取到返回\n3. 从网络IO轮询器中找到就绪的g，把这个g变为可运行的g\n4. 如果不是所有的P都是空闲的，最多四次，随机选一个P，尝试从这P中偷取一些g，获取到返回\n5. 上面都找不到g来运行，判断此时P是否处于 `GC mark` 阶段，如果是，那么此时可以安全的扫描和黑化对象和返回 `gcBgMarkWorker` 来运行， `gcBgMarkWorker` 是GC后代标记的goroutine。\n6. 再次从全局队列中获取g，获取到返回\n7. 再次检查所有的P，有没有可以运行的g\n8. 再次检查网络IO轮询器\n9. 实在找不到可运行的g了，那就调用 `stopm` 休眠吧\n\n## sysmon\n\ndlv调试：\n\n```shell\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.sysmon\nBreakpoint 1 set at 0x43a773 for runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642\n(dlv) c\n> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (hits total:1) (PC: 0x43a773)\nWarning: debugging optimized function\n  4637: var forcegcperiod int64 = 2 * 60 * 1e9\n  4638:\n  4639: // Always runs without a P, so write barriers are not allowed.\n  4640: //\n  4641: //go:nowritebarrierrec\n=>4642: func sysmon() {\n  4643:         lock(&sched.lock)\n  4644:         sched.nmsys++\n  4645:         checkdead()\n  4646:         unlock(&sched.lock)\n  4647:\n(dlv) si\n> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (PC: 0x43a777)\nWarning: debugging optimized function\n  4637: var forcegcperiod int64 = 2 * 60 * 1e9\n  4638:\n  4639: // Always runs without a P, so write barriers are not allowed.\n  4640: //\n  4641: //go:nowritebarrierrec\n=>4642: func sysmon() {\n  4643:         lock(&sched.lock)\n  4644:         sched.nmsys++\n  4645:         checkdead()\n  4646:         unlock(&sched.lock)\n  4647:\n```\n\n\n\n全部源码：\n\n```go\nfunc sysmon() {\n\tlock(&sched.lock)\n\tsched.nmsys++\n\tcheckdead()\n\tunlock(&sched.lock)\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor {\n\t\tif idle == 0 { // start with 20us sleep...\n\t\t\tdelay = 20\n\t\t} else if idle > 50 { // start doubling the sleep after 1ms...\n\t\t\tdelay *= 2\n\t\t}\n\t\tif delay > 10*1000 { // up to 10ms\n\t\t\tdelay = 10 * 1000\n\t\t}\n\t\tusleep(delay)\n\t\tnow := nanotime()\n\t\tnext, _ := timeSleepUntil()\n\t\tif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t\tlock(&sched.sysmonlock)\n\t\t{\n\t\t\t// If we spent a long time blocked on sysmonlock\n\t\t\t// then we want to update now and next since it's\n\t\t\t// likely stale.\n\t\t\tnow1 := nanotime()\n\t\t\tif now1-now > 50*1000 /* 50µs */ {\n\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t}\n\t\t\tnow = now1\n\t\t}\n\n\t\t// trigger libc interceptors if needed\n\t\tif *cgo_yield != nil {\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t\t// poll network if not polled for more than 10ms\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\tstartm(nil, false)\n\t\t}\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n\t\t// check if we need to force a GC\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n\t\tif debug.schedtrace > 0 && lasttrace+int64(debug.schedtrace)*1000000 <= now {\n\t\t\tlasttrace = now\n\t\t\tschedtrace(debug.scheddetail > 0)\n\t\t}\n\t\tunlock(&sched.sysmonlock)\n\t}\n}\n```\n\n`sysmon` 周期性地检查并retake p， 如果发现p处于这个状态且超过10ms就会强制性收回p，m从cgo和syscall返回后会重新尝试拿p，进入调度循环。\n","source":"_posts/golang运行时核心调度函数-schedule，findrunnable，sysmon-源码分析.md","raw":"---\ntitle: golang运行时核心调度函数(schedule，findrunnable，sysmon)源码分析\ndate: 2021-10-06 11:35:02\nindex_img: /img/golang/go.jpg\nbanner_img:\ncategories: \n- golang\ntags:\n- runtime\n- schedule\n- findrunnable\n- sysmon\n---\n\n# 概述\n\n分析核心调度函数 shcedule findrunnable sysmon\n\n## schedule\n\n\n\ndlv调试：\n\n```shell\n(dlv) b runtime.schedule\nBreakpoint 1 set at 0x435cf3 for runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609\n(dlv) c\n> runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609 (hits total:1) (PC: 0x435cf3)\nWarning: debugging optimized function\n  2604:         }\n  2605: }\n  2606:\n  2607: // One round of scheduler: find a runnable goroutine and execute it.\n  2608: // Never returns.\n=>2609: func schedule() {\n  2610:         _g_ := getg()\n  2611:\n  2612:         if _g_.m.locks != 0 {\n  2613:                 throw(\"schedule: holding locks\")\n  2614:         }\n```\n\n全部的源码内容如下：\n\n```go\nfunc schedule() {\n\t_g_ := getg()\n\n\tif _g_.m.locks != 0 {\n\t\tthrow(\"schedule: holding locks\")\n\t}\n\n\tif _g_.m.lockedg != 0 {\n\t\tstoplockedm()\n\t\texecute(_g_.m.lockedg.ptr(), false) // Never returns.\n\t}\n\n\t// We should not schedule away from a g that is executing a cgo call,\n\t// since the cgo call is using the m's g0 stack.\n\tif _g_.m.incgo {\n\t\tthrow(\"schedule: in cgo\")\n\t}\n\ntop:\n\tpp := _g_.m.p.ptr()\n\tpp.preempt = false\n\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n\tif pp.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n\n\t// Sanity check: if we are spinning, the run queue should be empty.\n\t// Check this before calling checkTimers, as that might call\n\t// goready to put a ready goroutine on the local run queue.\n\tif _g_.m.spinning && (pp.runnext != 0 || pp.runqhead != pp.runqtail) {\n\t\tthrow(\"schedule: spinning with local work\")\n\t}\n\n\tcheckTimers(pp, 0)\n\n\tvar gp *g\n\tvar inheritTime bool\n\n\t// Normal goroutines will check for need to wakeP in ready,\n\t// but GCworkers and tracereaders will not, so the check must\n\t// be done here instead.\n\ttryWakeP := false\n\tif trace.enabled || trace.shutdown {\n\t\tgp = traceReader()\n\t\tif gp != nil {\n\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t\ttryWakeP = true\n\t\t}\n\t}\n\tif gp == nil && gcBlackenEnabled != 0 {\n\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())\n\t\ttryWakeP = tryWakeP || gp != nil\n\t}\n\tif gp == nil {\n\t\t// Check the global runnable queue once in a while to ensure fairness.\n\t\t// Otherwise two goroutines can completely occupy the local runqueue\n\t\t// by constantly respawning each other.\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t\t// We can see gp != nil here even if the M is spinning,\n\t\t// if checkTimers added a local goroutine via goready.\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = findrunnable() // blocks until work is available\n\t}\n\n\t// This thread is going to run a goroutine and is not spinning anymore,\n\t// so if it was marked as spinning we need to reset it now and potentially\n\t// start a new spinning M.\n\tif _g_.m.spinning {\n\t\tresetspinning()\n\t}\n\n\tif sched.disable.user && !schedEnabled(gp) {\n\t\t// Scheduling of this goroutine is disabled. Put it on\n\t\t// the list of pending runnable goroutines for when we\n\t\t// re-enable user scheduling and look again.\n\t\tlock(&sched.lock)\n\t\tif schedEnabled(gp) {\n\t\t\t// Something re-enabled scheduling while we\n\t\t\t// were acquiring the lock.\n\t\t\tunlock(&sched.lock)\n\t\t} else {\n\t\t\tsched.disable.runnable.pushBack(gp)\n\t\t\tsched.disable.n++\n\t\t\tunlock(&sched.lock)\n\t\t\tgoto top\n\t\t}\n\t}\n\n\t// If about to schedule a not-normal goroutine (a GCworker or tracereader),\n\t// wake a P if there is one.\n\tif tryWakeP {\n\t\twakep()\n\t}\n\tif gp.lockedm != 0 {\n\t\t// Hands off own p to the locked m,\n\t\t// then blocks waiting for a new p.\n\t\tstartlockedm(gp)\n\t\tgoto top\n\t}\n\n\texecute(gp, inheritTime)\n}\n```\n\n忽略GC和trace后分析源码发现shedule函数本质就是尽力找到可运行的g，然后去运行g上面的任务函数。查找g的流程如下：\n\n1. 如果当前GC需要停止整个世界（STW), 则调用gcstopm休眠当前的M\n2. 每隔61次调度轮回从全局队列找，避免全局队列中的g被饿死。\n3. 从p.runnext获取g，从p的本地队列中获取。\n4. 调用 `findrunnable` 找g，找不到的话就将m休眠，等待唤醒。\n\n当找到一个g后，就会调用 `execute` 去执行g。\n\n\n\n## findrunnable\n\ndlv调试：\n\n```shell\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.findrunnable\nBreakpoint 1 set at 0x4348d8 for runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189\n(dlv) c\n> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (hits total:1) (PC: 0x4348d8)\nWarning: debugging optimized function\n  2184:         gogo(&gp.sched)\n  2185: }\n  2186:\n  2187: // Finds a runnable goroutine to execute.\n  2188: // Tries to steal from other P's, get g from local or global queue, poll network.\n=>2189: func findrunnable() (gp *g, inheritTime bool) {\n  2190:         _g_ := getg()\n  2191:\n  2192:         // The conditions here and in handoffp must agree: if\n  2193:         // findrunnable would return a G to run, handoffp must start\n  2194:         // an M.\n(dlv) si\n> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (PC: 0x4348df)\nWarning: debugging optimized function\n  2184:         gogo(&gp.sched)\n  2185: }\n  2186:\n  2187: // Finds a runnable goroutine to execute.\n  2188: // Tries to steal from other P's, get g from local or global queue, poll network.\n=>2189: func findrunnable() (gp *g, inheritTime bool) {\n  2190:         _g_ := getg()\n  2191:\n  2192:         // The conditions here and in handoffp must agree: if\n  2193:         // findrunnable would return a G to run, handoffp must start\n  2194:         // an M.\n```\n\n\n\n全部源代码如下：\n\n```go\nfunc findrunnable() (gp *g, inheritTime bool) {\n\t_g_ := getg()\n\n\t// The conditions here and in handoffp must agree: if\n\t// findrunnable would return a G to run, handoffp must start\n\t// an M.\n\ntop:\n\t_p_ := _g_.m.p.ptr()\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n\tif _p_.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n\n\tnow, pollUntil, _ := checkTimers(_p_, 0)\n\n\tif fingwait && fingwake {\n\t\tif gp := wakefing(); gp != nil {\n\t\t\tready(gp, 0, true)\n\t\t}\n\t}\n\tif *cgo_yield != nil {\n\t\tasmcgocall(*cgo_yield, nil)\n\t}\n\n\t// local runq\n\tif gp, inheritTime := runqget(_p_); gp != nil {\n\t\treturn gp, inheritTime\n\t}\n\n\t// global runq\n\tif sched.runqsize != 0 {\n\t\tlock(&sched.lock)\n\t\tgp := globrunqget(_p_, 0)\n\t\tunlock(&sched.lock)\n\t\tif gp != nil {\n\t\t\treturn gp, false\n\t\t}\n\t}\n\n\t// Poll network.\n\t// This netpoll is only an optimization before we resort to stealing.\n\t// We can safely skip it if there are no waiters or a thread is blocked\n\t// in netpoll already. If there is any kind of logical race with that\n\t// blocked thread (e.g. it has already returned from netpoll, but does\n\t// not set lastpoll yet), this thread will do blocking netpoll below\n\t// anyway.\n\tif netpollinited() && atomic.Load(&netpollWaiters) > 0 && atomic.Load64(&sched.lastpoll) != 0 {\n\t\tif list := netpoll(0); !list.empty() { // non-blocking\n\t\t\tgp := list.pop()\n\t\t\tinjectglist(&list)\n\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\tif trace.enabled {\n\t\t\t\ttraceGoUnpark(gp, 0)\n\t\t\t}\n\t\t\treturn gp, false\n\t\t}\n\t}\n\n\t// Steal work from other P's.\n\tprocs := uint32(gomaxprocs)\n\tranTimer := false\n\t// If number of spinning M's >= number of busy P's, block.\n\t// This is necessary to prevent excessive CPU consumption\n\t// when GOMAXPROCS>>1 but the program parallelism is low.\n\tif !_g_.m.spinning && 2*atomic.Load(&sched.nmspinning) >= procs-atomic.Load(&sched.npidle) {\n\t\tgoto stop\n\t}\n\tif !_g_.m.spinning {\n\t\t_g_.m.spinning = true\n\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t}\n\tfor i := 0; i < 4; i++ {\n\t\tfor enum := stealOrder.start(fastrand()); !enum.done(); enum.next() {\n\t\t\tif sched.gcwaiting != 0 {\n\t\t\t\tgoto top\n\t\t\t}\n\t\t\tstealRunNextG := i > 2 // first look for ready queues with more than 1 g\n\t\t\tp2 := allp[enum.position()]\n\t\t\tif _p_ == p2 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif gp := runqsteal(_p_, p2, stealRunNextG); gp != nil {\n\t\t\t\treturn gp, false\n\t\t\t}\n\n\t\t\t// Consider stealing timers from p2.\n\t\t\t// This call to checkTimers is the only place where\n\t\t\t// we hold a lock on a different P's timers.\n\t\t\t// Lock contention can be a problem here, so\n\t\t\t// initially avoid grabbing the lock if p2 is running\n\t\t\t// and is not marked for preemption. If p2 is running\n\t\t\t// and not being preempted we assume it will handle its\n\t\t\t// own timers.\n\t\t\t// If we're still looking for work after checking all\n\t\t\t// the P's, then go ahead and steal from an active P.\n\t\t\tif i > 2 || (i > 1 && shouldStealTimers(p2)) {\n\t\t\t\ttnow, w, ran := checkTimers(p2, now)\n\t\t\t\tnow = tnow\n\t\t\t\tif w != 0 && (pollUntil == 0 || w < pollUntil) {\n\t\t\t\t\tpollUntil = w\n\t\t\t\t}\n\t\t\t\tif ran {\n\t\t\t\t\t// Running the timers may have\n\t\t\t\t\t// made an arbitrary number of G's\n\t\t\t\t\t// ready and added them to this P's\n\t\t\t\t\t// local run queue. That invalidates\n\t\t\t\t\t// the assumption of runqsteal\n\t\t\t\t\t// that is always has room to add\n\t\t\t\t\t// stolen G's. So check now if there\n\t\t\t\t\t// is a local G to run.\n\t\t\t\t\tif gp, inheritTime := runqget(_p_); gp != nil {\n\t\t\t\t\t\treturn gp, inheritTime\n\t\t\t\t\t}\n\t\t\t\t\tranTimer = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ranTimer {\n\t\t// Running a timer may have made some goroutine ready.\n\t\tgoto top\n\t}\n\nstop:\n\n\t// We have nothing to do. If we're in the GC mark phase, can\n\t// safely scan and blacken objects, and have work to do, run\n\t// idle-time marking rather than give up the P.\n\tif gcBlackenEnabled != 0 && _p_.gcBgMarkWorker != 0 && gcMarkWorkAvailable(_p_) {\n\t\t_p_.gcMarkWorkerMode = gcMarkWorkerIdleMode\n\t\tgp := _p_.gcBgMarkWorker.ptr()\n\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\tif trace.enabled {\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t}\n\t\treturn gp, false\n\t}\n\n\tdelta := int64(-1)\n\tif pollUntil != 0 {\n\t\t// checkTimers ensures that polluntil > now.\n\t\tdelta = pollUntil - now\n\t}\n\n\t// wasm only:\n\t// If a callback returned and no other goroutine is awake,\n\t// then wake event handler goroutine which pauses execution\n\t// until a callback was triggered.\n\tgp, otherReady := beforeIdle(delta)\n\tif gp != nil {\n\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\tif trace.enabled {\n\t\t\ttraceGoUnpark(gp, 0)\n\t\t}\n\t\treturn gp, false\n\t}\n\tif otherReady {\n\t\tgoto top\n\t}\n\n\t// Before we drop our P, make a snapshot of the allp slice,\n\t// which can change underfoot once we no longer block\n\t// safe-points. We don't need to snapshot the contents because\n\t// everything up to cap(allp) is immutable.\n\tallpSnapshot := allp\n\n\t// return P and block\n\tlock(&sched.lock)\n\tif sched.gcwaiting != 0 || _p_.runSafePointFn != 0 {\n\t\tunlock(&sched.lock)\n\t\tgoto top\n\t}\n\tif sched.runqsize != 0 {\n\t\tgp := globrunqget(_p_, 0)\n\t\tunlock(&sched.lock)\n\t\treturn gp, false\n\t}\n\tif releasep() != _p_ {\n\t\tthrow(\"findrunnable: wrong p\")\n\t}\n\tpidleput(_p_)\n\tunlock(&sched.lock)\n\n\t// Delicate dance: thread transitions from spinning to non-spinning state,\n\t// potentially concurrently with submission of new goroutines. We must\n\t// drop nmspinning first and then check all per-P queues again (with\n\t// #StoreLoad memory barrier in between). If we do it the other way around,\n\t// another thread can submit a goroutine after we've checked all run queues\n\t// but before we drop nmspinning; as the result nobody will unpark a thread\n\t// to run the goroutine.\n\t// If we discover new work below, we need to restore m.spinning as a signal\n\t// for resetspinning to unpark a new worker thread (because there can be more\n\t// than one starving goroutine). However, if after discovering new work\n\t// we also observe no idle Ps, it is OK to just park the current thread:\n\t// the system is fully loaded so no spinning threads are required.\n\t// Also see \"Worker thread parking/unparking\" comment at the top of the file.\n\twasSpinning := _g_.m.spinning\n\tif _g_.m.spinning {\n\t\t_g_.m.spinning = false\n\t\tif int32(atomic.Xadd(&sched.nmspinning, -1)) < 0 {\n\t\t\tthrow(\"findrunnable: negative nmspinning\")\n\t\t}\n\t}\n\n\t// check all runqueues once again\n\tfor _, _p_ := range allpSnapshot {\n\t\tif !runqempty(_p_) {\n\t\t\tlock(&sched.lock)\n\t\t\t_p_ = pidleget()\n\t\t\tunlock(&sched.lock)\n\t\t\tif _p_ != nil {\n\t\t\t\tacquirep(_p_)\n\t\t\t\tif wasSpinning {\n\t\t\t\t\t_g_.m.spinning = true\n\t\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t\t}\n\t\t\t\tgoto top\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Check for idle-priority GC work again.\n\tif gcBlackenEnabled != 0 && gcMarkWorkAvailable(nil) {\n\t\tlock(&sched.lock)\n\t\t_p_ = pidleget()\n\t\tif _p_ != nil && _p_.gcBgMarkWorker == 0 {\n\t\t\tpidleput(_p_)\n\t\t\t_p_ = nil\n\t\t}\n\t\tunlock(&sched.lock)\n\t\tif _p_ != nil {\n\t\t\tacquirep(_p_)\n\t\t\tif wasSpinning {\n\t\t\t\t_g_.m.spinning = true\n\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t}\n\t\t\t// Go back to idle GC check.\n\t\t\tgoto stop\n\t\t}\n\t}\n\n\t// poll network\n\tif netpollinited() && (atomic.Load(&netpollWaiters) > 0 || pollUntil != 0) && atomic.Xchg64(&sched.lastpoll, 0) != 0 {\n\t\tatomic.Store64(&sched.pollUntil, uint64(pollUntil))\n\t\tif _g_.m.p != 0 {\n\t\t\tthrow(\"findrunnable: netpoll with p\")\n\t\t}\n\t\tif _g_.m.spinning {\n\t\t\tthrow(\"findrunnable: netpoll with spinning\")\n\t\t}\n\t\tif faketime != 0 {\n\t\t\t// When using fake time, just poll.\n\t\t\tdelta = 0\n\t\t}\n\t\tlist := netpoll(delta) // block until new work is available\n\t\tatomic.Store64(&sched.pollUntil, 0)\n\t\tatomic.Store64(&sched.lastpoll, uint64(nanotime()))\n\t\tif faketime != 0 && list.empty() {\n\t\t\t// Using fake time and nothing is ready; stop M.\n\t\t\t// When all M's stop, checkdead will call timejump.\n\t\t\tstopm()\n\t\t\tgoto top\n\t\t}\n\t\tlock(&sched.lock)\n\t\t_p_ = pidleget()\n\t\tunlock(&sched.lock)\n\t\tif _p_ == nil {\n\t\t\tinjectglist(&list)\n\t\t} else {\n\t\t\tacquirep(_p_)\n\t\t\tif !list.empty() {\n\t\t\t\tgp := list.pop()\n\t\t\t\tinjectglist(&list)\n\t\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)\n\t\t\t\tif trace.enabled {\n\t\t\t\t\ttraceGoUnpark(gp, 0)\n\t\t\t\t}\n\t\t\t\treturn gp, false\n\t\t\t}\n\t\t\tif wasSpinning {\n\t\t\t\t_g_.m.spinning = true\n\t\t\t\tatomic.Xadd(&sched.nmspinning, 1)\n\t\t\t}\n\t\t\tgoto top\n\t\t}\n\t} else if pollUntil != 0 && netpollinited() {\n\t\tpollerPollUntil := int64(atomic.Load64(&sched.pollUntil))\n\t\tif pollerPollUntil == 0 || pollerPollUntil > pollUntil {\n\t\t\tnetpollBreak()\n\t\t}\n\t}\n\tstopm()\n\tgoto top\n}\n```\n\n分析上述源码得知查找可用的g的过程如下：\n\n1. 调用 runqget ，尝试从P本地队列中获取g，获取到返回\n2. 调用 globrunqget ，尝试从全局队列中获取g，获取到返回\n3. 从网络IO轮询器中找到就绪的g，把这个g变为可运行的g\n4. 如果不是所有的P都是空闲的，最多四次，随机选一个P，尝试从这P中偷取一些g，获取到返回\n5. 上面都找不到g来运行，判断此时P是否处于 `GC mark` 阶段，如果是，那么此时可以安全的扫描和黑化对象和返回 `gcBgMarkWorker` 来运行， `gcBgMarkWorker` 是GC后代标记的goroutine。\n6. 再次从全局队列中获取g，获取到返回\n7. 再次检查所有的P，有没有可以运行的g\n8. 再次检查网络IO轮询器\n9. 实在找不到可运行的g了，那就调用 `stopm` 休眠吧\n\n## sysmon\n\ndlv调试：\n\n```shell\n[root@583d9a8ec1db p1]# dlv exec ./main\nType 'help' for list of commands.\n(dlv) b runtime.sysmon\nBreakpoint 1 set at 0x43a773 for runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642\n(dlv) c\n> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (hits total:1) (PC: 0x43a773)\nWarning: debugging optimized function\n  4637: var forcegcperiod int64 = 2 * 60 * 1e9\n  4638:\n  4639: // Always runs without a P, so write barriers are not allowed.\n  4640: //\n  4641: //go:nowritebarrierrec\n=>4642: func sysmon() {\n  4643:         lock(&sched.lock)\n  4644:         sched.nmsys++\n  4645:         checkdead()\n  4646:         unlock(&sched.lock)\n  4647:\n(dlv) si\n> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (PC: 0x43a777)\nWarning: debugging optimized function\n  4637: var forcegcperiod int64 = 2 * 60 * 1e9\n  4638:\n  4639: // Always runs without a P, so write barriers are not allowed.\n  4640: //\n  4641: //go:nowritebarrierrec\n=>4642: func sysmon() {\n  4643:         lock(&sched.lock)\n  4644:         sched.nmsys++\n  4645:         checkdead()\n  4646:         unlock(&sched.lock)\n  4647:\n```\n\n\n\n全部源码：\n\n```go\nfunc sysmon() {\n\tlock(&sched.lock)\n\tsched.nmsys++\n\tcheckdead()\n\tunlock(&sched.lock)\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor {\n\t\tif idle == 0 { // start with 20us sleep...\n\t\t\tdelay = 20\n\t\t} else if idle > 50 { // start doubling the sleep after 1ms...\n\t\t\tdelay *= 2\n\t\t}\n\t\tif delay > 10*1000 { // up to 10ms\n\t\t\tdelay = 10 * 1000\n\t\t}\n\t\tusleep(delay)\n\t\tnow := nanotime()\n\t\tnext, _ := timeSleepUntil()\n\t\tif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t\tlock(&sched.sysmonlock)\n\t\t{\n\t\t\t// If we spent a long time blocked on sysmonlock\n\t\t\t// then we want to update now and next since it's\n\t\t\t// likely stale.\n\t\t\tnow1 := nanotime()\n\t\t\tif now1-now > 50*1000 /* 50µs */ {\n\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t}\n\t\t\tnow = now1\n\t\t}\n\n\t\t// trigger libc interceptors if needed\n\t\tif *cgo_yield != nil {\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t\t// poll network if not polled for more than 10ms\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\tstartm(nil, false)\n\t\t}\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n\t\t// check if we need to force a GC\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n\t\tif debug.schedtrace > 0 && lasttrace+int64(debug.schedtrace)*1000000 <= now {\n\t\t\tlasttrace = now\n\t\t\tschedtrace(debug.scheddetail > 0)\n\t\t}\n\t\tunlock(&sched.sysmonlock)\n\t}\n}\n```\n\n`sysmon` 周期性地检查并retake p， 如果发现p处于这个状态且超过10ms就会强制性收回p，m从cgo和syscall返回后会重新尝试拿p，进入调度循环。\n","slug":"golang运行时核心调度函数-schedule，findrunnable，sysmon-源码分析","published":1,"updated":"2021-10-06T09:33:35.467Z","_id":"ckueyrodp00007b8z2lt0fogc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>分析核心调度函数 shcedule findrunnable sysmon</p>\n<h2 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">(dlv) b runtime.schedule<br>Breakpoint 1 set at 0x435cf3 for runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609 (hits total:1) (PC: 0x435cf3)</span><br>Warning: debugging optimized function<br>  2604:         &#125;<br>  2605: &#125;<br>  2606:<br>  2607: // One round of scheduler: find a runnable goroutine and execute it.<br>  2608: // Never returns.<br>=&gt;2609: func schedule() &#123;<br>  2610:         _g_ := getg()<br>  2611:<br>  2612:         if _g_.m.locks != 0 &#123;<br>  2613:                 throw(&quot;schedule: holding locks&quot;)<br>  2614:         &#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>全部的源码内容如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">schedule</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t_g_ := getg()<br><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.locks != <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: holding locks&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.lockedg != <span class=\"hljs-number\">0</span> &#123;<br>\t\tstoplockedm()<br>\t\texecute(_g_.m.lockedg.ptr(), <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// Never returns.</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// We should not schedule away from a g that is executing a cgo call,</span><br>\t<span class=\"hljs-comment\">// since the cgo call is using the m&#x27;s g0 stack.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.incgo &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: in cgo&quot;</span>)<br>\t&#125;<br><br>top:<br>\tpp := _g_.m.p.ptr()<br>\tpp.preempt = <span class=\"hljs-literal\">false</span><br><br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgcstopm()<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pp.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\trunSafePointFn()<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Sanity check: if we are spinning, the run queue should be empty.</span><br>\t<span class=\"hljs-comment\">// Check this before calling checkTimers, as that might call</span><br>\t<span class=\"hljs-comment\">// goready to put a ready goroutine on the local run queue.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &amp;&amp; (pp.runnext != <span class=\"hljs-number\">0</span> || pp.runqhead != pp.runqtail) &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: spinning with local work&quot;</span>)<br>\t&#125;<br><br>\tcheckTimers(pp, <span class=\"hljs-number\">0</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> gp *g<br>\t<span class=\"hljs-keyword\">var</span> inheritTime <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-comment\">// Normal goroutines will check for need to wakeP in ready,</span><br>\t<span class=\"hljs-comment\">// but GCworkers and tracereaders will not, so the check must</span><br>\t<span class=\"hljs-comment\">// be done here instead.</span><br>\ttryWakeP := <span class=\"hljs-literal\">false</span><br>\t<span class=\"hljs-keyword\">if</span> trace.enabled || trace.shutdown &#123;<br>\t\tgp = traceReader()<br>\t\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\ttryWakeP = <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &amp;&amp; gcBlackenEnabled != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())<br>\t\ttryWakeP = tryWakeP || gp != <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Check the global runnable queue once in a while to ensure fairness.</span><br>\t\t<span class=\"hljs-comment\">// Otherwise two goroutines can completely occupy the local runqueue</span><br>\t\t<span class=\"hljs-comment\">// by constantly respawning each other.</span><br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.p.ptr().schedtick%<span class=\"hljs-number\">61</span> == <span class=\"hljs-number\">0</span> &amp;&amp; sched.runqsize &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\tgp = globrunqget(_g_.m.p.ptr(), <span class=\"hljs-number\">1</span>)<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgp, inheritTime = runqget(_g_.m.p.ptr())<br>\t\t<span class=\"hljs-comment\">// We can see gp != nil here even if the M is spinning,</span><br>\t\t<span class=\"hljs-comment\">// if checkTimers added a local goroutine via goready.</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgp, inheritTime = findrunnable() <span class=\"hljs-comment\">// blocks until work is available</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// This thread is going to run a goroutine and is not spinning anymore,</span><br>\t<span class=\"hljs-comment\">// so if it was marked as spinning we need to reset it now and potentially</span><br>\t<span class=\"hljs-comment\">// start a new spinning M.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\tresetspinning()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> sched.disable.user &amp;&amp; !schedEnabled(gp) &#123;<br>\t\t<span class=\"hljs-comment\">// Scheduling of this goroutine is disabled. Put it on</span><br>\t\t<span class=\"hljs-comment\">// the list of pending runnable goroutines for when we</span><br>\t\t<span class=\"hljs-comment\">// re-enable user scheduling and look again.</span><br>\t\tlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> schedEnabled(gp) &#123;<br>\t\t\t<span class=\"hljs-comment\">// Something re-enabled scheduling while we</span><br>\t\t\t<span class=\"hljs-comment\">// were acquiring the lock.</span><br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tsched.disable.runnable.pushBack(gp)<br>\t\t\tsched.disable.n++<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// If about to schedule a not-normal goroutine (a GCworker or tracereader),</span><br>\t<span class=\"hljs-comment\">// wake a P if there is one.</span><br>\t<span class=\"hljs-keyword\">if</span> tryWakeP &#123;<br>\t\twakep()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp.lockedm != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Hands off own p to the locked m,</span><br>\t\t<span class=\"hljs-comment\">// then blocks waiting for a new p.</span><br>\t\tstartlockedm(gp)<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>\texecute(gp, inheritTime)<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>忽略GC和trace后分析源码发现shedule函数本质就是尽力找到可运行的g，然后去运行g上面的任务函数。查找g的流程如下：</p>\n<ol>\n<li>如果当前GC需要停止整个世界（STW), 则调用gcstopm休眠当前的M</li>\n<li>每隔61次调度轮回从全局队列找，避免全局队列中的g被饿死。</li>\n<li>从p.runnext获取g，从p的本地队列中获取。</li>\n<li>调用 <code>findrunnable</code> 找g，找不到的话就将m休眠，等待唤醒。</li>\n</ol>\n<p>当找到一个g后，就会调用 <code>execute</code> 去执行g。</p>\n<h2 id=\"findrunnable\"><a href=\"#findrunnable\" class=\"headerlink\" title=\"findrunnable\"></a>findrunnable</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.findrunnable<br>Breakpoint 1 set at 0x4348d8 for runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (hits total:1) (PC: 0x4348d8)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br>(dlv) si<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (PC: 0x4348df)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>全部源代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findrunnable</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(gp *g, inheritTime <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>\t_g_ := getg()<br><br>\t<span class=\"hljs-comment\">// The conditions here and in handoffp must agree: if</span><br>\t<span class=\"hljs-comment\">// findrunnable would return a G to run, handoffp must start</span><br>\t<span class=\"hljs-comment\">// an M.</span><br><br>top:<br>\t_p_ := _g_.m.p.ptr()<br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgcstopm()<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> _p_.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\trunSafePointFn()<br>\t&#125;<br><br>\tnow, pollUntil, _ := checkTimers(_p_, <span class=\"hljs-number\">0</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> fingwait &amp;&amp; fingwake &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> gp := wakefing(); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tready(gp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> *cgo_yield != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tasmcgocall(*cgo_yield, <span class=\"hljs-literal\">nil</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// local runq</span><br>\t<span class=\"hljs-keyword\">if</span> gp, inheritTime := runqget(_p_); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, inheritTime<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// global runq</span><br>\t<span class=\"hljs-keyword\">if</span> sched.runqsize != <span class=\"hljs-number\">0</span> &#123;<br>\t\tlock(&amp;sched.lock)<br>\t\tgp := globrunqget(_p_, <span class=\"hljs-number\">0</span>)<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Poll network.</span><br>\t<span class=\"hljs-comment\">// This netpoll is only an optimization before we resort to stealing.</span><br>\t<span class=\"hljs-comment\">// We can safely skip it if there are no waiters or a thread is blocked</span><br>\t<span class=\"hljs-comment\">// in netpoll already. If there is any kind of logical race with that</span><br>\t<span class=\"hljs-comment\">// blocked thread (e.g. it has already returned from netpoll, but does</span><br>\t<span class=\"hljs-comment\">// not set lastpoll yet), this thread will do blocking netpoll below</span><br>\t<span class=\"hljs-comment\">// anyway.</span><br>\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; atomic.Load(&amp;netpollWaiters) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; atomic.Load64(&amp;sched.lastpoll) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> list := netpoll(<span class=\"hljs-number\">0</span>); !list.empty() &#123; <span class=\"hljs-comment\">// non-blocking</span><br>\t\t\tgp := list.pop()<br>\t\t\tinjectglist(&amp;list)<br>\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Steal work from other P&#x27;s.</span><br>\tprocs := <span class=\"hljs-keyword\">uint32</span>(gomaxprocs)<br>\tranTimer := <span class=\"hljs-literal\">false</span><br>\t<span class=\"hljs-comment\">// If number of spinning M&#x27;s &gt;= number of busy P&#x27;s, block.</span><br>\t<span class=\"hljs-comment\">// This is necessary to prevent excessive CPU consumption</span><br>\t<span class=\"hljs-comment\">// when GOMAXPROCS&gt;&gt;1 but the program parallelism is low.</span><br>\t<span class=\"hljs-keyword\">if</span> !_g_.m.spinning &amp;&amp; <span class=\"hljs-number\">2</span>*atomic.Load(&amp;sched.nmspinning) &gt;= procs-atomic.Load(&amp;sched.npidle) &#123;<br>\t\t<span class=\"hljs-keyword\">goto</span> stop<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> !_g_.m.spinning &#123;<br>\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> enum := stealOrder.start(fastrand()); !enum.done(); enum.next() &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t\t&#125;<br>\t\t\tstealRunNextG := i &gt; <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// first look for ready queues with more than 1 g</span><br>\t\t\tp2 := allp[enum.position()]<br>\t\t\t<span class=\"hljs-keyword\">if</span> _p_ == p2 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> gp := runqsteal(_p_, p2, stealRunNextG); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">// Consider stealing timers from p2.</span><br>\t\t\t<span class=\"hljs-comment\">// This call to checkTimers is the only place where</span><br>\t\t\t<span class=\"hljs-comment\">// we hold a lock on a different P&#x27;s timers.</span><br>\t\t\t<span class=\"hljs-comment\">// Lock contention can be a problem here, so</span><br>\t\t\t<span class=\"hljs-comment\">// initially avoid grabbing the lock if p2 is running</span><br>\t\t\t<span class=\"hljs-comment\">// and is not marked for preemption. If p2 is running</span><br>\t\t\t<span class=\"hljs-comment\">// and not being preempted we assume it will handle its</span><br>\t\t\t<span class=\"hljs-comment\">// own timers.</span><br>\t\t\t<span class=\"hljs-comment\">// If we&#x27;re still looking for work after checking all</span><br>\t\t\t<span class=\"hljs-comment\">// the P&#x27;s, then go ahead and steal from an active P.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span> || (i &gt; <span class=\"hljs-number\">1</span> &amp;&amp; shouldStealTimers(p2)) &#123;<br>\t\t\t\ttnow, w, ran := checkTimers(p2, now)<br>\t\t\t\tnow = tnow<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> w != <span class=\"hljs-number\">0</span> &amp;&amp; (pollUntil == <span class=\"hljs-number\">0</span> || w &lt; pollUntil) &#123;<br>\t\t\t\t\tpollUntil = w<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> ran &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">// Running the timers may have</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// made an arbitrary number of G&#x27;s</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// ready and added them to this P&#x27;s</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// local run queue. That invalidates</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// the assumption of runqsteal</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// that is always has room to add</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// stolen G&#x27;s. So check now if there</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// is a local G to run.</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> gp, inheritTime := runqget(_p_); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, inheritTime<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tranTimer = <span class=\"hljs-literal\">true</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> ranTimer &#123;<br>\t\t<span class=\"hljs-comment\">// Running a timer may have made some goroutine ready.</span><br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>stop:<br><br>\t<span class=\"hljs-comment\">// We have nothing to do. If we&#x27;re in the GC mark phase, can</span><br>\t<span class=\"hljs-comment\">// safely scan and blacken objects, and have work to do, run</span><br>\t<span class=\"hljs-comment\">// idle-time marking rather than give up the P.</span><br>\t<span class=\"hljs-keyword\">if</span> gcBlackenEnabled != <span class=\"hljs-number\">0</span> &amp;&amp; _p_.gcBgMarkWorker != <span class=\"hljs-number\">0</span> &amp;&amp; gcMarkWorkAvailable(_p_) &#123;<br>\t\t_p_.gcMarkWorkerMode = gcMarkWorkerIdleMode<br>\t\tgp := _p_.gcBgMarkWorker.ptr()<br>\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tdelta := <span class=\"hljs-keyword\">int64</span>(<span class=\"hljs-number\">-1</span>)<br>\t<span class=\"hljs-keyword\">if</span> pollUntil != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// checkTimers ensures that polluntil &gt; now.</span><br>\t\tdelta = pollUntil - now<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// wasm only:</span><br>\t<span class=\"hljs-comment\">// If a callback returned and no other goroutine is awake,</span><br>\t<span class=\"hljs-comment\">// then wake event handler goroutine which pauses execution</span><br>\t<span class=\"hljs-comment\">// until a callback was triggered.</span><br>\tgp, otherReady := beforeIdle(delta)<br>\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> otherReady &#123;<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Before we drop our P, make a snapshot of the allp slice,</span><br>\t<span class=\"hljs-comment\">// which can change underfoot once we no longer block</span><br>\t<span class=\"hljs-comment\">// safe-points. We don&#x27;t need to snapshot the contents because</span><br>\t<span class=\"hljs-comment\">// everything up to cap(allp) is immutable.</span><br>\tallpSnapshot := allp<br><br>\t<span class=\"hljs-comment\">// return P and block</span><br>\tlock(&amp;sched.lock)<br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> || _p_.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> sched.runqsize != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgp := globrunqget(_p_, <span class=\"hljs-number\">0</span>)<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> releasep() != _p_ &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: wrong p&quot;</span>)<br>\t&#125;<br>\tpidleput(_p_)<br>\tunlock(&amp;sched.lock)<br><br>\t<span class=\"hljs-comment\">// Delicate dance: thread transitions from spinning to non-spinning state,</span><br>\t<span class=\"hljs-comment\">// potentially concurrently with submission of new goroutines. We must</span><br>\t<span class=\"hljs-comment\">// drop nmspinning first and then check all per-P queues again (with</span><br>\t<span class=\"hljs-comment\">// #StoreLoad memory barrier in between). If we do it the other way around,</span><br>\t<span class=\"hljs-comment\">// another thread can submit a goroutine after we&#x27;ve checked all run queues</span><br>\t<span class=\"hljs-comment\">// but before we drop nmspinning; as the result nobody will unpark a thread</span><br>\t<span class=\"hljs-comment\">// to run the goroutine.</span><br>\t<span class=\"hljs-comment\">// If we discover new work below, we need to restore m.spinning as a signal</span><br>\t<span class=\"hljs-comment\">// for resetspinning to unpark a new worker thread (because there can be more</span><br>\t<span class=\"hljs-comment\">// than one starving goroutine). However, if after discovering new work</span><br>\t<span class=\"hljs-comment\">// we also observe no idle Ps, it is OK to just park the current thread:</span><br>\t<span class=\"hljs-comment\">// the system is fully loaded so no spinning threads are required.</span><br>\t<span class=\"hljs-comment\">// Also see &quot;Worker thread parking/unparking&quot; comment at the top of the file.</span><br>\twasSpinning := _g_.m.spinning<br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\t_g_.m.spinning = <span class=\"hljs-literal\">false</span><br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">int32</span>(atomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">-1</span>)) &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: negative nmspinning&quot;</span>)<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// check all runqueues once again</span><br>\t<span class=\"hljs-keyword\">for</span> _, _p_ := <span class=\"hljs-keyword\">range</span> allpSnapshot &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !runqempty(_p_) &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\t_p_ = pidleget()<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tacquirep(_p_)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Check for idle-priority GC work again.</span><br>\t<span class=\"hljs-keyword\">if</span> gcBlackenEnabled != <span class=\"hljs-number\">0</span> &amp;&amp; gcMarkWorkAvailable(<span class=\"hljs-literal\">nil</span>) &#123;<br>\t\tlock(&amp;sched.lock)<br>\t\t_p_ = pidleget()<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &amp;&amp; _p_.gcBgMarkWorker == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpidleput(_p_)<br>\t\t\t_p_ = <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tacquirep(_p_)<br>\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Go back to idle GC check.</span><br>\t\t\t<span class=\"hljs-keyword\">goto</span> stop<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// poll network</span><br>\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; (atomic.Load(&amp;netpollWaiters) &gt; <span class=\"hljs-number\">0</span> || pollUntil != <span class=\"hljs-number\">0</span>) &amp;&amp; atomic.Xchg64(&amp;sched.lastpoll, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span> &#123;<br>\t\tatomic.Store64(&amp;sched.pollUntil, <span class=\"hljs-keyword\">uint64</span>(pollUntil))<br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.p != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: netpoll with p&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: netpoll with spinning&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> faketime != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// When using fake time, just poll.</span><br>\t\t\tdelta = <span class=\"hljs-number\">0</span><br>\t\t&#125;<br>\t\tlist := netpoll(delta) <span class=\"hljs-comment\">// block until new work is available</span><br>\t\tatomic.Store64(&amp;sched.pollUntil, <span class=\"hljs-number\">0</span>)<br>\t\tatomic.Store64(&amp;sched.lastpoll, <span class=\"hljs-keyword\">uint64</span>(nanotime()))<br>\t\t<span class=\"hljs-keyword\">if</span> faketime != <span class=\"hljs-number\">0</span> &amp;&amp; list.empty() &#123;<br>\t\t\t<span class=\"hljs-comment\">// Using fake time and nothing is ready; stop M.</span><br>\t\t\t<span class=\"hljs-comment\">// When all M&#x27;s stop, checkdead will call timejump.</span><br>\t\t\tstopm()<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t\tlock(&amp;sched.lock)<br>\t\t_p_ = pidleget()<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tinjectglist(&amp;list)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tacquirep(_p_)<br>\t\t\t<span class=\"hljs-keyword\">if</span> !list.empty() &#123;<br>\t\t\t\tgp := list.pop()<br>\t\t\t\tinjectglist(&amp;list)<br>\t\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pollUntil != <span class=\"hljs-number\">0</span> &amp;&amp; netpollinited() &#123;<br>\t\tpollerPollUntil := <span class=\"hljs-keyword\">int64</span>(atomic.Load64(&amp;sched.pollUntil))<br>\t\t<span class=\"hljs-keyword\">if</span> pollerPollUntil == <span class=\"hljs-number\">0</span> || pollerPollUntil &gt; pollUntil &#123;<br>\t\t\tnetpollBreak()<br>\t\t&#125;<br>\t&#125;<br>\tstopm()<br>\t<span class=\"hljs-keyword\">goto</span> top<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p>分析上述源码得知查找可用的g的过程如下：</p>\n<ol>\n<li>调用 runqget ，尝试从P本地队列中获取g，获取到返回</li>\n<li>调用 globrunqget ，尝试从全局队列中获取g，获取到返回</li>\n<li>从网络IO轮询器中找到就绪的g，把这个g变为可运行的g</li>\n<li>如果不是所有的P都是空闲的，最多四次，随机选一个P，尝试从这P中偷取一些g，获取到返回</li>\n<li>上面都找不到g来运行，判断此时P是否处于 <code>GC mark</code> 阶段，如果是，那么此时可以安全的扫描和黑化对象和返回 <code>gcBgMarkWorker</code> 来运行， <code>gcBgMarkWorker</code> 是GC后代标记的goroutine。</li>\n<li>再次从全局队列中获取g，获取到返回</li>\n<li>再次检查所有的P，有没有可以运行的g</li>\n<li>再次检查网络IO轮询器</li>\n<li>实在找不到可运行的g了，那就调用 <code>stopm</code> 休眠吧</li>\n</ol>\n<h2 id=\"sysmon\"><a href=\"#sysmon\" class=\"headerlink\" title=\"sysmon\"></a>sysmon</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.sysmon<br>Breakpoint 1 set at 0x43a773 for runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (hits total:1) (PC: 0x43a773)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br>(dlv) si<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (PC: 0x43a777)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br></code></pre></div></td></tr></table></figure>\n\n\n\n<p>全部源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sysmon</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tlock(&amp;sched.lock)<br>\tsched.nmsys++<br>\tcheckdead()<br>\tunlock(&amp;sched.lock)<br><br>\tlasttrace := <span class=\"hljs-keyword\">int64</span>(<span class=\"hljs-number\">0</span>)<br>\tidle := <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// how many cycles in succession we had not wokeup somebody</span><br>\tdelay := <span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> idle == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// start with 20us sleep...</span><br>\t\t\tdelay = <span class=\"hljs-number\">20</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> idle &gt; <span class=\"hljs-number\">50</span> &#123; <span class=\"hljs-comment\">// start doubling the sleep after 1ms...</span><br>\t\t\tdelay *= <span class=\"hljs-number\">2</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> delay &gt; <span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span> &#123; <span class=\"hljs-comment\">// up to 10ms</span><br>\t\t\tdelay = <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">1000</span><br>\t\t&#125;<br>\t\tusleep(delay)<br>\t\tnow := nanotime()<br>\t\tnext, _ := timeSleepUntil()<br>\t\t<span class=\"hljs-keyword\">if</span> debug.schedtrace &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"hljs-number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"hljs-keyword\">uint32</span>(gomaxprocs)) &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"hljs-number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"hljs-keyword\">uint32</span>(gomaxprocs) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> next &gt; now &#123;<br>\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t\tunlock(&amp;sched.lock)<br>\t\t\t\t\t<span class=\"hljs-comment\">// Make wake-up period small enough</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// for the sampling to be correct.</span><br>\t\t\t\t\tsleep := forcegcperiod / <span class=\"hljs-number\">2</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> next-now &lt; sleep &#123;<br>\t\t\t\t\t\tsleep = next - now<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> shouldRelax &#123;<br>\t\t\t\t\t\tosRelax(<span class=\"hljs-literal\">true</span>)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> shouldRelax &#123;<br>\t\t\t\t\t\tosRelax(<span class=\"hljs-literal\">false</span>)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tnow = nanotime()<br>\t\t\t\t\tnext, _ = timeSleepUntil()<br>\t\t\t\t\tlock(&amp;sched.lock)<br>\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"hljs-number\">0</span>)<br>\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)<br>\t\t\t\t&#125;<br>\t\t\t\tidle = <span class=\"hljs-number\">0</span><br>\t\t\t\tdelay = <span class=\"hljs-number\">20</span><br>\t\t\t&#125;<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125;<br>\t\tlock(&amp;sched.sysmonlock)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">// If we spent a long time blocked on sysmonlock</span><br>\t\t\t<span class=\"hljs-comment\">// then we want to update now and next since it&#x27;s</span><br>\t\t\t<span class=\"hljs-comment\">// likely stale.</span><br>\t\t\tnow1 := nanotime()<br>\t\t\t<span class=\"hljs-keyword\">if</span> now1-now &gt; <span class=\"hljs-number\">50</span>*<span class=\"hljs-number\">1000</span> <span class=\"hljs-comment\">/* 50µs */</span> &#123;<br>\t\t\t\tnext, _ = timeSleepUntil()<br>\t\t\t&#125;<br>\t\t\tnow = now1<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// trigger libc interceptors if needed</span><br>\t\t<span class=\"hljs-keyword\">if</span> *cgo_yield != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tasmcgocall(*cgo_yield, <span class=\"hljs-literal\">nil</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// poll network if not polled for more than 10ms</span><br>\t\tlastpoll := <span class=\"hljs-keyword\">int64</span>(atomic.Load64(&amp;sched.lastpoll))<br>\t\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"hljs-number\">0</span> &amp;&amp; lastpoll+<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span>*<span class=\"hljs-number\">1000</span> &lt; now &#123;<br>\t\t\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"hljs-keyword\">uint64</span>(lastpoll), <span class=\"hljs-keyword\">uint64</span>(now))<br>\t\t\tlist := netpoll(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// non-blocking - returns list of goroutines</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !list.empty() &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// Need to decrement number of idle locked M&#x27;s</span><br>\t\t\t\t<span class=\"hljs-comment\">// (pretending that one more is running) before injectglist.</span><br>\t\t\t\t<span class=\"hljs-comment\">// Otherwise it can lead to the following situation:</span><br>\t\t\t\t<span class=\"hljs-comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span><br>\t\t\t\t<span class=\"hljs-comment\">// another M returns from syscall, finishes running its G,</span><br>\t\t\t\t<span class=\"hljs-comment\">// observes that there is no work to do and no other running M&#x27;s</span><br>\t\t\t\t<span class=\"hljs-comment\">// and reports deadlock.</span><br>\t\t\t\tincidlelocked(<span class=\"hljs-number\">-1</span>)<br>\t\t\t\tinjectglist(&amp;list)<br>\t\t\t\tincidlelocked(<span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> next &lt; now &#123;<br>\t\t\t<span class=\"hljs-comment\">// There are timers that should have already run,</span><br>\t\t\t<span class=\"hljs-comment\">// perhaps because there is an unpreemptible P.</span><br>\t\t\t<span class=\"hljs-comment\">// Try to start an M to run them.</span><br>\t\t\tstartm(<span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// Kick the scavenger awake if someone requested it.</span><br>\t\t\twakeScavenger()<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// retake P&#x27;s blocked in syscalls</span><br>\t\t<span class=\"hljs-comment\">// and preempt long running G&#x27;s</span><br>\t\t<span class=\"hljs-keyword\">if</span> retake(now) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tidle = <span class=\"hljs-number\">0</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tidle++<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// check if we need to force a GC</span><br>\t\t<span class=\"hljs-keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tlock(&amp;forcegc.lock)<br>\t\t\tforcegc.idle = <span class=\"hljs-number\">0</span><br>\t\t\t<span class=\"hljs-keyword\">var</span> list gList<br>\t\t\tlist.push(forcegc.g)<br>\t\t\tinjectglist(&amp;list)<br>\t\t\tunlock(&amp;forcegc.lock)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> debug.schedtrace &gt; <span class=\"hljs-number\">0</span> &amp;&amp; lasttrace+<span class=\"hljs-keyword\">int64</span>(debug.schedtrace)*<span class=\"hljs-number\">1000000</span> &lt;= now &#123;<br>\t\t\tlasttrace = now<br>\t\t\tschedtrace(debug.scheddetail &gt; <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\tunlock(&amp;sched.sysmonlock)<br>\t&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<p><code>sysmon</code> 周期性地检查并retake p， 如果发现p处于这个状态且超过10ms就会强制性收回p，m从cgo和syscall返回后会重新尝试拿p，进入调度循环。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>分析核心调度函数 shcedule findrunnable sysmon</p>\n<h2 id=\"schedule\"><a href=\"#schedule\" class=\"headerlink\" title=\"schedule\"></a>schedule</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(dlv) b runtime.schedule<br>Breakpoint 1 set at 0x435cf3 for runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.schedule() /usr/lib/golang/src/runtime/proc.go:2609 (hits total:1) (PC: 0x435cf3)</span><br>Warning: debugging optimized function<br>  2604:         &#125;<br>  2605: &#125;<br>  2606:<br>  2607: // One round of scheduler: find a runnable goroutine and execute it.<br>  2608: // Never returns.<br>=&gt;2609: func schedule() &#123;<br>  2610:         _g_ := getg()<br>  2611:<br>  2612:         if _g_.m.locks != 0 &#123;<br>  2613:                 throw(&quot;schedule: holding locks&quot;)<br>  2614:         &#125;<br></code></pre></td></tr></table></figure>\n\n<p>全部的源码内容如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">schedule</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t_g_ := getg()<br><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.locks != <span class=\"hljs-number\">0</span> &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: holding locks&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.lockedg != <span class=\"hljs-number\">0</span> &#123;<br>\t\tstoplockedm()<br>\t\texecute(_g_.m.lockedg.ptr(), <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// Never returns.</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// We should not schedule away from a g that is executing a cgo call,</span><br>\t<span class=\"hljs-comment\">// since the cgo call is using the m&#x27;s g0 stack.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.incgo &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: in cgo&quot;</span>)<br>\t&#125;<br><br>top:<br>\tpp := _g_.m.p.ptr()<br>\tpp.preempt = <span class=\"hljs-literal\">false</span><br><br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgcstopm()<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pp.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\trunSafePointFn()<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Sanity check: if we are spinning, the run queue should be empty.</span><br>\t<span class=\"hljs-comment\">// Check this before calling checkTimers, as that might call</span><br>\t<span class=\"hljs-comment\">// goready to put a ready goroutine on the local run queue.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &amp;&amp; (pp.runnext != <span class=\"hljs-number\">0</span> || pp.runqhead != pp.runqtail) &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;schedule: spinning with local work&quot;</span>)<br>\t&#125;<br><br>\tcheckTimers(pp, <span class=\"hljs-number\">0</span>)<br><br>\t<span class=\"hljs-keyword\">var</span> gp *g<br>\t<span class=\"hljs-keyword\">var</span> inheritTime <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-comment\">// Normal goroutines will check for need to wakeP in ready,</span><br>\t<span class=\"hljs-comment\">// but GCworkers and tracereaders will not, so the check must</span><br>\t<span class=\"hljs-comment\">// be done here instead.</span><br>\ttryWakeP := <span class=\"hljs-literal\">false</span><br>\t<span class=\"hljs-keyword\">if</span> trace.enabled || trace.shutdown &#123;<br>\t\tgp = traceReader()<br>\t\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\ttryWakeP = <span class=\"hljs-literal\">true</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &amp;&amp; gcBlackenEnabled != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())<br>\t\ttryWakeP = tryWakeP || gp != <span class=\"hljs-literal\">nil</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Check the global runnable queue once in a while to ensure fairness.</span><br>\t\t<span class=\"hljs-comment\">// Otherwise two goroutines can completely occupy the local runqueue</span><br>\t\t<span class=\"hljs-comment\">// by constantly respawning each other.</span><br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.p.ptr().schedtick%<span class=\"hljs-number\">61</span> == <span class=\"hljs-number\">0</span> &amp;&amp; sched.runqsize &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\tgp = globrunqget(_g_.m.p.ptr(), <span class=\"hljs-number\">1</span>)<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgp, inheritTime = runqget(_g_.m.p.ptr())<br>\t\t<span class=\"hljs-comment\">// We can see gp != nil here even if the M is spinning,</span><br>\t\t<span class=\"hljs-comment\">// if checkTimers added a local goroutine via goready.</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tgp, inheritTime = findrunnable() <span class=\"hljs-comment\">// blocks until work is available</span><br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// This thread is going to run a goroutine and is not spinning anymore,</span><br>\t<span class=\"hljs-comment\">// so if it was marked as spinning we need to reset it now and potentially</span><br>\t<span class=\"hljs-comment\">// start a new spinning M.</span><br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\tresetspinning()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> sched.disable.user &amp;&amp; !schedEnabled(gp) &#123;<br>\t\t<span class=\"hljs-comment\">// Scheduling of this goroutine is disabled. Put it on</span><br>\t\t<span class=\"hljs-comment\">// the list of pending runnable goroutines for when we</span><br>\t\t<span class=\"hljs-comment\">// re-enable user scheduling and look again.</span><br>\t\tlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> schedEnabled(gp) &#123;<br>\t\t\t<span class=\"hljs-comment\">// Something re-enabled scheduling while we</span><br>\t\t\t<span class=\"hljs-comment\">// were acquiring the lock.</span><br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tsched.disable.runnable.pushBack(gp)<br>\t\t\tsched.disable.n++<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// If about to schedule a not-normal goroutine (a GCworker or tracereader),</span><br>\t<span class=\"hljs-comment\">// wake a P if there is one.</span><br>\t<span class=\"hljs-keyword\">if</span> tryWakeP &#123;<br>\t\twakep()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> gp.lockedm != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// Hands off own p to the locked m,</span><br>\t\t<span class=\"hljs-comment\">// then blocks waiting for a new p.</span><br>\t\tstartlockedm(gp)<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>\texecute(gp, inheritTime)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>忽略GC和trace后分析源码发现shedule函数本质就是尽力找到可运行的g，然后去运行g上面的任务函数。查找g的流程如下：</p>\n<ol>\n<li>如果当前GC需要停止整个世界（STW), 则调用gcstopm休眠当前的M</li>\n<li>每隔61次调度轮回从全局队列找，避免全局队列中的g被饿死。</li>\n<li>从p.runnext获取g，从p的本地队列中获取。</li>\n<li>调用 <code>findrunnable</code> 找g，找不到的话就将m休眠，等待唤醒。</li>\n</ol>\n<p>当找到一个g后，就会调用 <code>execute</code> 去执行g。</p>\n<h2 id=\"findrunnable\"><a href=\"#findrunnable\" class=\"headerlink\" title=\"findrunnable\"></a>findrunnable</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.findrunnable<br>Breakpoint 1 set at 0x4348d8 for runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (hits total:1) (PC: 0x4348d8)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br>(dlv) si<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.findrunnable() /usr/lib/golang/src/runtime/proc.go:2189 (PC: 0x4348df)</span><br>Warning: debugging optimized function<br>  2184:         gogo(&amp;gp.sched)<br>  2185: &#125;<br>  2186:<br>  2187: // Finds a runnable goroutine to execute.<br>  2188: // Tries to steal from other P&#x27;s, get g from local or global queue, poll network.<br>=&gt;2189: func findrunnable() (gp *g, inheritTime bool) &#123;<br>  2190:         _g_ := getg()<br>  2191:<br>  2192:         // The conditions here and in handoffp must agree: if<br>  2193:         // findrunnable would return a G to run, handoffp must start<br>  2194:         // an M.<br></code></pre></td></tr></table></figure>\n\n\n\n<p>全部源代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findrunnable</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(gp *g, inheritTime <span class=\"hljs-keyword\">bool</span>)</span></span> &#123;<br>\t_g_ := getg()<br><br>\t<span class=\"hljs-comment\">// The conditions here and in handoffp must agree: if</span><br>\t<span class=\"hljs-comment\">// findrunnable would return a G to run, handoffp must start</span><br>\t<span class=\"hljs-comment\">// an M.</span><br><br>top:<br>\t_p_ := _g_.m.p.ptr()<br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgcstopm()<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> _p_.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\trunSafePointFn()<br>\t&#125;<br><br>\tnow, pollUntil, _ := checkTimers(_p_, <span class=\"hljs-number\">0</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> fingwait &amp;&amp; fingwake &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> gp := wakefing(); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tready(gp, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> *cgo_yield != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tasmcgocall(*cgo_yield, <span class=\"hljs-literal\">nil</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// local runq</span><br>\t<span class=\"hljs-keyword\">if</span> gp, inheritTime := runqget(_p_); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, inheritTime<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// global runq</span><br>\t<span class=\"hljs-keyword\">if</span> sched.runqsize != <span class=\"hljs-number\">0</span> &#123;<br>\t\tlock(&amp;sched.lock)<br>\t\tgp := globrunqget(_p_, <span class=\"hljs-number\">0</span>)<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Poll network.</span><br>\t<span class=\"hljs-comment\">// This netpoll is only an optimization before we resort to stealing.</span><br>\t<span class=\"hljs-comment\">// We can safely skip it if there are no waiters or a thread is blocked</span><br>\t<span class=\"hljs-comment\">// in netpoll already. If there is any kind of logical race with that</span><br>\t<span class=\"hljs-comment\">// blocked thread (e.g. it has already returned from netpoll, but does</span><br>\t<span class=\"hljs-comment\">// not set lastpoll yet), this thread will do blocking netpoll below</span><br>\t<span class=\"hljs-comment\">// anyway.</span><br>\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; atomic.Load(&amp;netpollWaiters) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; atomic.Load64(&amp;sched.lastpoll) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> list := netpoll(<span class=\"hljs-number\">0</span>); !list.empty() &#123; <span class=\"hljs-comment\">// non-blocking</span><br>\t\t\tgp := list.pop()<br>\t\t\tinjectglist(&amp;list)<br>\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Steal work from other P&#x27;s.</span><br>\tprocs := <span class=\"hljs-keyword\">uint32</span>(gomaxprocs)<br>\tranTimer := <span class=\"hljs-literal\">false</span><br>\t<span class=\"hljs-comment\">// If number of spinning M&#x27;s &gt;= number of busy P&#x27;s, block.</span><br>\t<span class=\"hljs-comment\">// This is necessary to prevent excessive CPU consumption</span><br>\t<span class=\"hljs-comment\">// when GOMAXPROCS&gt;&gt;1 but the program parallelism is low.</span><br>\t<span class=\"hljs-keyword\">if</span> !_g_.m.spinning &amp;&amp; <span class=\"hljs-number\">2</span>*atomic.Load(&amp;sched.nmspinning) &gt;= procs-atomic.Load(&amp;sched.npidle) &#123;<br>\t\t<span class=\"hljs-keyword\">goto</span> stop<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> !_g_.m.spinning &#123;<br>\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> enum := stealOrder.start(fastrand()); !enum.done(); enum.next() &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t\t&#125;<br>\t\t\tstealRunNextG := i &gt; <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// first look for ready queues with more than 1 g</span><br>\t\t\tp2 := allp[enum.position()]<br>\t\t\t<span class=\"hljs-keyword\">if</span> _p_ == p2 &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> gp := runqsteal(_p_, p2, stealRunNextG); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">// Consider stealing timers from p2.</span><br>\t\t\t<span class=\"hljs-comment\">// This call to checkTimers is the only place where</span><br>\t\t\t<span class=\"hljs-comment\">// we hold a lock on a different P&#x27;s timers.</span><br>\t\t\t<span class=\"hljs-comment\">// Lock contention can be a problem here, so</span><br>\t\t\t<span class=\"hljs-comment\">// initially avoid grabbing the lock if p2 is running</span><br>\t\t\t<span class=\"hljs-comment\">// and is not marked for preemption. If p2 is running</span><br>\t\t\t<span class=\"hljs-comment\">// and not being preempted we assume it will handle its</span><br>\t\t\t<span class=\"hljs-comment\">// own timers.</span><br>\t\t\t<span class=\"hljs-comment\">// If we&#x27;re still looking for work after checking all</span><br>\t\t\t<span class=\"hljs-comment\">// the P&#x27;s, then go ahead and steal from an active P.</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">2</span> || (i &gt; <span class=\"hljs-number\">1</span> &amp;&amp; shouldStealTimers(p2)) &#123;<br>\t\t\t\ttnow, w, ran := checkTimers(p2, now)<br>\t\t\t\tnow = tnow<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> w != <span class=\"hljs-number\">0</span> &amp;&amp; (pollUntil == <span class=\"hljs-number\">0</span> || w &lt; pollUntil) &#123;<br>\t\t\t\t\tpollUntil = w<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> ran &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">// Running the timers may have</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// made an arbitrary number of G&#x27;s</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// ready and added them to this P&#x27;s</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// local run queue. That invalidates</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// the assumption of runqsteal</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// that is always has room to add</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// stolen G&#x27;s. So check now if there</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// is a local G to run.</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> gp, inheritTime := runqget(_p_); gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, inheritTime<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tranTimer = <span class=\"hljs-literal\">true</span><br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> ranTimer &#123;<br>\t\t<span class=\"hljs-comment\">// Running a timer may have made some goroutine ready.</span><br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>stop:<br><br>\t<span class=\"hljs-comment\">// We have nothing to do. If we&#x27;re in the GC mark phase, can</span><br>\t<span class=\"hljs-comment\">// safely scan and blacken objects, and have work to do, run</span><br>\t<span class=\"hljs-comment\">// idle-time marking rather than give up the P.</span><br>\t<span class=\"hljs-keyword\">if</span> gcBlackenEnabled != <span class=\"hljs-number\">0</span> &amp;&amp; _p_.gcBgMarkWorker != <span class=\"hljs-number\">0</span> &amp;&amp; gcMarkWorkAvailable(_p_) &#123;<br>\t\t_p_.gcMarkWorkerMode = gcMarkWorkerIdleMode<br>\t\tgp := _p_.gcBgMarkWorker.ptr()<br>\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tdelta := <span class=\"hljs-keyword\">int64</span>(<span class=\"hljs-number\">-1</span>)<br>\t<span class=\"hljs-keyword\">if</span> pollUntil != <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-comment\">// checkTimers ensures that polluntil &gt; now.</span><br>\t\tdelta = pollUntil - now<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// wasm only:</span><br>\t<span class=\"hljs-comment\">// If a callback returned and no other goroutine is awake,</span><br>\t<span class=\"hljs-comment\">// then wake event handler goroutine which pauses execution</span><br>\t<span class=\"hljs-comment\">// until a callback was triggered.</span><br>\tgp, otherReady := beforeIdle(delta)<br>\t<span class=\"hljs-keyword\">if</span> gp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> otherReady &#123;<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Before we drop our P, make a snapshot of the allp slice,</span><br>\t<span class=\"hljs-comment\">// which can change underfoot once we no longer block</span><br>\t<span class=\"hljs-comment\">// safe-points. We don&#x27;t need to snapshot the contents because</span><br>\t<span class=\"hljs-comment\">// everything up to cap(allp) is immutable.</span><br>\tallpSnapshot := allp<br><br>\t<span class=\"hljs-comment\">// return P and block</span><br>\tlock(&amp;sched.lock)<br>\t<span class=\"hljs-keyword\">if</span> sched.gcwaiting != <span class=\"hljs-number\">0</span> || _p_.runSafePointFn != <span class=\"hljs-number\">0</span> &#123;<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> sched.runqsize != <span class=\"hljs-number\">0</span> &#123;<br>\t\tgp := globrunqget(_p_, <span class=\"hljs-number\">0</span>)<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> releasep() != _p_ &#123;<br>\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: wrong p&quot;</span>)<br>\t&#125;<br>\tpidleput(_p_)<br>\tunlock(&amp;sched.lock)<br><br>\t<span class=\"hljs-comment\">// Delicate dance: thread transitions from spinning to non-spinning state,</span><br>\t<span class=\"hljs-comment\">// potentially concurrently with submission of new goroutines. We must</span><br>\t<span class=\"hljs-comment\">// drop nmspinning first and then check all per-P queues again (with</span><br>\t<span class=\"hljs-comment\">// #StoreLoad memory barrier in between). If we do it the other way around,</span><br>\t<span class=\"hljs-comment\">// another thread can submit a goroutine after we&#x27;ve checked all run queues</span><br>\t<span class=\"hljs-comment\">// but before we drop nmspinning; as the result nobody will unpark a thread</span><br>\t<span class=\"hljs-comment\">// to run the goroutine.</span><br>\t<span class=\"hljs-comment\">// If we discover new work below, we need to restore m.spinning as a signal</span><br>\t<span class=\"hljs-comment\">// for resetspinning to unpark a new worker thread (because there can be more</span><br>\t<span class=\"hljs-comment\">// than one starving goroutine). However, if after discovering new work</span><br>\t<span class=\"hljs-comment\">// we also observe no idle Ps, it is OK to just park the current thread:</span><br>\t<span class=\"hljs-comment\">// the system is fully loaded so no spinning threads are required.</span><br>\t<span class=\"hljs-comment\">// Also see &quot;Worker thread parking/unparking&quot; comment at the top of the file.</span><br>\twasSpinning := _g_.m.spinning<br>\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\t_g_.m.spinning = <span class=\"hljs-literal\">false</span><br>\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">int32</span>(atomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">-1</span>)) &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: negative nmspinning&quot;</span>)<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// check all runqueues once again</span><br>\t<span class=\"hljs-keyword\">for</span> _, _p_ := <span class=\"hljs-keyword\">range</span> allpSnapshot &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !runqempty(_p_) &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\t_p_ = pidleget()<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tacquirep(_p_)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// Check for idle-priority GC work again.</span><br>\t<span class=\"hljs-keyword\">if</span> gcBlackenEnabled != <span class=\"hljs-number\">0</span> &amp;&amp; gcMarkWorkAvailable(<span class=\"hljs-literal\">nil</span>) &#123;<br>\t\tlock(&amp;sched.lock)<br>\t\t_p_ = pidleget()<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &amp;&amp; _p_.gcBgMarkWorker == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpidleput(_p_)<br>\t\t\t_p_ = <span class=\"hljs-literal\">nil</span><br>\t\t&#125;<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tacquirep(_p_)<br>\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">// Go back to idle GC check.</span><br>\t\t\t<span class=\"hljs-keyword\">goto</span> stop<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// poll network</span><br>\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; (atomic.Load(&amp;netpollWaiters) &gt; <span class=\"hljs-number\">0</span> || pollUntil != <span class=\"hljs-number\">0</span>) &amp;&amp; atomic.Xchg64(&amp;sched.lastpoll, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span> &#123;<br>\t\tatomic.Store64(&amp;sched.pollUntil, <span class=\"hljs-keyword\">uint64</span>(pollUntil))<br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.p != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: netpoll with p&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> _g_.m.spinning &#123;<br>\t\t\tthrow(<span class=\"hljs-string\">&quot;findrunnable: netpoll with spinning&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> faketime != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// When using fake time, just poll.</span><br>\t\t\tdelta = <span class=\"hljs-number\">0</span><br>\t\t&#125;<br>\t\tlist := netpoll(delta) <span class=\"hljs-comment\">// block until new work is available</span><br>\t\tatomic.Store64(&amp;sched.pollUntil, <span class=\"hljs-number\">0</span>)<br>\t\tatomic.Store64(&amp;sched.lastpoll, <span class=\"hljs-keyword\">uint64</span>(nanotime()))<br>\t\t<span class=\"hljs-keyword\">if</span> faketime != <span class=\"hljs-number\">0</span> &amp;&amp; list.empty() &#123;<br>\t\t\t<span class=\"hljs-comment\">// Using fake time and nothing is ready; stop M.</span><br>\t\t\t<span class=\"hljs-comment\">// When all M&#x27;s stop, checkdead will call timejump.</span><br>\t\t\tstopm()<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t\tlock(&amp;sched.lock)<br>\t\t_p_ = pidleget()<br>\t\tunlock(&amp;sched.lock)<br>\t\t<span class=\"hljs-keyword\">if</span> _p_ == <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tinjectglist(&amp;list)<br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tacquirep(_p_)<br>\t\t\t<span class=\"hljs-keyword\">if</span> !list.empty() &#123;<br>\t\t\t\tgp := list.pop()<br>\t\t\t\tinjectglist(&amp;list)<br>\t\t\t\tcasgstatus(gp, _Gwaiting, _Grunnable)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> trace.enabled &#123;<br>\t\t\t\t\ttraceGoUnpark(gp, <span class=\"hljs-number\">0</span>)<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> gp, <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> wasSpinning &#123;<br>\t\t\t\t_g_.m.spinning = <span class=\"hljs-literal\">true</span><br>\t\t\t\tatomic.Xadd(&amp;sched.nmspinning, <span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">goto</span> top<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pollUntil != <span class=\"hljs-number\">0</span> &amp;&amp; netpollinited() &#123;<br>\t\tpollerPollUntil := <span class=\"hljs-keyword\">int64</span>(atomic.Load64(&amp;sched.pollUntil))<br>\t\t<span class=\"hljs-keyword\">if</span> pollerPollUntil == <span class=\"hljs-number\">0</span> || pollerPollUntil &gt; pollUntil &#123;<br>\t\t\tnetpollBreak()<br>\t\t&#125;<br>\t&#125;<br>\tstopm()<br>\t<span class=\"hljs-keyword\">goto</span> top<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>分析上述源码得知查找可用的g的过程如下：</p>\n<ol>\n<li>调用 runqget ，尝试从P本地队列中获取g，获取到返回</li>\n<li>调用 globrunqget ，尝试从全局队列中获取g，获取到返回</li>\n<li>从网络IO轮询器中找到就绪的g，把这个g变为可运行的g</li>\n<li>如果不是所有的P都是空闲的，最多四次，随机选一个P，尝试从这P中偷取一些g，获取到返回</li>\n<li>上面都找不到g来运行，判断此时P是否处于 <code>GC mark</code> 阶段，如果是，那么此时可以安全的扫描和黑化对象和返回 <code>gcBgMarkWorker</code> 来运行， <code>gcBgMarkWorker</code> 是GC后代标记的goroutine。</li>\n<li>再次从全局队列中获取g，获取到返回</li>\n<li>再次检查所有的P，有没有可以运行的g</li>\n<li>再次检查网络IO轮询器</li>\n<li>实在找不到可运行的g了，那就调用 <code>stopm</code> 休眠吧</li>\n</ol>\n<h2 id=\"sysmon\"><a href=\"#sysmon\" class=\"headerlink\" title=\"sysmon\"></a>sysmon</h2><p>dlv调试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@583d9a8ec1db p1]# dlv exec ./main<br>Type &#x27;help&#x27; for list of commands.<br>(dlv) b runtime.sysmon<br>Breakpoint 1 set at 0x43a773 for runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642<br>(dlv) c<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (hits total:1) (PC: 0x43a773)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br>(dlv) si<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> runtime.sysmon() /usr/lib/golang/src/runtime/proc.go:4642 (PC: 0x43a777)</span><br>Warning: debugging optimized function<br>  4637: var forcegcperiod int64 = 2 * 60 * 1e9<br>  4638:<br>  4639: // Always runs without a P, so write barriers are not allowed.<br>  4640: //<br>  4641: //go:nowritebarrierrec<br>=&gt;4642: func sysmon() &#123;<br>  4643:         lock(&amp;sched.lock)<br>  4644:         sched.nmsys++<br>  4645:         checkdead()<br>  4646:         unlock(&amp;sched.lock)<br>  4647:<br></code></pre></td></tr></table></figure>\n\n\n\n<p>全部源码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sysmon</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tlock(&amp;sched.lock)<br>\tsched.nmsys++<br>\tcheckdead()<br>\tunlock(&amp;sched.lock)<br><br>\tlasttrace := <span class=\"hljs-keyword\">int64</span>(<span class=\"hljs-number\">0</span>)<br>\tidle := <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// how many cycles in succession we had not wokeup somebody</span><br>\tdelay := <span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> idle == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// start with 20us sleep...</span><br>\t\t\tdelay = <span class=\"hljs-number\">20</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> idle &gt; <span class=\"hljs-number\">50</span> &#123; <span class=\"hljs-comment\">// start doubling the sleep after 1ms...</span><br>\t\t\tdelay *= <span class=\"hljs-number\">2</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> delay &gt; <span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span> &#123; <span class=\"hljs-comment\">// up to 10ms</span><br>\t\t\tdelay = <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">1000</span><br>\t\t&#125;<br>\t\tusleep(delay)<br>\t\tnow := nanotime()<br>\t\tnext, _ := timeSleepUntil()<br>\t\t<span class=\"hljs-keyword\">if</span> debug.schedtrace &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"hljs-number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"hljs-keyword\">uint32</span>(gomaxprocs)) &#123;<br>\t\t\tlock(&amp;sched.lock)<br>\t\t\t<span class=\"hljs-keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"hljs-number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"hljs-keyword\">uint32</span>(gomaxprocs) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> next &gt; now &#123;<br>\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"hljs-number\">1</span>)<br>\t\t\t\t\tunlock(&amp;sched.lock)<br>\t\t\t\t\t<span class=\"hljs-comment\">// Make wake-up period small enough</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// for the sampling to be correct.</span><br>\t\t\t\t\tsleep := forcegcperiod / <span class=\"hljs-number\">2</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> next-now &lt; sleep &#123;<br>\t\t\t\t\t\tsleep = next - now<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> shouldRelax &#123;<br>\t\t\t\t\t\tosRelax(<span class=\"hljs-literal\">true</span>)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> shouldRelax &#123;<br>\t\t\t\t\t\tosRelax(<span class=\"hljs-literal\">false</span>)<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tnow = nanotime()<br>\t\t\t\t\tnext, _ = timeSleepUntil()<br>\t\t\t\t\tlock(&amp;sched.lock)<br>\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"hljs-number\">0</span>)<br>\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)<br>\t\t\t\t&#125;<br>\t\t\t\tidle = <span class=\"hljs-number\">0</span><br>\t\t\t\tdelay = <span class=\"hljs-number\">20</span><br>\t\t\t&#125;<br>\t\t\tunlock(&amp;sched.lock)<br>\t\t&#125;<br>\t\tlock(&amp;sched.sysmonlock)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">// If we spent a long time blocked on sysmonlock</span><br>\t\t\t<span class=\"hljs-comment\">// then we want to update now and next since it&#x27;s</span><br>\t\t\t<span class=\"hljs-comment\">// likely stale.</span><br>\t\t\tnow1 := nanotime()<br>\t\t\t<span class=\"hljs-keyword\">if</span> now1-now &gt; <span class=\"hljs-number\">50</span>*<span class=\"hljs-number\">1000</span> <span class=\"hljs-comment\">/* 50µs */</span> &#123;<br>\t\t\t\tnext, _ = timeSleepUntil()<br>\t\t\t&#125;<br>\t\t\tnow = now1<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// trigger libc interceptors if needed</span><br>\t\t<span class=\"hljs-keyword\">if</span> *cgo_yield != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tasmcgocall(*cgo_yield, <span class=\"hljs-literal\">nil</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// poll network if not polled for more than 10ms</span><br>\t\tlastpoll := <span class=\"hljs-keyword\">int64</span>(atomic.Load64(&amp;sched.lastpoll))<br>\t\t<span class=\"hljs-keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"hljs-number\">0</span> &amp;&amp; lastpoll+<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span>*<span class=\"hljs-number\">1000</span> &lt; now &#123;<br>\t\t\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"hljs-keyword\">uint64</span>(lastpoll), <span class=\"hljs-keyword\">uint64</span>(now))<br>\t\t\tlist := netpoll(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// non-blocking - returns list of goroutines</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !list.empty() &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// Need to decrement number of idle locked M&#x27;s</span><br>\t\t\t\t<span class=\"hljs-comment\">// (pretending that one more is running) before injectglist.</span><br>\t\t\t\t<span class=\"hljs-comment\">// Otherwise it can lead to the following situation:</span><br>\t\t\t\t<span class=\"hljs-comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span><br>\t\t\t\t<span class=\"hljs-comment\">// another M returns from syscall, finishes running its G,</span><br>\t\t\t\t<span class=\"hljs-comment\">// observes that there is no work to do and no other running M&#x27;s</span><br>\t\t\t\t<span class=\"hljs-comment\">// and reports deadlock.</span><br>\t\t\t\tincidlelocked(<span class=\"hljs-number\">-1</span>)<br>\t\t\t\tinjectglist(&amp;list)<br>\t\t\t\tincidlelocked(<span class=\"hljs-number\">1</span>)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> next &lt; now &#123;<br>\t\t\t<span class=\"hljs-comment\">// There are timers that should have already run,</span><br>\t\t\t<span class=\"hljs-comment\">// perhaps because there is an unpreemptible P.</span><br>\t\t\t<span class=\"hljs-comment\">// Try to start an M to run them.</span><br>\t\t\tstartm(<span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// Kick the scavenger awake if someone requested it.</span><br>\t\t\twakeScavenger()<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// retake P&#x27;s blocked in syscalls</span><br>\t\t<span class=\"hljs-comment\">// and preempt long running G&#x27;s</span><br>\t\t<span class=\"hljs-keyword\">if</span> retake(now) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tidle = <span class=\"hljs-number\">0</span><br>\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\tidle++<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// check if we need to force a GC</span><br>\t\t<span class=\"hljs-keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tlock(&amp;forcegc.lock)<br>\t\t\tforcegc.idle = <span class=\"hljs-number\">0</span><br>\t\t\t<span class=\"hljs-keyword\">var</span> list gList<br>\t\t\tlist.push(forcegc.g)<br>\t\t\tinjectglist(&amp;list)<br>\t\t\tunlock(&amp;forcegc.lock)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> debug.schedtrace &gt; <span class=\"hljs-number\">0</span> &amp;&amp; lasttrace+<span class=\"hljs-keyword\">int64</span>(debug.schedtrace)*<span class=\"hljs-number\">1000000</span> &lt;= now &#123;<br>\t\t\tlasttrace = now<br>\t\t\tschedtrace(debug.scheddetail &gt; <span class=\"hljs-number\">0</span>)<br>\t\t&#125;<br>\t\tunlock(&amp;sched.sysmonlock)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>sysmon</code> 周期性地检查并retake p， 如果发现p处于这个状态且超过10ms就会强制性收回p，m从cgo和syscall返回后会重新尝试拿p，进入调度循环。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckshaj2460001ie8zaa5998l6","category_id":"ckshc2kdo00002r8z2adqd3mj","_id":"ckshls3e200029d8zejs27y6v"},{"post_id":"cksoctoh00000mn8z5wzr74op","category_id":"cksoctoh70001mn8z7tr052fq","_id":"cksoctohb0004mn8zhjiuell2"},{"post_id":"cksriqm8v0000c88zfvb4dus5","category_id":"cksoctoh70001mn8z7tr052fq","_id":"cksriqm910003c88z8y50dug6"},{"post_id":"cksrmjlz70000lo8z831y2ng7","category_id":"cksoctoh70001mn8z7tr052fq","_id":"cksrmjlzf0002lo8z7mvl8dfa"},{"post_id":"ckt45i8a500010v8zddqfhzos","category_id":"cksoctoh70001mn8z7tr052fq","_id":"ckt463fgo0001su8zfyve8sml"},{"post_id":"ckuevhqw50000nw8zglvm24c4","category_id":"ckueye19i0001yx8z0pts62qa","_id":"ckueye19n0005yx8za28k9fq8"},{"post_id":"ckueyrodp00007b8z2lt0fogc","category_id":"ckueye19i0001yx8z0pts62qa","_id":"ckueyrody00027b8z9qjlepwx"}],"PostTag":[{"post_id":"ckshaj2460001ie8zaa5998l6","tag_id":"ckshc2kdr00012r8z4414c3mi","_id":"ckshls3dz00009d8z0eqp1p37"},{"post_id":"ckshaj2460001ie8zaa5998l6","tag_id":"ckshbt0m80000tn8zhr2vfybb","_id":"ckshls3e200019d8z4fwg0jqj"},{"post_id":"cksoctoh00000mn8z5wzr74op","tag_id":"cksoctoh90002mn8zhor2fxcq","_id":"cksoctohc0006mn8zbvun1ieo"},{"post_id":"cksoctoh00000mn8z5wzr74op","tag_id":"cksoctoha0003mn8z8ujq9jc9","_id":"cksoctohc0007mn8z477rf4m7"},{"post_id":"cksoctoh00000mn8z5wzr74op","tag_id":"cksoctohb0005mn8zdvkednm4","_id":"cksoctohc0008mn8zdpnl55ec"},{"post_id":"cksriqm8v0000c88zfvb4dus5","tag_id":"cksoctoh90002mn8zhor2fxcq","_id":"cksriqm910001c88zgpmu3fsl"},{"post_id":"cksriqm8v0000c88zfvb4dus5","tag_id":"cksrbn4bh00011w8z29tfecvu","_id":"cksriqm910002c88z6vvm1zo6"},{"post_id":"cksriqm8v0000c88zfvb4dus5","tag_id":"cksrbn4bk00031w8zdfvc1vl4","_id":"cksriqm910004c88zfw150nhy"},{"post_id":"cksrmjlz70000lo8z831y2ng7","tag_id":"cksoctoh90002mn8zhor2fxcq","_id":"cksrmjlzf0001lo8zh9y4fv6j"},{"post_id":"ckt45i8a500010v8zddqfhzos","tag_id":"ckt52w54a0000i08z3ezlbnda","_id":"ckt52w54g0003i08z7rnd6hi8"},{"post_id":"ckt45i8a500010v8zddqfhzos","tag_id":"ckt52w54e0001i08z9cosbcmm","_id":"ckt52w54g0004i08z8cmdfknv"},{"post_id":"ckt45i8a500010v8zddqfhzos","tag_id":"ckt52w54f0002i08z49e94r0e","_id":"ckt52w54g0005i08zb9yl8gyt"},{"post_id":"ckuevhqw50000nw8zglvm24c4","tag_id":"ckt52w54f0002i08z49e94r0e","_id":"ckueye19n0003yx8zfwzi6mld"},{"post_id":"ckuevhqw50000nw8zglvm24c4","tag_id":"ckueye19m0002yx8z2hjf3npn","_id":"ckueye19n0004yx8z1izqdya7"},{"post_id":"ckueyrodp00007b8z2lt0fogc","tag_id":"ckueye19m0002yx8z2hjf3npn","_id":"ckueyrodz00047b8zhdc27pzq"},{"post_id":"ckueyrodp00007b8z2lt0fogc","tag_id":"ckueyrodu00017b8z6gaebted","_id":"ckueyrodz00057b8z0d6a0s6i"},{"post_id":"ckueyrodp00007b8z2lt0fogc","tag_id":"ckueyrody00037b8zgszs4sg6","_id":"ckueyroe000067b8zg8op7kd4"},{"post_id":"ckueyrodp00007b8z2lt0fogc","tag_id":"ckufbxegs0000rg8zhgac4tbb","_id":"ckufbxegw0001rg8zg4mc1pfi"}],"Tag":[{"name":"ddd","_id":"ckshbt0m80000tn8zhr2vfybb"},{"name":"微服务","_id":"ckshc2kdr00012r8z4414c3mi"},{"name":"mysql","_id":"cksoctoh90002mn8zhor2fxcq"},{"name":"高可用","_id":"cksoctoha0003mn8z8ujq9jc9"},{"name":"数据同步","_id":"cksoctohb0005mn8zdvkednm4"},{"name":"ACID","_id":"cksrbn4bh00011w8z29tfecvu"},{"name":"mvcc","_id":"cksrbn4bk00031w8zdfvc1vl4"},{"name":"缓存","_id":"ckt52w54a0000i08z3ezlbnda"},{"name":"hash","_id":"ckt52w54e0001i08z9cosbcmm"},{"name":"golang","_id":"ckt52w54f0002i08z49e94r0e"},{"name":"runtime","_id":"ckueye19m0002yx8z2hjf3npn"},{"name":"schedule","_id":"ckueyrodu00017b8z6gaebted"},{"name":"sysmon","_id":"ckueyrody00037b8zgszs4sg6"},{"name":"findrunnable","_id":"ckufbxegs0000rg8zhgac4tbb"}]}}